{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Presentaci\u00f3n","text":"<p>Bienvenido/a a la asignatura de Programaci\u00f3n, Redes y Sistemas Inform\u00e1ticos I (PRSII) del IES San Vicente. </p> <p>A lo largo de este curso aprenderemos a programar, a entender c\u00f3mo funciona un ordenador por dentro y a descubrir c\u00f3mo se comunican los dispositivos a trav\u00e9s de redes. Adem\u00e1s, crearemos nuestros propios videojuegos utilizando PyGame Zero, una herramienta pensada para iniciarse en el desarrollo interactivo de manera sencilla y divertida. Para cerrar el curso, nos iniciaremos en el desarrollo web, donde crearemos y daremos estilo a nuestras propias p\u00e1ginas utilizando HTML y CSS.</p> <p>Puedes acceder a la presentaci\u00f3n de la asignatura desde este enlace: PRESENTACI\u00d3N</p> <p>El uso de estos materiales est\u00e1 sujeto a una licencia Creative Commons CC BY-NC.</p>"},{"location":"programacionIA_01.html","title":"1. Introducci\u00f3n a la Inteligencia Artificial","text":"<p>La inteligencia artificial es una de las tecnolog\u00edas m\u00e1s influyentes del siglo XXI, con aplicaciones en m\u00faltiples sectores y un impacto creciente en nuestra vida cotidiana. En esta unidad, nos adentraremos en el concepto de IA, sus principios fundamentales, sus aplicaciones m\u00e1s relevantes y los retos \u00e9ticos que plantea.</p> <p>Durante el desarrollo de la unidad, abordaremos: * La definici\u00f3n y evoluci\u00f3n de la inteligencia artificial. * Las distintas aplicaciones de la IA en la vida diaria y en diversos campos profesionales. * Los fundamentos del aprendizaje autom\u00e1tico y su funcionamiento. * Los riesgos y beneficios asociados a su uso.</p> <p>A trav\u00e9s de ejemplos concretos y ejercicios pr\u00e1cticos, desarrollaremos una visi\u00f3n cr\u00edtica sobre la inteligencia artificial, comprendiendo tanto su potencial como sus desaf\u00edos.</p>"},{"location":"programacionIA_01.html#11-que-es-la-ia","title":"1.1 \u00bfQu\u00e9 es la IA?","text":"<p>La Inteligencia Artificial (IA) es la capacidad de las m\u00e1quinas para realizar tareas que normalmente requieren inteligencia humana, como aprender, razonar, resolver problemas o tomar decisiones.</p> <p>\ud83d\udccc DATO CURIOSO: El t\u00e9rmino Inteligencia Artificial fue acu\u00f1ado en 1956 por John McCarthy, un cient\u00edfico que so\u00f1aba con crear m\u00e1quinas que \"pensaran\" por s\u00ed mismas.</p>"},{"location":"programacionIA_01.html#12-donde-encontramos-la-ia-en-nuestra-vida-diaria","title":"1.2 \u00bfD\u00f3nde encontramos la IA en nuestra vida diaria?","text":"<p>La IA est\u00e1 cada vez m\u00e1s presente en nuestra vida diaria, aunque a veces no lo notemos. Aqu\u00ed tienes algunos ejemplos:</p> <ul> <li>Tu m\u00f3vil desbloque\u00e1ndose con tu cara \u2192 Reconocimiento facial.</li> <li>Netflix recomend\u00e1ndote series que te gustan \u2192 Algoritmos de recomendaci\u00f3n.</li> <li>Siri, Alexa o Google Assistant respondiendo preguntas \u2192 Procesamiento de lenguaje natural.</li> <li>Google Maps calculando la ruta m\u00e1s r\u00e1pida \u2192 An\u00e1lisis de datos en tiempo real.</li> <li>Filtros de redes sociales detectando tu rostro y aplicando efectos \u2192 Visi\u00f3n por computadora.</li> <li>Coches aut\u00f3nomos como Tesla \u2192 Sistemas de IA analizan el tr\u00e1fico, peatones y se\u00f1ales de tr\u00e1fico para conducir sin intervenci\u00f3n humana.</li> <li>IA en los videojuegos \u2192 Los enemigos en un shooter reaccionan a tus movimientos, los NPC (personajes no jugadores) en juegos de rol act\u00faan de forma m\u00e1s realista.</li> </ul> <p>\ud83d\udd0d EJERCICIO R\u00c1PIDO</p> <p>\u00bfCu\u00e1nta IA has usado hoy? Haz una lista de todas las veces que has interactuado con sistemas de IA desde que te has despertado. A continuaci\u00f3n, compara tu lista con la de tu compa\u00f1ero/a: * \u00bfQui\u00e9n us\u00f3 m\u00e1s IA? * \u00bfEn qu\u00e9 \u00e1reas de la vida se usa m\u00e1s IA? (entretenimiento, comunicaci\u00f3n, transporte, etc.) * \u00bfHubo alguna IA que tu compa\u00f1ero/a anot\u00f3 y que t\u00fa no hab\u00edas notado?</p>"},{"location":"programacionIA_01.html#12-como-funciona-la-ia","title":"1.2 \u00bfC\u00f3mo funciona la IA?","text":"<p>Para que una m\u00e1quina \"aprenda\", necesita datos. La IA analiza grandes vol\u00famenes de informaci\u00f3n y encuentra patrones para tomar decisiones.</p> <p>\ud83d\udccc Ejemplo: Un sistema de IA que reconoce gatos en fotos necesita ver miles de im\u00e1genes de gatos para aprender a identificarlos.</p> <p>La IA aprende siguiendo estos cuatro pasos:</p> <ol> <li>Recoger datos: se recopilan datos de distintas fuentes. Por ejemplo, im\u00e1genes de gatos y perros para entrenar un sistema de clasificaci\u00f3n de animales.</li> <li>Procesar y almacenar informaci\u00f3n: se organizan los datos en un formato que la m\u00e1quina pueda entender, como valores num\u00e9ricos que representan colores y formas. </li> <li>Aprender patrones: la IA analiza los datos y detecta caracter\u00edsticas recurrentes, como las orejas puntiagudas y ojos grandes de los gatos.</li> <li>Generar predicciones: a partir de lo aprendido, la IA realiza inferencias. Por ejemplo: \"Esta imagen tiene orejas puntiagudas y ojos grandes, probablemente sea un gato.\"</li> </ol>"},{"location":"programacionIA_01.html#13-tipos-de-ia","title":"1.3 Tipos de IA","text":"<p>No todas las IA son iguales. Se pueden clasificar en dos grandes categor\u00edas:</p> <ul> <li>Inteligencia artificial fuerte (general): se trata de una IA capaz de replicar la inteligencia humana en m\u00faltiples tareas y aprender conceptos nuevos sin intervenci\u00f3n externa. Podemos encontrar algunos ejemplos ilustrativos de lo que supone en algunas pel\u00edculas o series de ciencia ficci\u00f3n. Por ejemplo, el asistente Jarvis (IronMan), o el robot Sony (Yo, robot). En la actualidad, no existe, pero herramientas como ChatGPT y robots avanzados nos acercan a esta posibilidad.</li> <li>Inteligencia artificial d\u00e9bil (espec\u00edfica): dise\u00f1ada para realizar una tarea concreta, como el reconocimiento de voz, la detecci\u00f3n de fraudes o la conducci\u00f3n aut\u00f3noma. Estas IA ya est\u00e1n ampliamente implementadas en la vida real.</li> </ul>"},{"location":"programacionIA_01.html#14-riesgos-y-beneficios-de-la-ia","title":"1.4 Riesgos y beneficios de la IA","text":"<p>La inteligencia artificial est\u00e1 revolucionando m\u00faltiples sectores, con grandes ventajas pero tambi\u00e9n riesgos importantes. Veamos algunos ejemplos concretos.</p> <ul> <li> <p>Beneficios</p> <ul> <li>Medicina y diagn\u00f3stico: un sistema de IA desarrollado por Google Health y DeepMind logr\u00f3 detectar c\u00e1ncer de mama con mayor precisi\u00f3n que los radi\u00f3logos. Un estudio publicado en Nature en 2020 mostr\u00f3 que la IA redujo los falsos positivos y falsos negativos en mamograf\u00edas.</li> <li>Accesibilidad y traducci\u00f3n autom\u00e1tica: Google Translate y Whisper AI de OpenAI han mejorado la accesibilidad para personas con discapacidad auditiva al generar subt\u00edtulos en tiempo real con gran precisi\u00f3n. Tambi\u00e9n, las IA pueden describir im\u00e1genes para personas con discapacidad visual.</li> <li>Creatividad y arte: herramientas como DALL\u00b7E de OpenAI y Runway ML permiten a los dise\u00f1adores crear im\u00e1genes, animaciones y efectos especiales con IA. DALL\u00b7E puede generar im\u00e1genes a partir de texto, mientras que Runway ML ha sido utilizada en producciones de Hollywood.</li> </ul> </li> <li> <p>Riesgos \u00e9ticos y sociales</p> <ul> <li>Desinformaci\u00f3n y noticias falsas: con IA generativa es cada vez m\u00e1s dif\u00edcil diferenciar lo real de lo falso. Se han creado deepfakes de pol\u00edticos diciendo cosas que nunca dijeron, manipulando la opini\u00f3n p\u00fablica en elecciones.</li> <li>Sesgo y discriminaci\u00f3n: si los datos est\u00e1n sesgados, la IA tomar\u00e1 decisiones injustas. En EE.UU., un sistema de IA para predecir reincidencia criminal recomendaba penas m\u00e1s largas para personas de raza negra debido a datos hist\u00f3ricos sesgados.</li> <li>Privacidad: muchas IA recopilan datos personales sin que los propietarios sean plenamente conscientes de eso. Por ejemplo, algoritmos que rastrean lo que compras en internet o casos como los de  China, donde se usan sistemas de reconocimiento facial para monitorear a la poblaci\u00f3n en tiempo real.</li> <li>Impacto en el empleo especializado: a diferencia de la automatizaci\u00f3n industrial, la IA est\u00e1 empezando a reemplazar trabajos creativos e intelectuales. Por ejemplo, algunos medios de comunicaci\u00f3n han reemplazado periodistas por IA para redactar noticias b\u00e1sicas. Tambi\u00e9n, estudios de doblaje han comenzado a usar IA para replicar voces en lugar de contratar actores de voz.</li> </ul> </li> </ul> <p>\ud83d\udd0d EJERCICIO EN GRUPO</p> <p>Forma un equipo de 3 o 4 personas y os convertir\u00e9is en detectives de IA. Vuestra misi\u00f3n es investigar c\u00f3mo se est\u00e1 usando la IA en un campo espec\u00edfico y presentar vuestros hallazgos a la clase.</p> <p>Fase 1: Elegid un campo donde se use IA. Cada equipo elegir\u00e1 un \u00e1rea donde la IA tenga un papel importante. Aqu\u00ed ten\u00e9is algunas opciones:  * Salud y Medicina \u2192 Diagn\u00f3stico de enfermedades, cirug\u00edas con IA, an\u00e1lisis de im\u00e1genes m\u00e9dicas * Transporte y conducci\u00f3n aut\u00f3noma \u2192 Coches como Tesla, control del tr\u00e1fico, predicci\u00f3n de rutas. * Videojuegos \u2192 NPCs inteligentes, personalizaci\u00f3n de experiencia, generaci\u00f3n de mundos. * Entretenimiento y redes sociales \u2192 Recomendaciones de Netflix/Spotify, algoritmos de TikTok e Instagram. * Educaci\u00f3n \u2192 IA en clases virtuales, herramientas como ChatGPT para estudiar. * Finanzas y comercio \u2192 IA en bancos, predicciones de la bolsa, atenci\u00f3n al cliente con chatbots.</p> <p>Fase 2: Investigad y responded a estas preguntas * \u00bfQu\u00e9 problema soluciona la IA en este campo?  * \u00bfC\u00f3mo funciona? (explicaci\u00f3n b\u00e1sica sin tecnicismos, pero clara). * Ejemplos reales: empresas, aplicaciones o proyectos que ya est\u00e9n usando esta tecnolog\u00eda. * Beneficios y riesgos: \u00bfcu\u00e1les son las ventajas y los posibles problemas que puede causar?</p> <p>\u26a0\ufe0f Consejo: Buscad informaci\u00f3n en art\u00edculos, v\u00eddeos o p\u00e1ginas web oficiales.</p> <p>Fase 3: Preparad vuestra presentaci\u00f3n * Tendr\u00e9is 5 minutos para presentar lo que hab\u00e9is investigado. Pod\u00e9is elegir el formato que m\u00e1s os guste (presentaci\u00f3n, poster o infograf\u00eda, role-play o simulaci\u00f3n sobre c\u00f3mo funciona la IA en ese campo, mini-video explicativo, etc)</p> <p>Fase 4: Reflexi\u00f3n final y debate. Despu\u00e9s de todas las presentaciones, haremos una discusi\u00f3n en clase: * \u00bfCu\u00e1l fue el uso de la IA m\u00e1s sorprendente? * \u00bfHay alg\u00fan sector donde la IA pueda ser un problema m\u00e1s que una soluci\u00f3n? * \u00bfC\u00f3mo os imagin\u00e1is la IA en estos campos dentro de 10 a\u00f1os?</p>"},{"location":"programacionIA_01.html#resumen","title":"RESUMEN","text":"<p>\u2705 La IA permite a las m\u00e1quinas aprender y tomar decisiones basadas en datos. \u2705 Existen diferentes tipos de IA: d\u00e9bil (especializada en una tarea) y fuerte (a\u00fan te\u00f3rica). \u2705 La IA ya est\u00e1 presente en nuestra vida diaria, desde asistentes virtuales hasta videojuegos y coches aut\u00f3nomos. \u2705 Aunque tiene ventajas, tambi\u00e9n presenta riesgos como el sesgo, la privacidad y la automatizaci\u00f3n del trabajo.</p>"},{"location":"programacionIA_02.html","title":"2. Machine Learning y Deep Learning","text":"<p>La Inteligencia Artificial (IA) ha evolucionado de forma sorprendente en los \u00faltimos a\u00f1os, impactando en numerosos campos como la medicina, la conducci\u00f3n aut\u00f3noma y el reconocimiento de voz. Dentro de la IA, dos de las ramas m\u00e1s importantes son Machine Learning (ML) y Deep Learning (DL). Ambas permiten a las m\u00e1quinas aprender a partir de datos, pero lo hacen con enfoques distintos.</p> <p>En esta unidad exploraremos: * Qu\u00e9 es el machine learning y en qu\u00e9 se diferencia de la programaci\u00f3n tradicional. * Tipos de machine learning: supervisado, no supervisado y por refuerzo. * Qu\u00e9 es el deep learning y en qu\u00e9 se diferencia del machine learning. * Entrenaremos modelos b\u00e1sicos con Teachable Machine.</p> <p>Al final, comprender\u00e1s c\u00f3mo hacer que una m\u00e1quina aprenda y habr\u00e1s experimentado con modelos de clasificaci\u00f3n. \u00a1Vamos all\u00e1!</p>"},{"location":"programacionIA_02.html#21-que-es-el-machine-learning","title":"2.1  \u00bfQu\u00e9 es el Machine Learning?","text":"<p>La programaci\u00f3n tradicional se basa en escribir reglas expl\u00edcitas para resolver problemas. En cambio, Machine Learning permite a una m\u00e1quina aprender patrones a partir de datos, sin necesidad de ser programada de forma expl\u00edcita.</p> <p>Por ejemplo:  * Si queremos que un programa distinga entre perros y gatos, con programaci\u00f3n tradicional deber\u00edamos escribir una lista de reglas (como \"los perros tienen hocicos m\u00e1s largos\"), lo cual puede ser complicado y poco preciso.  * Con Machine Learning, simplemente le mostramos muchas im\u00e1genes de perros y gatos con sus etiquetas correspondientes, y el modelo aprende a diferenciarlos por s\u00ed mismo.</p> <p>Gracias a esta tecnolog\u00eda, los sistemas pueden mejorar su rendimiento a lo largo del tiempo, volvi\u00e9ndose m\u00e1s precisos conforme reciben m\u00e1s informaci\u00f3n.</p> <p>\ud83d\udccc DATO CURIOSO: el primer programa de Machine Learning fue creado en 1959 por Arthur Samuel, quien desarroll\u00f3 un sistema que aprend\u00eda a jugar al ajedrez mejorando con la pr\u00e1ctica. Su algoritmo se volvi\u00f3 tan bueno que lleg\u00f3 a vencer a jugadores humanos experimentados.</p>"},{"location":"programacionIA_02.html#212-tipos-de-machine-learning","title":"2.1.2 Tipos de machine learning","text":"<p>El aprendizaje autom\u00e1tico se divide en tres grandes categor\u00edas:</p> <ul> <li> <p>Aprendizaje supervisado</p> <ul> <li>En este enfoque, el modelo aprende a partir de datos etiquetados. Es decir, proporcionamos ejemplos con la respuesta correcta. </li> <li>Por ejemplo, si queremos que un sistema detecte si un correo electr\u00f3nico es spam, le mostramos miles de ejemplos de correos spam y no spam para que reconozca patrones.</li> </ul> </li> <li> <p>Aprendizaje no supervisado</p> <ul> <li>En este caso, el modelo no tiene etiquetas y debe encontrar patrones en los datos por s\u00ed mismo. </li> <li>Un ejemplo com\u00fan es la segmentaci\u00f3n de clientes,donde una empresa analiza los comportamientos de compra para agrupar a sus clientes en distintos perfiles sin saber previamente cu\u00e1les son estos perfiles.</li> </ul> </li> <li> <p>Aprendizaje por refuerzo</p> <ul> <li>Este tipo de aprendizaje es similar a la forma en que aprendemos muchas cosas: por ensayo y error. Un sistema de aprendizaje por refuerzo interact\u00faa con su entorno y recibe recompensas o castigos seg\u00fan sus acciones. </li> <li>Se usa, por ejemplo, en la creaci\u00f3n de inteligencia artificial para videojuegos o en robots que aprenden a caminar.</li> </ul> </li> </ul> <p>\ud83d\udd0d Ejercicio: Observa los siguientes ejemplos y clasif\u00edcalos seg\u00fan su tipo de Machine Learning: * Un sistema de IA que detecta fraudes bancarios. * Un chatbot que aprende a responder preguntas a partir de conversaciones previas. * Un algoritmo que recomienda m\u00fasica seg\u00fan tus canciones favoritas.</p>"},{"location":"programacionIA_02.html#22-que-es-el-deep-learning-y-en-que-se-diferencia-de-machine-learning","title":"2.2 \u00bfQu\u00e9 es el Deep Learning y en qu\u00e9 se diferencia de Machine Learning?","text":"<p>El Deep Learning es una subcategor\u00eda dentro del Machine Learning que se basa en redes neuronales artificiales inspiradas en el cerebro humano. </p> <p>Diferencias clave</p> Machine Learning Deep Learning Necesita itnervenci\u00f3n humana para identificar patrones Aprende patrones por s\u00ed mismo a trav\u00e9s de redes neuronales Funciona bien con vol\u00famenes peque\u00f1os o medianos de datos Necesita grandes cantidades de datos <p>Como vemos, la clave del Deep Learning es su capacidad para procesar grandes vol\u00famenes de datos y extraer caracter\u00edsticas complejas sin necesidad de intervenci\u00f3n manual.</p> <p>Por ejemplo: * En Machine Learning tradicional, para reconocer caras en fotos, primero seleccionamos caracter\u00edsticas como el contorno de ojos o la forma de la nariz.  * Un modelo de Deep Learning puede aprender esas caracter\u00edsticas por s\u00ed solo, gracias a sus m\u00faltiples capas de neuronas artificiales.</p>"},{"location":"programacionIA_02.html#221-como-funciona-una-red-neuronal","title":"2.2.1 \u00bfC\u00f3mo funciona una red neuronal?","text":"<p>Una red neuronal artificial es un modelo matem\u00e1tico inspirado en el cerebro humano. Est\u00e1 formada por neuronas artificiales, organizadas en capas: una capa de entrada, varias capas ocultas y una capa de salida. </p> <p>Cada neurona recibe datos, los procesa y los transmite a las siguientes neuronas a trav\u00e9s de conexiones ponderadas. A medida que el modelo se entrena con datos, ajusta los pesos de estas conexiones para mejorar sus predicciones. </p> <p>Este proceso de ajuste se llama retropropagaci\u00f3n y permite que la red neuronal aprenda patrones complejos sin intervenci\u00f3n manual.</p> <p>Si te interesa este tema y quieres profundizar m\u00e1s, te recomiendo el canal DotCSV donde encontrar\u00e1s contenido especializado sobre inteligencia artificial y redes neuronales.</p> <p>Aqu\u00ed tienes un v\u00eddeo en el que explica qu\u00e9 es una neurona artificial. </p> <p>Adem\u00e1s, en este enlace puedes acceder a una serie de v\u00eddeos m\u00e1s avanzados sobre el funcionamiento de las redes neuronales.</p> <p>\ud83d\udccc DATO CURIOSO: Google Photos usa redes neuronales para reconocer rostros y objetos en tus fotos, permiti\u00e9ndote buscar im\u00e1genes escribiendo palabras clave como \"playa\" o \"perro\" sin necesidad de etiquetarlas manualmente.</p>"},{"location":"programacionIA_02.html#23-entrenamiento-de-modelos-con-teachable-machine","title":"2.3 Entrenamiento de modelos con Teachable Machine","text":"<p>Para comprender mejor estos conceptos, utilizaremos Teachable Machine, una herramienta de Google que permite entrenar modelos de Machine Learning de manera sencilla. </p> <p>Con esta plataforma, podremos crear modelos que clasifiquen im\u00e1genes, sonidos o posturas sin necesidad de escribir. </p> <p>En este caso, vamos a entrenar un modelo para que clasifique im\u00e1genes que muestren un pulgar arriba o un pulgar abajo. El modelo aprender\u00e1 a diferenciar estas im\u00e1genes a partir de ejemplos que le proporcionemos.</p> <p>Paso 1. Acceso a Teachable Machine</p> <ul> <li>Accede a Teachable Machine &gt; Primeros pasos</li> <li>Selecciona un Proyecto de imagen &gt; Modelo de imagen est\u00e1ndar</li> </ul> <p>Paso 2. Creaci\u00f3n de las clases</p> <ul> <li>Por defecto, aparecen creadas dos clases. Ren\u00f3mbralas como \"PulgarArriba\" y \"PulgarAbajo\" (es recomendable no dejar espacios en blanco en los nombres de las clases)</li> </ul> <p>Paso 3. Recoger im\u00e1gnes</p> <ul> <li> <p>Para entrenar el modelo, necesitamos proporcionar ejemplos de cada clase. Hay dos formas de a\u00f1adir im\u00e1genes:</p> <ul> <li>\ud83d\udcf8 Capturar im\u00e1genes con la webcam</li> <li>\ud83d\udcc1 Subir im\u00e1genes desde el ordenador</li> </ul> </li> <li> <p>Consejos para recoger buenas muestras:     \u2705 Toma al menos 50 im\u00e1genes por cada clase.     \u2705 Var\u00eda el \u00e1ngulo y la distancia para mejorar la precisi\u00f3n del modelo.     \u2705 Usa buena iluminaci\u00f3n y un fondo claro.</p> </li> </ul> <p>Paso 4. Entrenamiento del modelo</p> <p>Una vez tengamos las im\u00e1genes, vamos a entrenar el modelo. En \"Avanzado\", encontrar\u00e1s algunos par\u00e1metros que puedes ajustar para mejorar la precisi\u00f3n del modelo.</p> <p>\ud83d\udd39 \u00c9pocas (epochs): n\u00famero de veces que el modelo revisar\u00e1 todas las im\u00e1genes para aprender. Valores recomendados:    * 10-20 \u00e9pocas si tienes muchas im\u00e1genes    * 30-50 \u00e9pocas si tienes pocas im\u00e1genes.</p> <p>\ud83d\udd39 Tama\u00f1o del Lote (batch size): cantidad de im\u00e1genes que el modelo analizar\u00e1 al mismo tiempo en cada iteraci\u00f3n. Valores recomendados:   * 16 o 32 im\u00e1genes por lote para equilibrio entre velocidad y precisi\u00f3n.</p> <p>\ud83d\udd39 Tasa de Aprendizaje (learning rate): velocidad con la que el modelo ajusta su aprendizaje en cada iteraci\u00f3n. Valores recomendados:   * 0.001 o 0.0001 (valores altos pueden hacer que el modelo aprenda r\u00e1pido pero mal, valores bajos pueden hacer que aprenda lento pero mejor).</p> <p>Para empezar, usa: * \u00c9pocas: 30 * Tama\u00f1o del lote: 16 * Tasa de aprendizaje: 0.001</p> <p>Paso 5. Prueba del modelo</p> <p>Prueba el modelo proporcionando una imagen diferente, por ejemplo, con el pulgar de otro compa\u00f1ero/a y en diferentes posiciones y observa el resultado. Si ves que el modelo no es muy preciso, prueba con im\u00e1genes diferentes o cambia los valores de entrenamiento (\u00e9pocas, lotes, ...) </p>"},{"location":"programacionIA_02.html#24-analisis-de-sentimientos-con-python","title":"2.4 An\u00e1lisis de Sentimientos con Python","text":"<p>El an\u00e1lisis de sentimientos es una aplicaci\u00f3n popular delMachine Learning que permite determinar el tono de un texto, como si es positivo, negativo o neutral. </p> <p>Este tipo de an\u00e1lisis se utiliza en redes sociales, rese\u00f1as de productos y otros contextos donde es \u00fatil entender las emociones detr\u00e1s de las palabras.</p> <p>En este apartado, aprenderemos c\u00f3mo usar la librer\u00eda TextBlob para analizar el sentimiento de una frase escrita por el usuario.</p>"},{"location":"programacionIA_02.html#241-breve-descripcion-del-programa","title":"2.4.1 Breve descripci\u00f3n del programa","text":"<p>El programa que implementaremos pedir\u00e1 al usuario que introduzca una frase. Luego, con la ayuda de TextBlob, calcular\u00e1 dos valores importantes:</p> <ul> <li>Polaridad: determina si el texto es positivo (valores cercanos a 1), negativo (valores cercanos a -1) o neutral (0).</li> <li>Subjetividad: indica si el texto es objetivo (valores cercanos a 0) o subjetivo (valores cercanos a 1).</li> </ul>"},{"location":"programacionIA_02.html#242-codigo-del-programa","title":"2.4.2 C\u00f3digo del programa","text":"<pre><code>from textblob import TextBlob\n\nfrase = input(\"Escribe una frase:\\n\")\n\nresultado = TextBlob(frase)\nprint(\"Polaridad:\", resultado.polarity)\nprint(\"Subjetividad:\", resultado.subjectivity)\n</code></pre>"},{"location":"programacionIA_02.html#243-explicacion-detallada-del-codigo","title":"2.4.3 Explicaci\u00f3n detallada del c\u00f3digo","text":"<ol> <li>Importaci\u00f3n de la librer\u00eda TextBlob<ul> <li>from textblob import TextBlob</li> <li>TextBlob es una librer\u00eda de Python que facilita el procesamiento de texto, como el an\u00e1lisis de sentimientos o la correcci\u00f3n gramatical. Aseg\u00farate de instalarla antes de ejecutar el c\u00f3digo con: pip install textblob</li> </ul> </li> <li>Solicitar una frase al usuario<ul> <li>frase = input(\"Escribe una frase:\\n\")</li> </ul> </li> <li>Crear un objeto TextBlob<ul> <li>resultado = TextBlob(frase)</li> <li>La funci\u00f3n TextBlob analiza autom\u00e1ticamente el texto introducido.</li> </ul> </li> <li>Obtener la polaridad y la subjetividad<ul> <li>resultado.polarity: devuelve un valor entre -1 (muy negativo) y 1 (muy positivo).</li> <li>resultado.subjectivity: devuelve un valor entre 0 (muy objetivo) y 1 (muy subjetivo).</li> </ul> </li> </ol> <p>\ud83d\udd0d Ejercicio:  1. Escribe varias frases de ejemplo y analiza los resultados. 2. Reflexiona sobre las aplicaciones del an\u00e1lisis de sentimientos, como: * \u00bfC\u00f3mo se podr\u00edan usar estos datos en redes sociales? * \u00bfQu\u00e9 tan precisos son los resultados en frases ir\u00f3nicas o ambiguas?</p>"},{"location":"programacionIA_02.html#resumen","title":"RESUMEN","text":"<p>\u2705 El Machine Learning permite a las m\u00e1quinas aprender patrones a partir de datos. \u2705 Existen tres tipos principales: supervisado, no supervisado y por refuerzo. \u2705 Requiere datos limpios, entrenamiento y evaluaci\u00f3n continua.</p>"},{"location":"programacionIA_03.html","title":"3. Deep Learning y Redes Neuronales \u2013 El coraz\u00f3n de la IA moderna","text":"<p>El aprendizaje profundo (deep learning) es una t\u00e9cnica avanzada de aprendizaje autom\u00e1tico (machine learning) que permite a los ordenadores aprender de manera m\u00e1s parecida a como lo hace el cerebro humano. Para lograr esto, se utilizan redes neuronales artificiales, un tipo de modelo matem\u00e1tico inspirado en el funcionamiento de las neuronas en nuestro cerebro.</p> <p>\u00bfC\u00f3mo funcionan las redes neuronales? Las redes neuronales artificiales est\u00e1n formadas por capas de nodos (neuronas artificiales) que procesan la informaci\u00f3n:</p> <p>Capa de entrada: Recibe los datos (por ejemplo, una imagen o un sonido). Capas ocultas: Analizan la informaci\u00f3n y detectan patrones. Capa de salida: Genera el resultado final (por ejemplo, identificar si una imagen muestra un perro o un gato). Cuantas m\u00e1s capas tiene una red neuronal, m\u00e1s profundo es su an\u00e1lisis, lo que permite que el sistema aprenda de manera m\u00e1s precisa.</p> <p>El aprendizaje profundo, o deep learning, es una rama del aprendizaje autom\u00e1tico que permite a los sistemas analizar datos de manera m\u00e1s profunda y detallada para generar resultados m\u00e1s precisos. Para entenderlo mejor, veamos dos ejemplos:</p> <p>Ejemplo 1: Diagn\u00f3stico M\u00e9dico Imaginemos que queremos desarrollar un sistema de autodiagn\u00f3stico de enfermedades. En un modelo b\u00e1sico de aprendizaje autom\u00e1tico (machine learning), primero recopilamos datos importantes de miles de pacientes, como edad, peso y presi\u00f3n sangu\u00ednea. Luego, junto con esos datos, proporcionamos el diagn\u00f3stico final que recibi\u00f3 cada paciente (por ejemplo, resfriado o meningitis). Con esta informaci\u00f3n, el sistema aprende a relacionar los datos de entrada con posibles diagn\u00f3sticos.</p> <p>Pero, \u00bfqu\u00e9 pasar\u00eda si en lugar de introducir manualmente los datos relevantes, el sistema pudiera analizar directamente un informe m\u00e9dico en formato PDF y extraer por s\u00ed mismo la informaci\u00f3n clave para emitir un diagn\u00f3stico? En este caso, el modelo har\u00eda un an\u00e1lisis m\u00e1s profundo de los datos de entrada sin necesidad de una fase previa de selecci\u00f3n manual. Este tipo de modelo pertenece al aprendizaje profundo (deep learning), ya que es capaz de procesar la informaci\u00f3n de manera m\u00e1s avanzada.</p> <p>Ejemplo 2: Clasificaci\u00f3n de Tomates Supongamos que queremos crear un sistema para identificar distintos tipos de tomates. En un modelo de machine learning, har\u00edamos una tabla con caracter\u00edsticas como el color, el tama\u00f1o, la forma y la textura de cada tomate, junto con su categor\u00eda (por ejemplo, tomate canario o tomate pera). Luego, entrenar\u00edamos al sistema para que, cuando introduzcamos las caracter\u00edsticas de un nuevo tomate, pueda clasificarlo correctamente.</p> <p>Sin embargo, con deep learning, en lugar de introducir manualmente estas caracter\u00edsticas, el sistema podr\u00eda simplemente analizar una imagen del tomate y extraer autom\u00e1ticamente sus caracter\u00edsticas (como forma, tama\u00f1o y color) para clasificarlo. Incluso podr\u00eda detectar detalles que nosotros no hab\u00edamos considerado en nuestra tabla.</p> <p>La t\u00e9cnica m\u00e1s habitualmente empleada dentro de la rama del deep learning son las redes neuronales profundas, entendiendo como profundas el hecho de que est\u00e9n compuestas por varias capas, lo que les permitir\u00e1 jerarquizar las caracter\u00edsticas principales de los datos de entrada.</p>"},{"location":"programacion_01.html","title":"1. Primeros pasos con Python","text":"<p>\u00a1Bienvenidos al emocionante mundo de Python! Un lenguaje de programaci\u00f3n que no solo es f\u00e1cil de aprender, sino que tambi\u00e9n es s\u00faper vers\u00e1til. \u00bfListos para empezar a programar? </p>"},{"location":"programacion_01.html#1-que-es-python","title":"1. \u00bfQu\u00e9 es Python?","text":"<p>Imagina un idioma que puedes aprender r\u00e1pidamente y te permite hacer casi de todo: eso es Python. Es uno de los lenguajes de programaci\u00f3n m\u00e1s populares en la actualidad, y por una buena raz\u00f3n: es sencillo pero potente. \u00a1Vamos a ver algunas de las cosas que puedes hacer con \u00e9l!</p> <ul> <li> <p>Desarrollo de Videojuegos: \u00bfTe gustan los videojuegos? \u00a1Con Python puedes crear los tuyos! Bibliotecas como Pygame te permiten dise\u00f1ar gr\u00e1ficos, mover personajes y programar toda la acci\u00f3n. </p> </li> <li> <p>Aplicaciones Web: \u00bfTe gustar\u00eda construir tu propia p\u00e1gina web o una app que todos usen? Frameworks como Django y Flask son herramientas basadas en Python que te ayudar\u00e1n a crear aplicaciones web de manera r\u00e1pida y eficiente. </p> </li> <li> <p>Ciencia de Datos y An\u00e1lisis: \u00bfSab\u00edas que Python es la herramienta favorita de los cient\u00edficos de datos? Con Pandas y Matplotlib puedes analizar monta\u00f1as de datos, hacer gr\u00e1ficos impresionantes y descubrir patrones inesperados.</p> </li> <li> <p>Inteligencia Artificial y Machine Learning: Python tambi\u00e9n es el lenguaje estrella en el mundo de la inteligencia artificial. Usando bibliotecas como TensorFlow y Scikit-Learn, puedes construir modelos que aprenden y hacen predicciones. \u00a1Casi como darle vida a una m\u00e1quina!</p> </li> </ul>"},{"location":"programacion_01.html#2-como-instalarlo","title":"2. \u00bfC\u00f3mo instalarlo?","text":"<p>Ahora que ya sabemos para qu\u00e9 podemos usar Python, \u00a1vamos a instalarlo! Ver\u00e1s que es m\u00e1s f\u00e1cil que instalar la \u00faltima actualizaci\u00f3n de un videojuego.</p> <p>Instalaci\u00f3n en los ordenadores de clase</p> <ol> <li>Enciende el ordenador y accede al sistema operativo Windows.</li> <li>Inicia sesi\u00f3n con tu identidad digital.</li> <li>Busca el icono de la Botiga d'Aplicacions en el escritorio. Si no lo encuentras, usa la barra de b\u00fasqueda.</li> <li>En la Botiga d'Aplicacions, busca Python. \u00a1Lo encontrar\u00e1s f\u00e1cil!</li> <li>Haz clic en Instalar y espera pacientemente (puedes tomarte un respiro, pero no te vayas muy lejos).</li> <li>Cuando todo haya terminado, recibir\u00e1s una notificaci\u00f3n confirmando la instalaci\u00f3n.</li> </ol> <p>Instalaci\u00f3n en casa (para sistemas Windows)</p> <ol> <li>Ve a la p\u00e1gina oficial de Python y descarga la \u00faltima versi\u00f3n.</li> </ol> <ol> <li>Haz clic en Install now, pero OJO: marca la casilla que dice Add python.exe to PATH. Esto es muy importante, porque as\u00ed podr\u00e1s usar Python desde cualquier parte del sistema.</li> </ol> <ol> <li>Cuando la instalaci\u00f3n termine, ver\u00e1s una pantalla de confirmaci\u00f3n (\u00a1y sentir\u00e1s que ya eres casi un hacker!)</li> </ol>"},{"location":"programacion_01.html#3-como-probarlo","title":"3. \u00bfC\u00f3mo probarlo?","text":"<p>Ahora que ya tienes Python instalado, vamos a asegurarnos de que todo est\u00e1 funcionando como debe. Aqu\u00ed te explico c\u00f3mo verificar que Python est\u00e9 bien instalado:</p> <ol> <li>Haz clic en el bot\u00f3n de Inicio (es el logo de Windows, en la esquina inferior izquierda de la pantalla).</li> <li>Escribe cmd o S\u00edmbolo del sistema en la barra de b\u00fasqueda. </li> <li>Haz clic en Abrir para lanzar el terminal o pulsa Enter (la pantalla negra da algo de respeto, pero es s\u00faper \u00fatil)</li> </ol> <ol> <li> <p>Una vez dentro, escribe uno de estos comandos: </p> <ul> <li>python -V       </li> <li>python --version</li> </ul> </li> <li> <p>Si todo ha ido bien, ver\u00e1s un n\u00famero en pantalla que indica la versi\u00f3n de Python que acabas de instalar. </p> </li> </ol> <p>\u00a1Felicidades, ya tienes Python listo para usar!</p>"},{"location":"programacion_01.html#4-como-programar-en-python","title":"4. \u00bfC\u00f3mo programar en Python?","text":"<p>\u00a1Ahora que ya tenemos Python instalado, es hora de empezar a escribir nuestras primeras l\u00edneas de c\u00f3digo! Pero para hacerlo de forma c\u00f3moda y eficiente, necesitamos un IDE (Entorno de Desarrollo Integrado), que es b\u00e1sicamente un programa que hace que programar sea mucho m\u00e1s f\u00e1cil y organizado.</p> <p>Para nuestro caso, vamos a usar Visual Studio Code (VSCode, para los amigos \ud83d\ude0e), y lo elegimos porque es:</p> <ul> <li>Gratuito (\u00a1y a qui\u00e9n no le gusta lo gratis!).</li> <li>Open Source (el c\u00f3digo est\u00e1 abierto para que cualquiera lo vea y lo mejore).</li> <li>Superpersonalizable (puedes a\u00f1adirle un mont\u00f3n de extensiones para adaptarlo a lo que necesites).</li> </ul> <p>Instalaci\u00f3n en los ordenadores de clase</p> <ol> <li>Enciende el ordenador y accede al sistema operativo Windows.</li> <li>Inicia sesi\u00f3n con tu identidad digital.</li> <li>Busca el icono de la Botiga d'Aplicacions en el escritorio. Si no lo encuentras, \u00a1tranquilidad! Usa la barra de b\u00fasqueda.</li> <li>Dentro de la Botiga d'Aplicacions, busca Visual Studio Code (no te confundas con otros, este es el bueno). </li> <li>Haz clic en Instalar y rel\u00e1jate un momento mientras se descarga.</li> <li>Cuando todo haya terminado, recibir\u00e1s una notificaci\u00f3n de que ya est\u00e1 listo para usarse. </li> </ol> <p>Instalaci\u00f3n en casa (para sistemas Windows) </p> <p>Si est\u00e1s en casa, instalar VSCode tambi\u00e9n es muy sencillo. Solo sigue estos pasos:</p> <ol> <li>Ve a la web oficial de Visual Studio Code y descarga la \u00faltima versi\u00f3n (\u00a1que siempre es la mejor!).</li> </ol> <ol> <li>Abre el archivo descargado y sigue los pasos del instalador. En unos minutos tendr\u00e1s todo listo para empezar a programar.</li> </ol> <p>Configurando Visual Studio Code para Python</p> <p>Aunque ya tengas Python y VSCode listos, \u00a1a\u00fan nos falta un detalle!. Para que programar sea m\u00e1s sencillo y c\u00f3modo, necesitamos instalar la extensi\u00f3n de Python en nuestro IDE. Con esta maravilla, podr\u00e1s escribir, ejecutar y depurar tus programas sin sudar la gota gorda.</p> <p>Para instalarla, sigue este enlace \u00a1Es tan f\u00e1cil como hacer clic en Install!</p> <p>Durante el proceso de instalaci\u00f3n, VSCode te pedir\u00e1 permiso para abrirse. Aparecer\u00e1 una pesta\u00f1a con toda la info sobre la extensi\u00f3n. Lo \u00fanico que tienes que hacer es volver a pulsar Install, y la instalaci\u00f3n comenzar\u00e1 autom\u00e1ticamente. </p> <p>\u00a1Y listo! Ahora tu Visual Studio Code estar\u00e1 preparado para trabajar con Python como un campe\u00f3n.</p> <p>\u00bfY si quiero probar algo r\u00e1pido sin instalar nada?</p> <p>No siempre tienes que instalar un programa completo para probar un par de l\u00edneas de c\u00f3digo. Si solo quieres hacer una prueba r\u00e1pida, \u00a1existen opciones online! </p> <p>Uno de los mejores editores en l\u00ednea para Python es Programiz. Solo tienes que abrirlo, escribir tu c\u00f3digo, y hacer clic en ejecutar. \u00a1Es como programar en cualquier parte, sin complicaciones!</p>"},{"location":"programacion_01.html#5-nuestro-primer-programa","title":"5. Nuestro primer programa","text":"<p>\u00a1Ha llegado el momento de la verdad! Ahora que ya tenemos todo configurado, es hora de ponernos manos a la obra y escribir nuestro primer programa en Python \ud83d\ude80.</p> <p>Lo primero que necesitas es crear una carpeta donde vas a guardar todos tus archivos Python. Este ser\u00e1 tu espacio de trabajo, \u00a1el lugar donde ocurrir\u00e1 toda la magia! \u2728</p> <p>Una vez que tengas esa carpeta lista, abre VSCode y sigue estos pasos s\u00faper sencillos: 1. Ve al men\u00fa Archivo &gt; Abrir carpeta o, si tienes tu VSCode en ingl\u00e9s, File &gt; Open Folder. 2. Selecciona la carpeta que acabas de crear. 3. \u00a1Y voil\u00e1! Ahora esa carpeta aparecer\u00e1 en el panel izquierdo del explorador de archivos de VSCode. Desde all\u00ed, puedes empezar a crear todos los archivos y carpetas que necesites. \u00a1Es como tu cuaderno, pero lleno de c\u00f3digo! 4. Crea un archivo Python llamado, por ejemplo, <code>holamundo.py</code>. </p> <ol> <li>Escribe este c\u00f3digo dentro del archivo reci\u00e9n creado: <code>print(\"Hola\")</code> y guarda el archivo.</li> </ol> <ol> <li>Ahora, \u00a1vamos a ejecutarlo y ver el resultado en acci\u00f3n!. Haz clic derecho sobre tu c\u00f3digo y elige Run Python &gt; Run Python File in Terminal. \u00a1Y listo! \u00a1Tu pantalla te saludar\u00e1 con un gran \"Hola\"! \ud83c\udf89</li> </ol> <p>Si cometes un error, recibir\u00e1s un mensaje de error indic\u00e1ndote lo qu\u00e9 sali\u00f3 mal !Pru\u00e9balo! Borra la \u00faltima comilla <code>\"</code> o el \u00faltimo par\u00e9ntesis <code>)</code> (o ambos) y comprueba lo que pasa. Despu\u00e9s vuelve a escribir la comilla o el par\u00e9ntesis, y haz clic en Run para asegurarte de que el proyecto vuelve a funcionar correctamente.</p>"},{"location":"programacion_01.html#6-poner-comentarios","title":"6. Poner comentarios","text":"<p>Los comentarios son notas aclaratorias o explicativas que escribes en el c\u00f3digo pero que Python ignora cuando ejecuta el programa. Son muy \u00fatiles porque te ayudan a organizar tu c\u00f3digo, hacer anotaciones para ti mismo o explicar qu\u00e9 hace una parte del programa. Es como cuando en clase tomas notas en los m\u00e1rgenes de tus apuntes, \u00a1pero en c\u00f3digo!</p> <p>Para crear un comentario de una sola l\u00ednea en Python, simplemente utiliza el s\u00edmbolo <code>#</code>. Todo lo que escribas despu\u00e9s de # ser\u00e1 ignorado.</p> <pre><code># Este es un comentario, Python lo ignorar\u00e1 al ejecutar el programa\nprint(\"Hola\")  # Esto imprimir\u00e1 el saludo \"Hola\" en la pantalla\n</code></pre> <pre><code># Puedes hacer operaciones matem\u00e1ticas\nprint(10 + 5)  # Esto imprimir\u00e1 15\n</code></pre> <p>En estos ejemplos, los comentarios <code># Este es un comentario</code> y <code># Puedes hacer operaciones matem\u00e1ticas</code> no afecta al funcionamiento del programa. Lo mismo ocurre con el comentario a\u00f1adido al final de las l\u00edneas donde usamos <code>print()</code>.</p>"},{"location":"programacion_01.html#7-es-tu-turno","title":"7. Es tu turno","text":"<p>\u00a1Es tu turno de modificar el c\u00f3digo y experimentar con <code>print()</code>! Aqu\u00ed tienes algunas ideas para empezar:</p> <ol> <li>A\u00f1adir m\u00e1s texto: modifica el c\u00f3digo para que imprima varias frases seguidas.</li> <li>Imprimir n\u00fameros: Python tambi\u00e9n permite imprimir n\u00fameros. Sin embargo, hay una diferencia importante: los n\u00fameros no necesitan comillas. Prueba a a\u00f1adir l\u00edneas que muestren algunos n\u00fameros o hagan operaciones matem\u00e1ticas, como 10 + 5. Si pones comillas, Python tratar\u00e1 el n\u00famero como texto, pero sin comillas lo ver\u00e1 como un valor num\u00e9rico. \u00a1Haz la prueba y ver\u00e1s la diferencia!   </li> <li>Habla sobre ti: escribe un programa que cuente algo sobre ti. Combina texto y n\u00fameros; por ejemplo, usa una operaci\u00f3n matem\u00e1tica para calcular tu edad: 2024 - tu_a\u00f1o_nacimiento. \u00a1Python te ayudar\u00e1 a sacar las cuentas!</li> </ol>"},{"location":"programacion_02.html","title":"2. Imprime, calcula y pregunta","text":"<p>En esta sesi\u00f3n vamos a aprender m\u00e1s detalles sobre el comando <code>print()</code>, exploraremos el arte ASCII, trabajaremos con operadores matem\u00e1ticos y, lo m\u00e1s importante, \u00a1aprenderemos a interactuar con el usuario con <code>input()</code>! </p>"},{"location":"programacion_02.html#1-mas-sobre-print","title":"1. M\u00e1s sobre print()","text":"<p>Ya sabes lo b\u00e1sico de <code>print()</code>, pero ahora vamos a ver algunos detalles importantes que te ser\u00e1n \u00fatiles en situaciones m\u00e1s complejas, como incluir ap\u00f3strofes, comillas y combinar diferentes mensajes en una sola l\u00ednea.</p>"},{"location":"programacion_02.html#11-comillas-simples-vs-comillas-dobles","title":"1.1 Comillas simples vs comillas dobles","text":"<p>Python te permite usar tanto comillas simples (' ') como comillas dobles (\" \"), y aunque funcionan de forma similar, hay algunos detalles importantes que debes conocer.</p> <ul> <li> <p>Ap\u00f3strofes en el texto: si el texto contiene un ap\u00f3strofe ('), y est\u00e1s usando comillas simples, Python podr\u00eda confundirse. En ese caso, usa comillas dobles:</p> <pre><code>print('I'm learning Python')    # \u00a1Error! Python se confunde con el ap\u00f3strofe\nprint(\"I'm learning Python\")    # OK, las comillas dobles nos salvan\n</code></pre> </li> <li> <p>Comillas dobles dentro del texto: si quieres incluir comillas dobles en el texto, usa comillas simples para delimitarlo:</p> <pre><code>print('May dice que \"Python es genial\"')    # OK\nprint(\"May dice que \"Python es genial\"\")    # Error\n</code></pre> </li> <li> <p>Caracteres de escape: si necesitas usar el mismo tipo de comillas tanto dentro como fuera del texto (por ejemplo, comillas dobles dentro de un texto delimitado por comillas dobles), puedes usar el car\u00e1cter de escape (<code>\\</code>) para decirle a Python que ignore la comilla y la trate como parte del texto:</p> <pre><code>print(\"May dice que \\\"Python es genial\\\"\")  # Comillas dobles dentro del texto y delimitando la cadena, sin dramas\n</code></pre> </li> </ul>"},{"location":"programacion_02.html#12-combinando-mensajes-en-print","title":"1.2 Combinando mensajes en <code>print()</code>","text":"<p>Cuando quieras mostrar m\u00e1s de un elemento en un solo <code>`print()</code>, tienes dos formas de hacerlo: usando comas o el operador <code>+</code>. Vamos a ver c\u00f3mo funciona cada una.</p> <ol> <li> <p>Usando comas: es la forma m\u00e1s sencilla de combinar varios elementos en un <code>print()</code>. Cuando lo haces as\u00ed, Python autom\u00e1ticamente a\u00f1ade un espacio entre cada elemento. Puedes combinar textos (cadenas de caracteres), n\u00fameros y variables sin ning\u00fan problema.</p> <pre><code>nombre = \"May\"\nedad = 45\nprint(\"Hola,\", nombre, \". Tienes\", edad, \"a\u00f1os.\")\n</code></pre> <p>Observa que Python ha puesto espacios entre los elementos autom\u00e1ticamente, sin que tengas que preocuparte por eso.</p> </li> <li> <p>Usando el operador <code>+</code>: es otra manera de combinar textos en <code>print()</code>. Aqu\u00ed es importante destacar que solo funciona con cadenas de texto, es decir, todos los elementos que quieras combinar deben ser texto (cadenas). Si est\u00e1s trabajando con n\u00fameros o variables de otro tipo, deber\u00e1s convertirlos a texto con la funci\u00f3n <code>str()</code> (pero no te preocupes, esa parte la veremos m\u00e1s adelante).</p> <pre><code>nombre = \"May\"\nprint(\"Hola, \" + nombre + \". \u00a1Qu\u00e9 alegr\u00eda verte!\")\n</code></pre> <p>Con el operador <code>+</code>, no se a\u00f1aden espacios autom\u00e1ticamente, por lo que debes asegurarte de incluirlos en los lugares correctos dentro de las cadenas.</p> </li> </ol>"},{"location":"programacion_02.html#2-arte-ascii","title":"2. Arte ASCII","text":"<p>Vamos a ponernos creativos. El arte ASCII es una forma de hacer dibujos usando solo caracteres. No es exactamente como dibujar con un l\u00e1piz, pero te sorprender\u00eda lo que se puede lograr. </p> <p>Vamos a empezar con algo b\u00e1sico: un perro.</p> <pre><code>print(\"o----'\")\nprint(\" ||||\")\n</code></pre> <p>Ojo, si usas comillas simples en la primera l\u00ednea, Python podr\u00eda confundirse con el ap\u00f3strofe. Recuerda las reglas que acabamos de aprender.</p> <p>Multil\u00ednea con comillas triples</p> <p>Si quieres hacer algo m\u00e1s grande (\u00a1o m\u00e1s art\u00edstico!), puedes usar comillas triples (''' o \"\"\") para escribir varias l\u00edneas en un solo <code>print()</code>.</p> <pre><code>print('''\n /\\_/\\\n(o . o)\n &gt; ^ &lt;\n''')\n</code></pre> <p>\u00a1Felicidades, acabas de crear un gato con Python! \ud83d\udc31</p>"},{"location":"programacion_02.html#3-operaciones-matematicas","title":"3. Operaciones matem\u00e1ticas","text":"<p>Python no solo sirve para hacer arte ASCII o mostrar mensajes; tambi\u00e9n es una calculadora superpoderosa. Vamos a repasar algunas operaciones matem\u00e1ticas b\u00e1sicas:</p> <ul> <li>Operaciones b\u00e1sicas:<ul> <li>Suma: +</li> <li>Resta: -</li> <li>Multiplicaci\u00f3n: *</li> <li>Divisi\u00f3n: / (divisi\u00f3n real) y // (divisi\u00f3n entera)</li> <li>Exponentes: ** (por ejemplo, 2 ** 3 es 2 al cubo, o 8)</li> <li>M\u00f3dulo (resto de una divisi\u00f3n): % (ideal para saber si un n\u00famero es par o impar)</li> </ul> </li> </ul> <p>Prueba esto:</p> <pre><code>print(2 + 3 * 4)  # Resultado: 14, porque multiplica antes de sumar\n</code></pre> <p>Precedencia de operadores</p> <p>Python sigue reglas de precedencia para las operaciones, lo que significa que algunas operaciones se hacen antes que otras. </p> <p>La regla general es seguir este orden:  * Par\u00e9ntesis: todo lo que est\u00e9 dentro de par\u00e9ntesis se eval\u00faa primero. * Exponentes: luego vienen los exponentes (por ejemplo, 2 ** 3). * Multiplicaci\u00f3n, Divisi\u00f3n, y M\u00f3dulo: se resuelven de izquierda a derecha. * Suma y Resta: se eval\u00faan de izquierda a derecha.</p> <p>Si quieres cambiar el orden de las operaciones, usa par\u00e9ntesis.</p> <pre><code>print(2 + 3 * 4)  # Resultado: 14 (primero se multiplica 3 * 4, luego se suma 2)\nprint((2 + 3) * 4)  # Resultado: 20 (los par\u00e9ntesis cambian el orden de evaluaci\u00f3n)\n</code></pre> <p>\u00a1Experimenta con tus propios c\u00e1lculos y ver\u00e1s c\u00f3mo cambia el resultado dependiendo del orden!</p> <p>Desaf\u00edo: calcular con texto</p> <p>Ahora que dominas las operaciones matem\u00e1ticas, te lanzo un reto un poco diferente. \u00a1\u00bfSab\u00edas que Python tambi\u00e9n puede hacer \"c\u00e1lculos\" con texto?! Puedes usar el operador <code>+</code> para concatenar cadenas (juntar textos), y el operador <code>*</code> para repetir cadenas.</p> <p>Pruena el siguiente ejemplo: </p> <pre><code>print('ja ' * 4)\nprint('ba' + 'na' * 2)\nprint('\u00a1 * 5' + 'Hola' + '!*5')\n</code></pre> <p>\u00bfEres capaz de inventarte palabras? \u00a1Puedes incluso crear tus propios patrones!</p> <pre><code>print('/\\ ' * 10)\nprint('  \\/' * 10)\n</code></pre>"},{"location":"programacion_02.html#4-uso-de-variables","title":"4. Uso de variables","text":"<p>En Python, una variable es como una \"caja\" donde puedes guardar un valor, y luego usar ese valor cuando lo necesites.</p> <ul> <li> <p>Declarar una variable: para crear una variable, simplemente le das un nombre y le asignas un valor con el signo igual (=). Por ejemplo:</p> <pre><code>nombre = \"May\"\nedad = 45\n</code></pre> </li> <li> <p>Usar de una variable: despu\u00e9s de asignar un valor a una variable, puedes usarla en cualquier parte de tu programa. Prueba el siguiente c\u00f3digo y observa el resultado obtenido:</p> <pre><code>nombre = \"May\"\nprint(\"Hola, \" + nombre) \n</code></pre> </li> <li> <p>Cambiar el valor de una variable: las variables pueden cambiar de valor en cualquier momento. Puedes hacer algo como esto:</p> <pre><code>edad = 45\nedad = edad + 1       # Actualiza la variable edad sum\u00e1ndole 1.    \n</code></pre> </li> <li> <p>Sobre los nombres de las variables: a la hora de asignar un nombre a una variable, hay que seguir estas reglas:</p> <ul> <li> <p>Caracteres permitidos:</p> <ul> <li>Letras (may\u00fasculas y min\u00fasculas)</li> <li>D\u00edgitos</li> <li>Subrayado </li> <li>No pueden empezar por un d\u00edgito</li> </ul> </li> <li> <p>Nombres compuestos: puedes separar las palabras usando:</p> <ul> <li>Subrayado \u2192 estilo m\u00e1s com\u00fan en Python.</li> <li>camelCase \u2192 primera palabra en min\u00fasculas y las siguientes con may\u00fascula.</li> </ul> </li> <li> <p>Diferencia entre may\u00fasculas y min\u00fasculas: Python distingue entre may\u00fasculas y min\u00fasculas. Por ejemplo, las variables <code>apellido</code>, <code>Apellido</code> y <code>APELLIDO</code> se consideran diferentes entre s\u00ed.</p> </li> </ul> <pre><code># Ejemplos de nombres v\u00e1lidos\nnumero = 12\nnumero_cuenta_bancaria = 'ES1100001111222233334444'\nloginUsuario = 'may'\nnumero2 = 22\n\n# Ejemplos de nombres incorrectos\n2numero = 12 \nnumero-cuenta = 'ES1100001111222233334444' \nlogin usuario = 'may'  \nprint = 3\n</code></pre> </li> </ul>"},{"location":"programacion_02.html#6-interaccion-con-el-usuario-input","title":"6. Interacci\u00f3n con el usuario: input()","text":"<p>Hasta ahora, t\u00fa eras quien le daba las \u00f3rdenes a Python, pero \u00bfqu\u00e9 tal si hacemos que el programa pregunte algo al usuario? Aqu\u00ed entra en juego <code>input()</code>. </p> <p>B\u00e1sicamente, lo que hace es esperar pacientemente a que el usuario escriba algo y presione Enter. Una vez que lo hace, el contenido que ha escrito se captura como texto (\u00a1siempre como texto!).</p> <ul> <li> <p>Uso b\u00e1sico de input():</p> <pre><code>nombre = input(\"\u00bfC\u00f3mo te llamas? \")\nprint(\"\u00a1Hola, \" + nombre + \"!\")\n</code></pre> </li> </ul> <p>\u00a1Ahora tu programa puede saludar a cualquiera que lo use! \ud83d\ude04</p>"},{"location":"programacion_02.html#7-es-tu-turno","title":"7. Es tu turno","text":"<p>Ahora que ya sabes m\u00e1s sobre <code>print()</code>, arte ASCII, operaciones matem\u00e1ticas e interacci\u00f3n con el usuario, \u00a1es tu momento de crear! Aqu\u00ed tienes algunas ideas para que experimentes:</p> <ul> <li>Crea tu propio arte ASCII: dise\u00f1a una figura usando caracteres ASCII. \u00bfPodr\u00edas hacer un coche, un cohete o un animal? \u00a1Imaginaci\u00f3n al poder!</li> <li>Un programa sobre ti: haz que tu programa le pregunte al usuario algunos datos personales, como su nombre, direcci\u00f3n y n\u00famero de tel\u00e9fono, y luego muestre toda esa informaci\u00f3n en pantalla.</li> <li>Dime tu animal favorito: escribe un programa que le pregunte al usuario cu\u00e1l es su animal favorito. Luego, responde con un mensaje personalizado.    Por ejemplo, si el usuario te ha contestado que su animal favorito son los gatos, puedes mostrar un mensaje similar a este: \"Me gustan los gatos, pero mi animal favorito es el perro\" </li> </ul>"},{"location":"programacion_03.html","title":"3. Tipos de Datos, Conversi\u00f3n y Formato","text":"<p>En esta secci\u00f3n vamos a conocer algunos de los tipos de datos que existen en Python, desde texto hasta n\u00fameros y valores l\u00f3gicos. Tambi\u00e9n aprenderemos a convertir entre estos tipos de datos cuando lo necesitemos. Al finalizar, ser\u00e1s capaz de escribir c\u00f3digo m\u00e1s flexible y adaptado a distintas situaciones en el mundo real de la programaci\u00f3n. \u00a1Vamos a ello!</p>"},{"location":"programacion_03.html#1-tipos-de-datos-basicos","title":"1. Tipos de datos b\u00e1sicos","text":"<p>En Python, hay diferentes tipos de datos que puedes usar seg\u00fan lo que necesites almacenar. Los m\u00e1s comunes son:</p> <ul> <li> <p>Cadenas de texto (strings): se usan para almacenar palabras o frases. Se definen con comillas simples (' ') o dobles (\" \").</p> <ul> <li>Ejemplo: \"Hola\", 'Python es genial'</li> </ul> </li> <li> <p>N\u00fameros enteros (int): Son n\u00fameros sin decimales, como edades, cantidades o a\u00f1os.</p> <ul> <li>Ejemplo: edad = 17</li> </ul> </li> <li> <p>N\u00fameros decimales (float): se usan cuando necesitas precisi\u00f3n. Por ejemplo,  para representar medidas o valores que incluyen decimales.</p> <ul> <li>Ejemplo: altura = 1.75</li> </ul> </li> <li> <p>Valores booleanos (bool): solo pueden ser <code>True</code> (verdadero) o <code>False</code> (falso). Estos son muy \u00fatiles para hacer decisiones en los programas.</p> <ul> <li>Ejemplo: es_mayor_de_edad = True</li> </ul> </li> </ul> <p>Cada tipo de dato tiene su funci\u00f3n, y Python los maneja de manera distinta seg\u00fan lo que necesites hacer. Saber qu\u00e9 tipo de dato est\u00e1s utilizando es importante para evitar errores y asegurarte de que tu programa funcione correctamente. </p>"},{"location":"programacion_03.html#2-usando-f-string","title":"2. Usando f-string","text":"<p>El nombre \"f-string\" viene de \"formatted string\" (cadena formateada), y su principal ventaja es que te permite combinar texto y variables de forma clara y legible.</p> <p>Para crear una f-string, simplemente antepon una f al texto que quieras mostrar. Luego, inserta donde lo necesites (pero siempre dentro de la cadena de texto) cualquier variable o expresi\u00f3n que quieras que se incluya o eval\u00fae dentro de unas llaves {}. Python reemplaza las llaves {} por el valor de las variables o expresiones que se encuentran dentro, generando un texto formateado de forma autom\u00e1tica.</p> <pre><code>nombre = \"May\"\nedad = 45\nprint(f\"Hola, {nombre}. Tienes {edad} a\u00f1os.\")\n</code></pre> <p>Puedes usar las f-strings para para formatear n\u00fameros, como mostrar decimales con un n\u00famero determinado de decimales.</p> <pre><code>pi = 3.1415926535\nprint(f\"El valor de pi es {pi:.2f}.\")\n</code></pre> <p>Observa que .2f indica que quieres mostrar el valor de pi con 2 decimales.</p>"},{"location":"programacion_03.html#3-funciones-de-conversion-de-tipos-de-datos","title":"3. Funciones de conversi\u00f3n de tipos de datos","text":"<p>A veces, necesitar\u00e1s convertir un tipo de dato en otro para realizar ciertas operaciones o para que el programa funcione correctamente. Por ejemplo, convertir un n\u00famero en texto o al rev\u00e9s. Python tiene funciones integradas que facilitan estas conversiones: </p> <ul> <li> <p>str(): convertir a cadena de texto</p> <p>La funci\u00f3n <code>str()</code> convierte convierte cualquier dato (n\u00famero, booleano, etc.) en una cadena de texto. Se suele utilizar para combinar texto con n\u00fameros en una operaci\u00f3n de <code>print()</code>.</p> <p>Ejemplo que da error</p> <pre><code>edad = 17\nprint(\"Tengo \" + edad + \" a\u00f1os.\")   # Esto dar\u00e1 error, porque Python no sabe c\u00f3mo unir un texto con un entero\n</code></pre> <p>Ejemplo correcto</p> <pre><code>edad = 17\nprint(\"Tengo \" + str(edad) + \" a\u00f1os.\")  # OK, primero convierte el n\u00famero en texto para imprimirlo\n</code></pre> </li> <li> <p>int(): convertir a n\u00famero entero </p> <p>La funci\u00f3n <code>int()</code> convierte texto o n\u00fameros decimales en n\u00fameros enteros. Pero cuidado, si intentas convertir algo que no es un n\u00famero en un entero, Python dar\u00e1 un error. Por ejemplo, <code>int(\"Hola\")</code> dar\u00e1 un error. </p> <p>Se suele utilizar cuando pedimos informaci\u00f3n al usuario de tipo num\u00e9rico (edad, a\u00f1o, cantidad, etc) porque todo lo que el usuario introdce con <code>input()</code> se almacena como texto, sin importar si introduce n\u00fameros. Si intentas hacer operaciones matem\u00e1ticas con ese texto, Python no sabr\u00e1 c\u00f3mo interpretarlo y lanzar\u00e1 un error.</p> <p>Ejemplo que da error</p> <p><pre><code>edad = input(\"\u00bfCu\u00e1ntos a\u00f1os tienes? \")\nprint(\"El a\u00f1o que viene tendr\u00e1s \" + (edad + 1) + \" a\u00f1os.\")      # Esto dar\u00e1 error, porque `edad` es texto.\n</code></pre> Ejemplo correcto</p> <pre><code>edad = int(input(\"\u00bfCu\u00e1ntos a\u00f1os tienes? \"))\nprint(\"El a\u00f1o que viene tendr\u00e1s \" + str(edad + 1) + \" a\u00f1os.\")   # OK\n</code></pre> <p>En el ejemplo correcto, observa que:  * Primero se convierte el texto introducido por el usuario a un n\u00famero entero con <code>int()</code>, lo que permite realizar operaciones matem\u00e1ticas. * Luego se convierte el resultado de esa operaci\u00f3n en texto con <code>str()</code> para poder combinarlo con otros fragmentos de texto en el mensaje final.</p> </li> <li> <p>float(): convertir a n\u00famero decimal </p> <p>La funci\u00f3n <code>float()</code> convierte texto o enteros en n\u00fameros con decimales. Muy \u00fatil para trabajar con medidas o c\u00e1lculos cient\u00edficos.</p> <pre><code>altura = float(input(\"\u00bfCu\u00e1l es tu altura en metros? \"))\nprint(\"Tu altura es \" + str(altura) + \" metros.\")\n</code></pre> <p>Con esta conversi\u00f3n, se realizan c\u00e1lculos con decimales sin perder precisi\u00f3n.</p> </li> </ul>"},{"location":"programacion_03.html#4-es-tu-turno","title":"4. Es tu turno","text":"<p>\u00a1Ahora es tu momento de aplicar lo que has aprendido! Aqu\u00ed tienes algunos ejercicios:</p> <ul> <li>1. Calculadora personalizada: crea un programa que pida al usuario dos n\u00fameros y realice varias operaciones matem\u00e1ticas con ellos (suma, resta, multiplicaci\u00f3n y divisi\u00f3n).</li> <li>2. Conversi\u00f3n de temperaturas: crea un programa que convierta una temperatura en grados Celsius introducida por el usuario a grados Fahrenheit usando la siguiente f\u00f3rmula: Fahrenheit = Celsius * 9/5  + 32</li> <li>3. C\u00e1lculo del \u00e1rea de un rect\u00e1ngulo: pide al usuario que introduzca el ancho y el alto de un rect\u00e1ngulo, y calcula el \u00e1rea del rect\u00e1ngulo.</li> <li>4. Concatenaci\u00f3n de nombres: pide al usuario que introduzca su nombre y su apellido por separado. Luego, combina ambos en una \u00fanica cadena que muestre el nombre completo. </li> <li>5. Repetici\u00f3n de texto: pide al usuario que escriba una palabra y un n\u00famero. Muestra la palabra repetida el n\u00famero de veces que el usuario haya indicado.</li> <li>6. C\u00e1lculo de la media: crea un programa que le pida al usuario 4 n\u00fameros enteros y calcule su media (real). La media debe mostrarse en pantalla con 3 cifras decimales.</li> </ul>"},{"location":"programacion_04.html","title":"4. Otros operadores y estructuras selectivas","text":"<p>Con las estructuras de control podr\u00e1s tomar decisiones dentro del c\u00f3digo, permitiendo que tus programas sigan diferentes caminos dependiendo de las condiciones que se cumplan. En esta unidad, aprender\u00e1s c\u00f3mo usar operadores relacionales y l\u00f3gicos para comparar valores, y exploraremos las estructuras selectivas if, if-else, y if-elif-else para crear programas que reaccionen de manera inteligente a diferentes situaciones.</p>"},{"location":"programacion_04.html#1-operadores-relacionales","title":"1. Operadores relacionales","text":"<p>A veces, necesitar\u00e1s comparar dos elementos, por ejemplo, para saber si un n\u00famero es mayor que otro o si dos valores son iguales. Para estas situaciones, Python nos ofrece los operadores relacionales, que siempre te devolver\u00e1n un resultado booleano (<code>True</code> o <code>False</code>), dependiendo de si la comparaci\u00f3n se cumple.</p> <p>Aqu\u00ed tienes los operadores relacionales m\u00e1s comunes:</p> <ul> <li>==: igual a.</li> <li>!=:  distinto de.</li> <li>&lt;: menor que.</li> <li>&lt;=: menor o igual que.</li> <li>&gt;: mayor que.</li> <li>&gt;=: mayor o igual que.</li> </ul> <pre><code>print(5 == 5)  # True\nprint(10 != 5)  # True\nprint(3 &lt; 7)  # True\nprint(8 &gt;= 8)  # True\nprint( 2 &gt; 10) # False\n</code></pre>"},{"location":"programacion_04.html#2-operadores-logicos","title":"2. Operadores l\u00f3gicos","text":"<p>Los operadores l\u00f3gicos son muy \u00fatiles cuando necesitas comprobar varias condiciones a la vez. En Python, los principales operadores l\u00f3gicos son:</p> <ul> <li>and (Y l\u00f3gica): devuelve <code>True</code> solo si todas las condiciones son verdaderas. </li> <li>or (O l\u00f3gica): devuelve <code>True</code> si al menos una de las condiciones es verdadera. </li> <li>not (Negaci\u00f3n l\u00f3gica): invierte el valor de la condici\u00f3n (si es <code>True</code>, se convierte en <code>False</code> y viceversa). </li> </ul> <pre><code>print(3 &gt; 2 and 5 &gt; 1)  # True, ambas condiciones se cumplen\nprint(3 &gt; 2 and 5 &lt; 1)  # False, solo una condici\u00f3n es verdadera\nprint(3 &gt; 2 or 5 &lt; 1)  # True, al menos una de las condiciones es verdadera\nprint(not 3 &gt; 2)  # False, porque 3 &gt; 2 es True y not invierte el resultado\n</code></pre>"},{"location":"programacion_04.html#3-estructuras-selectivas-if-ifelse-ifelifelse","title":"3. Estructuras selectivas if, if..else, if..elif..else","text":"<p>Con la ayuda de los operadores relacionales y l\u00f3gicos puedes tomar decisiones dentro de tu c\u00f3digo con las estructuras selectivas. Estas permiten ejecutar bloques de c\u00f3digo dependiendo de si las condiciones son verdaderas o falsas.</p> <ul> <li> <p>Estructura b\u00e1sica: if</p> <p>La estructura <code>if</code> eval\u00faa una condici\u00f3n, y si esta es verdadera, ejecuta el bloque de c\u00f3digo que le sigue. Si la condici\u00f3n es falsa, simplemente salta ese bloque. Es muy importante tabular las instrucciones dentro del bloque <code>if</code> (usualmente con 4 espacios o una tabulaci\u00f3n), ya que Python usa la indentaci\u00f3n para identificar qu\u00e9 c\u00f3digo pertenece a la estructura. Adem\u00e1s, siempre debes terminar la l\u00ednea de la condici\u00f3n con dos puntos (:).</p> <p>Por ejemplo:</p> <pre><code>numero = int(input(\"Escribe un n\u00famero positivo:\"))\nif numero &gt; 0:\n    numero = numero + 1\n    print (\"El siguiente n\u00famero es\", numero)\nprint (\"Fin del programa\")\n</code></pre> <p>Aqu\u00ed, si <code>numero &gt; 0</code> es verdadero, el n\u00famero se incrementar\u00e1 y se imprimir\u00e1 el mensaje. Si no se cumple, el programa simplemente continuar\u00e1 con el resto del c\u00f3digo.</p> </li> <li> <p>Distinguiendo entre dos caminos: if .. else</p> <p>Cuando quieres manejar dos posibles resultados, puedes usar la estructura <code>if-else</code>. Esta te permite ejecutar un bloque de c\u00f3digo si la condici\u00f3n es verdadera, y otro bloque si la condici\u00f3n es falsa. Al igual que con el <code>if</code>, el bloque asociado al <code>else</code> tambi\u00e9n debe estar tabulado correctamente, y no olvides los dos puntos (:) en ambas l\u00edneas.</p> <pre><code>numero = int(input(\"Escribe un n\u00famero positivo:\"))\nif numero &gt; 0:\n    numero = numero + 1\n    print (\"El siguiente n\u00famero es\", numero)\nelse:\n    print (\"El n\u00famero no es positivo\")\nprint (\"Fin del programa\")\n</code></pre> <p>Si <code>numero &gt; 0</code> es verdadero, se ejecutar\u00e1 el c\u00f3digo dentro del <code>if</code>. Si no, se ejecutar\u00e1 el bloque dentro del <code>else</code>.</p> </li> <li> <p>Varias condiciones a evaluar: if .. elif ..else</p> <p>Si necesitamos tener m\u00e1s de dos caminos diferentes, podemos anidar estructuras <code>if..else</code> unas dentro de otras. En este caso, si la primera condici\u00f3n no se cumple, el programa revisar\u00e1 la siguiente condici\u00f3n dentro del bloque <code>else</code>. Python ejecutar\u00e1 el bloque de c\u00f3digo correspondiente a la primera condici\u00f3n que sea verdadera.</p> <pre><code>numero = int(input(\"Escribe un n\u00famero positivo:\"))\nif numero &gt; 0:\n    numero = numero + 1\n    print (\"El siguiente n\u00famero es\", numero)\nelse:\n    if numero &lt; -10:\n        print (\"El n\u00famero es demasiado bajo\")\n    else:\n        print (\"El n\u00famero no es positivo\")\nprint (\"Fin del programa\")    \n</code></pre> <p>\u2026 pero, en lugar de anidar estas estructuras, tambi\u00e9n podemos utilizar la cl\u00e1usula <code>if..elif</code> para especificar m\u00e1s de un bloque de condiciones. Podemos enlazar tantas cl\u00e1sulas <code>elif</code> como necesitemos, y tambi\u00e9n concluir con una cl\u00e1usula <code>else</code> si queremos, para el \u00faltimo camino a distinguir:</p> <pre><code>numero = int(input(\"Escribe un n\u00famero positivo:\"))\nif numero &gt; 0:\n    numero = numero + 1\n    print (\"El siguiente n\u00famero es\", numero)\nelif numero &lt; -10:\n    print (\"El n\u00famero es demasiado bajo\")\nelse:\n    print (\"El n\u00famero no es positivo\")\nprint (\"Fin del programa\")\n</code></pre> <p>Con <code>if-elif-else</code>, puedes manejar varias condiciones de manera m\u00e1s clara y eficiente que anidando m\u00faltiples estructuras.</p> </li> </ul> <p>Estas herramientas te permiten tomar decisiones en tu c\u00f3digo y hacer que tu programa responda de manera diferente dependiendo de las condiciones establecidas. \u00a1Con esto, ya tienes la base para crear programas mucho m\u00e1s inteligentes y din\u00e1micos!</p>"},{"location":"programacion_04.html#4-es-tu-turno","title":"4. Es tu turno","text":"<p>\u00a1Ahora es tu momento de aplicar lo que has aprendido! Aqu\u00ed tienes algunos ejercicios:</p> <ul> <li> <ol> <li>Edad (adulto o no): escribe un programa que le pida al usuario su edad y le diga si es adulto o no.</li> </ol> </li> <li> <ol> <li>Contrase\u00f1a: escribe un programa que le pida al usuario su contrase\u00f1a y, si es 1111 o 4444, le diga \"Bienvenido/a\", y si no le diga \"Acceso no permitido\".</li> </ol> </li> <li> <ol> <li>Impuesto basado en edad y sueldo mensual: para pagar un impuesto se deben tener al menos 16 a\u00f1os y cobrar al menos 1000 euros mensuales. Escribe un programa que le pida al usuario su edad y su sueldo mensual y le diga si tiene que pagar el impuesto o no.</li> </ol> </li> <li> <ol> <li>Calculadora de impuestos para futuros millonarios: imagina que ya has conseguido tu primer gran sueldo anual (\u00a1felicidades!). Ahora, tu misi\u00f3n es calcular cu\u00e1nto te tocar\u00e1 pagar en impuestos. Escribe un programa que le pregunte al usuario cu\u00e1l es su sueldo anual y le diga cu\u00e1nto debe pagar en impuestos seg\u00fan los siguientes tramos:</li> <li>Si ganas menos de 10.000 euros, pagar\u00e1s un 5% en impuestos.</li> <li>Si tu sueldo est\u00e1 entre 10.000 y 20.000 euros, el impuesto ser\u00e1 del 15%.</li> <li>Si tu sueldo est\u00e1 entre 20.000 y 35.000 euros, pagar\u00e1s un 20%.</li> <li>Si ganas 35.000 euros o m\u00e1s, tendr\u00e1s que pagar un 30% en impuestos.</li> <li>El programa debe calcular y mostrar cu\u00e1nto deber\u00e1s pagar. \u00a1Vamos a ver cu\u00e1nto te quedar\u00eda para gastar despu\u00e9s de impuestos!</li> </ol> </li> <li> <ol> <li>Calculadora de becas: imagina que trabajas en una oficina de becas y debes ayudar a decidir qui\u00e9nes pueden recibir una beca. El sistema funciona as\u00ed:</li> <li>Para ser elegible, un estudiante debe tener una nota m\u00ednima de 5 y no superar los 18 a\u00f1os.</li> <li>Si tiene una nota mayor o igual a 9, recibe una beca del 100%.</li> <li>Si tiene una nota entre 7 y 9 (sin incluir el 9), recibe una beca del 50%.</li> <li>Si tiene una nota entre 5 y 7 (sin incluir el 7), recibe una beca del 25%.</li> <li>Si el estudiante tiene m\u00e1s de 18 a\u00f1os o una nota inferior a 5, no recibe beca.</li> <li>Escribe un programa que le pida al usuario su edad y su nota media, y le diga qu\u00e9 tipo de beca recibe o si no es elegible para ninguna beca.</li> </ol> </li> </ul> <p>Si has terminado todos los ejercicios, puedes continuar con m\u00e1s retos en la web kattis</p>"},{"location":"programacion_05.html","title":"5. Estructuras repetitivas (Bucles)","text":"<p>En programaci\u00f3n, muchas veces necesitamos realizar una tarea de forma repetida sin tener que escribir manualmente el mismo c\u00f3digo una y otra vez. Aqu\u00ed es donde entran en juego las estructuras repetitivas, tambi\u00e9n conocidas como bucles. Los bucles nos permiten ejecutar un bloque de c\u00f3digo varias veces de forma autom\u00e1tica, lo que no solo ahorra tiempo y l\u00edneas de c\u00f3digo, sino que tambi\u00e9n hace que nuestros programas sean m\u00e1s flexibles y eficientes.</p> <p>Python ofrece dos tipos principales de bucles: for y while. Cada uno tiene sus propias ventajas y es adecuado para diferentes situaciones. </p>"},{"location":"programacion_05.html#1-estructura-for","title":"1. Estructura for","text":"<p>El bucle <code>for</code> se utiliza para repetir un bloque de c\u00f3digo un n\u00famero determinado de veces. Su estructura b\u00e1sica es la siguiente:</p> <pre><code>for i in range(n):\n    # C\u00f3digo que se repetir\u00e1\n</code></pre> <p>En este caso: * <code>i</code> es una variable que se actualiza autom\u00e1ticamente en cada repetici\u00f3n (o iteraci\u00f3n) del bucle. * <code>range(n)</code> genera una secuencia de n\u00fameros que comienza en 0 y llega hasta n-1, lo que significa que el bloque de c\u00f3digo se ejecutar\u00e1 n veces.</p> <p>Por ejemplo, si quisi\u00e9ramos mostrar la palabra \"hola\" 10 veces, el c\u00f3digo ser\u00eda:</p> <pre><code>for i in range(10):\n    print(\"hola\")   # Imprime \"hola\" diez veces\n</code></pre> <p>Este enfoque es mucho m\u00e1s eficiente que copiar y pegar la misma l\u00ednea 10 veces. Si luego quisieras imprimir \"hola\" 100 veces, solo tendr\u00edas que cambiar 10 por 100 en <code>range(100)</code>, y listo.</p> <p>Si quisi\u00e9ramos ver c\u00f3mo cambia el valor de <code>i</code> en lugar de imprimir \"hola\", podr\u00edamos hacer lo siguiente:</p> <pre><code>for i in range(4):\n    print(i)    # Imprime 0 1 2 3\n</code></pre>"},{"location":"programacion_05.html#11-la-funcion-range","title":"1.1 La funci\u00f3n range()","text":"<p>La funci\u00f3n <code>range()</code> es fundamental en los bucles <code>for</code> porque genera la secuencia de n\u00fameros que controla cu\u00e1ntas veces se ejecuta el bucle. Dependiendo de c\u00f3mo la uses, <code>range()</code> puede generar diferentes tipos de secuencias:</p> <ul> <li>range(n): genera una secuencia que va desde 0 hasta n - 1.</li> <li>range(inicio, fin): genera una secuencia que empieza en inicio y llega hasta fin - 1.</li> <li>range(inicio, fin, salto): genera una secuencia que empieza en inicio, termina en fin - 1, y avanza de acuerdo con el valor de salto (que puede ser positivo o negativo).</li> </ul> <p>Por ejemplo, si queremos generar una secuencia de n\u00fameros desde 3 hasta 7, el c\u00f3digo ser\u00eda: </p> <pre><code>for i in range(3, 8):\n    print(i)  # Imprime 3, 4, 5, 6, 7\n</code></pre> <p>En este caso, <code>i</code> empieza en 3 y termina en 7, porque el bucle se detiene antes de llegar a 8.</p> <p>Si queremos imprimir todos los n\u00fameros pares comprendidos entre 0 y 8, podemos hacer lo siguiente:</p> <pre><code>for i in range(0, 9, 2):\n    print(i)    # Imprime 0 2 4 6 8 \n</code></pre> <p>Aqu\u00ed, el bucle empieza en 0, se detiene antes de llegar a 9, y avanza de 2 en 2.</p> <p>Si quisi\u00e9ramos contar hacia atr\u00e1s desde 10 hasta 1, usar\u00edamos un paso negativo:</p> <pre><code>for i in range(10, 0, -1):\n    print(i)  # Imprime 10, 9, 8, ..., 1\n</code></pre> <p>En este caso, <code>i</code> comienza en 10 y va disminuyendo en 1 hasta llegar a 1 (sin incluir el 0).</p>"},{"location":"programacion_05.html#2-estructura-while","title":"2. Estructura while","text":"<p>Adem\u00e1s del bucle <code>for</code>, Python ofrece otro tipo de bucle llamado <code>while</code>, que tambi\u00e9n permite repetir una secci\u00f3n de c\u00f3digo varias veces, pero con una diferencia importante: en lugar de repetir un n\u00famero fijo de veces, el bucle <code>while</code> se ejecuta mientras se cumple una determinada condici\u00f3n.</p> <p>La estructura b\u00e1sica de un while es la siguiente:</p> <pre><code>while condici\u00f3n:\n    # C\u00f3digo que se repetir\u00e1 mientras la condici\u00f3n sea verdadera\n</code></pre> <p>El bucle continuar\u00e1 ejecut\u00e1ndose mientras la condici\u00f3n sea verdadera. En el momento en que la condici\u00f3n es falsa, el bucle se detiene. Por ejemplo, supongamos que queremos imprimir \"hola\" mientras una variable llamada contador sea menor que 5:</p> <pre><code>contador = 0\nwhile contador &lt; 5:\n    print(\"hola\")   # Imprime \"hola\"\n    contador += 1   # Aumenta el contador en 1 en cada iteraci\u00f3n\n</code></pre> <p>En este caso:  * La variable <code>contador</code> empieza en 0. * Mientras <code>contador</code> sea menor que 5, el bucle imprimir\u00e1 \"hola\". * En cada repetici\u00f3n, aumentamos el valor de <code>contador</code> en 1 con <code>contador += 1</code>. * Cuando <code>contador</code> llega a 5, la condici\u00f3n <code>contador &lt; 5</code> ya no se cumple, y el bucle se detiene.</p>"},{"location":"programacion_05.html#3-diferencias-clave-entre-for-y-while","title":"3. Diferencias clave entre FOR y WHILE","text":"<ul> <li>FOR se utiliza cuando sabes cu\u00e1ntas veces quieres que se repita el c\u00f3digo.</li> <li>WHILE se usa cuando no sabes de antemano cu\u00e1ntas veces se repetir\u00e1 el bucle, porque la repetici\u00f3n depende de una condici\u00f3n que puede cambiar mientras se ejecuta el programa.</li> </ul> <p>Por ejemplo, imagina que quieres hacer un bucle que pida al usuario que adivine un n\u00famero hasta que lo acierte. Usar\u00edas un while, porque no sabes cu\u00e1ntas veces el usuario necesitar\u00e1 intentarlo:</p> <pre><code>numero_secreto = 7\nadivina = int(input(\"Adivina el n\u00famero: \"))\n\nwhile adivina != numero_secreto:\n    print(\"\u00a1Intenta de nuevo!\")\n    adivina = int(input(\"Adivina el n\u00famero: \"))\n\nprint(\"\u00a1Felicidades, adivinaste el n\u00famero!\")\n</code></pre> <p>Este bucle seguir\u00e1 pidiendo al usuario que adivine el n\u00famero hasta que el valor introducido sea igual a <code>numero_secreto</code>.</p> <p>Como ves, los bucles son una herramienta muy poderosa para hacer que tu c\u00f3digo sea m\u00e1s eficiente y flexible. Python te da toda la libertad para controlar c\u00f3mo y cu\u00e1ntas veces se repiten las cosas.</p>"},{"location":"programacion_05.html#4-es-tu-turno","title":"4. Es tu turno","text":"<ol> <li> <p>Escribe un programa llamado impares.py que pida al usuario un n\u00famero entero positivo y muestre por pantalla todos los n\u00fameros impares desde 1 hasta ese n\u00famero separados por comas.</p> <p>Para separar los n\u00fameros con comas, puedes usar el par\u00e1metro <code>end</code> del comando <code>print</code>, que define qu\u00e9 car\u00e1cter colocar al final de lo que se imprime (por defecto es un salto de l\u00ednea <code>\\n</code>). Util\u00edzalo as\u00ed: <code>print(\"hola\", end=\",\")</code></p> <p>Pista: un n\u00famero es impar si el resto de su divisi\u00f3n entre 2 es distinto de 0 (es decir, <code>n % 2 != 0</code>).</p> </li> <li> <p>Escribir un programa llamado primos.py que pida al usuario un n\u00famero entero y muestre por pantalla si es un n\u00famero primo o no. Recuerda que un n\u00famero es primo si es mayor que 1 y solo es divisible por 1 y \u00e9l mismo.  </p> <p>Pista: un n\u00famero a es divisible por otro n\u00famero b si el resto de dividir a entre b es igual a 0 (es decir, <code>a % b == 0</code>).</p> </li> <li> <p>Crea un programa llamado notas.py que le pida al usuario 3 notas, y calcule la nota final seg\u00fan estas reglas:</p> <ul> <li>Si ninguna nota es mayor que 4, la nota final es 0</li> <li>Si algunas notas son mayores que 4 (pero no todas), la nota final es 2</li> <li>Si todas las notas son mayores que 4, la nota final ser\u00e1 el 30% de la primera m\u00e1s el 20% de la segunda m\u00e1s el 50% de la tercera</li> </ul> </li> <li> <p>Crea un programa llamado factura.py que le pida al usuario precios para una factura, hasta que escriba 0. Entonces, el programa debe mostrar el total de la factura con 2 d\u00edgitos decimales.</p> </li> <li> <p>Escribe un programa llamado dibuja_triangulo.py que pida al usuario un n\u00famero entero y muestre por pantalla un tri\u00e1ngulo rect\u00e1ngulo como el de m\u00e1s abajo, de altura el n\u00famero introducido.</p> <pre><code>*\n**\n***\n****\n*****\n</code></pre> </li> <li> <p>Crea un programa llamado mayor_menor.py que le pida al usuario que introduzca una secuencia de N n\u00fameros positivos (primero el usuario deber\u00e1 indicar cu\u00e1ntos n\u00fameros va a introducir). Al final del proceso, el programa deber\u00e1 mostrar por pantalla el valor del n\u00famero mayor y el menor introducidos por el usuario. Por ejemplo:</p> <pre><code>Dime cu\u00e1ntos n\u00fameros vas a introducir:\n3\nEscribe 3 n\u00fameros:\n3\n7\n2\nEl mayor es 7\nEl menor es 2\n</code></pre> <p>Pista: puedes usar variables acumulativas para almacenar el n\u00famero mayor y el n\u00famero menor conforme se van introduciendo los n\u00fameros. Comienza asignando a ambas variables el valor del primer n\u00famero, y luego actual\u00edzalas si encuentras un n\u00famero mayor o menor.</p> </li> </ol> <p>Si has terminado todos los ejercicios, puedes continuar con m\u00e1s retos en la web kattis</p>"},{"location":"programacion_06.html","title":"6. Listas","text":"<p>Una lista es una estructura de datos que permite almacenar elementos de diferentes tipos y pueden modificarse f\u00e1cilmente (a\u00f1adiendo o quitando elementos).</p> <p>En este apartado, aprenderemos c\u00f3mo crear listas, acceder a sus elementos y realizar operaciones comunes, como a\u00f1adir, modificar y eliminar valores.</p>"},{"location":"programacion_06.html#1-creacion-de-listas","title":"1. Creaci\u00f3n de listas","text":"<p>Puedes crear una lista de dos maneras:</p> <ul> <li> <p>Directamente con corchetes:</p> <pre><code># Creamos una lista con tres elementos\nmi_lista = ['A', 'B', 'C']\nprint(mi_lista)  # Salida: ['A', 'B', 'C']    \n</code></pre> </li> <li> <p>Usando la funci\u00f3n <code>list()</code>:</p> <pre><code># Creamos una lista vac\u00eda usando la funci\u00f3n list()\nmi_lista = list()\nprint(mi_lista)  # Salida: []\n</code></pre> </li> <li> <p>Las listas pueden contener cualquier tipo de datos, incluso mezclados:</p> <pre><code># Ejemplo de lista con elementos de diferentes tipos\nmi_lista = ['Juan', 25, True]  \nprint(mi_lista)  # Salida: ['Juan', 25, True]\n</code></pre> </li> </ul>"},{"location":"programacion_06.html#2-acceder-a-los-elementos","title":"2. Acceder a los elementos","text":"<ul> <li> <p>Para obtener un elemento de una lista, usamos su \u00edndice, que empieza en 0. Por ejemplo, si tenemos la lista <code>mi_lista = ['A', 'B', 'C']</code>, el primer elemento ser\u00e1 <code>mi_lista[0]</code>, y el segundo <code>mi_lista[1]</code>.</p> <pre><code>mi_lista = ['A', 'B', 'C']\nprint(mi_lista[0])  # Salida: 'A' (primer elemento)\nprint(mi_lista[1])  # Salida: 'B' (segundo elemento)\n</code></pre> </li> <li> <p>Podemos usar \u00edndices negativos para acceder a los elementos desde el final. En <code>mi_lista = ['A', 'B', 'C']</code>, <code>mi_lista[-1]</code> devolver\u00e1 'C'.</p> <pre><code>mi_lista = ['A', 'B', 'C']\nprint(mi_lista[-1])  # Salida: 'C' (\u00faltimo elemento)\nprint(mi_lista[-2])  # Salida: 'B' (pen\u00faltimo elemento)\n</code></pre> </li> </ul>"},{"location":"programacion_06.html#21-recorrer-una-lista","title":"2.1 Recorrer una lista","text":"<p>La forma m\u00e1s sencilla de recorrer una lista es usar un bucle <code>for..in</code>. Este bucle permite iterar por cada elemento de la lista y realizar acciones con ellos.</p> <pre><code>mi_lista = [10, 20, 30, 40, 50]\nfor elemento in mi_lista:\n    print(elemento) # Salida: 10 20 30 40 50 (cada n\u00famero en una l\u00ednea diferente)\n</code></pre>"},{"location":"programacion_06.html#22-sublistas","title":"2.2 Sublistas","text":"<p>Podemos obtener una sublista de una lista dada de la siguiente forma:</p> <p><code>sublista = mi_lista[inicio:fin:salto]</code></p> <p>Donde:  * inicio: es el \u00edndice desde donde se empieza a extraer (incluido). * fin: es el \u00edndice hasta donde se extrae (no incluido). * salto: indica el salto entre los elementos. El valor por defecto es 1.</p> <p>Ejemplos</p> <ul> <li> <p>Sublista b\u00e1sica: extraer los elementos desde el \u00edndice 1 al 4</p> <pre><code>lista = [10, 20, 30, 40, 50, 60]\nsublista = lista[1:4]  # Extrae desde el \u00edndice 1 hasta el 3\nprint(sublista)  # Salida: [20, 30, 40]\n</code></pre> </li> <li> <p>Sublista con saltos: extraer elementos en saltos de 2</p> <pre><code>lista = [1, 2, 3, 4, 5, 6]\nsublista = lista[0:6:2]  # Extrae desde el \u00edndice 0 hasta el 5, saltando de 2 en 2\nprint(sublista)  # Salida: [1, 3, 5]\n</code></pre> </li> </ul>"},{"location":"programacion_06.html#3-modificar-listas","title":"3. Modificar listas","text":"<ul> <li> <p>Para a\u00f1adir elementos al final, usamos <code>append()</code>:</p> <pre><code># Agregamos un nuevo elemento al final de la lista\nmi_lista = ['A', 'B', 'C']\nmi_lista.append('D')\nprint(mi_lista)  # Salida: ['A', 'B', 'C', 'D']\n</code></pre> </li> <li> <p>Para insertar un elemento en una posici\u00f3n espec\u00edfica, usamos <code>insert()</code>. Se debe indicar el \u00edndice donde se desea insertar el elemento y luego el valor.</p> <pre><code># Insertamos el elemento 'X' en la posici\u00f3n 1\nmi_lista = ['A', 'B', 'C']\nmi_lista.insert(1, 'X')  \nprint(mi_lista)  # Salida: ['A', 'X', 'B', 'C']    \n</code></pre> </li> <li> <p>Para eliminar un elemento por su posici\u00f3n, usamos <code>del</code> o <code>pop()</code>. Por defecto, <code>pop()</code> elimina el \u00faltimo elemento si no se especifica \u00edndice:</p> <pre><code># Eliminamos el elemento en la posici\u00f3n 1 ('B')\nmi_lista = ['A', 'B', 'C', 'D']\ndel mi_lista[1]\nprint(mi_lista)  # Salida: ['A', 'C', 'D']\n\n# Eliminamos el elemento en la posici\u00f3n 2 ('D') y lo almacenamos\nelemento_eliminado = mi_lista.pop(2)\nprint(mi_lista)  # Salida: ['A', 'C']\nprint(elemento_eliminado)  # Salida: 'D'\n</code></pre> </li> <li> <p>Para eliminar un elemento por su valor, usamos <code>remove()</code>:</p> <pre><code># Eliminamos el primer elemento que tenga el valor 'A'\nmi_lista = ['A', 'B', 'C']\nmi_lista.remove('A')\nprint(mi_lista)  # Salida: ['B', 'C']\n</code></pre> </li> </ul>"},{"location":"programacion_06.html#4-copiar-listas","title":"4. Copiar listas","text":"<p>Existen dos formas de copiar listas:</p> <ul> <li> <p>Copia por referencia (lista1 = lista2): se asocia a <code>lista1</code> la misma lista que <code>lista2</code>. Ambas variables apuntan a la misma direcci\u00f3n de memoria, por lo que cualquier cambio en una afectar\u00e1 a la otra. </p> <pre><code>lista1 = [1, 2, 3]\nlista2 = lista1  # Copia por referencia\nlista2.append(4)\nprint(lista1)  # Salida: [1, 2, 3, 4]\nprint(lista2)  # Salida: [1, 2, 3, 4]\n</code></pre> </li> </ul> <p>Tanto lista1 como lista2 apuntan a la misma lista, por lo que los cambios en lista2 tambi\u00e9n se reflejan en lista1.</p> <ul> <li> <p>Copia por valor (lista1 = list(lista2)): esto crea una nueva lista independiente con el mismo contenido que <code>lista2</code>, pero en una direcci\u00f3n de memoria diferente. Las dos listas son independientes, por lo que los cambios en una no afectan a la otra.</p> <pre><code>lista1 = [1, 2, 3]\nlista2 = list(lista1)  # Copia por valor\nlista2.append(4)\nprint(lista1)  # Salida: [1, 2, 3]\nprint(lista2)  # Salida: [1, 2, 3, 4]\n</code></pre> </li> </ul> <p>Aqu\u00ed, lista1 y lista2 son listas separadas, por lo que los cambios en lista2 no modifican a lista1.</p>"},{"location":"programacion_06.html#5-otras-funciones-interesantes-sobre-listas","title":"5. Otras funciones interesantes sobre listas","text":"<ul> <li> <p>El m\u00e9todo <code>sort()</code> ordena los elementos de la lista de menor a mayor. Si quieres que sea en orden inverso, puedes usar el argumento <code>reverse=True</code>.</p> <pre><code>mi_lista = [3, 1, 2]\nmi_lista.sort()\nprint(mi_lista)  # Salida: [1, 2, 3]\n\nmi_lista.sort(reverse=True)\nprint(mi_lista)  # Salida: [3, 2, 1]\n</code></pre> </li> <li> <p>La funci\u00f3n <code>len()</code> devuelve la cantidad de elementos en la lista.</p> <pre><code>mi_lista = [1, 2, 3, 4]\nprint(len(mi_lista))  # Salida: 4\n</code></pre> </li> <li> <p>El m\u00e9todo <code>count()</code> cuenta cu\u00e1ntas veces aparece un valor en la lista.</p> <pre><code>mi_lista = [1, 2, 2, 3, 2]\nprint(mi_lista.count(2))  # Salida: 3\n</code></pre> </li> <li> <p>Los m\u00e9todos <code>min()</code>, <code>max()</code>, y <code>sum()</code> son \u00fatiles para trabajar con listas num\u00e9ricas:</p> <ul> <li>min(lista): devuelve el valor m\u00ednimo de la lista.</li> <li>max(lista): devuelve el valor m\u00e1ximo de la lista.</li> <li>sum(lista): Suma todos los elementos de la lista.</li> </ul> <pre><code>lista = [3, 1, 4, 2]\nprint(min(lista))  # Salida: 1\nprint(max(lista))  # Salida: 4\nprint(sum(lista))  # Salida: 10\n</code></pre> </li> <li> <p>El m\u00e9todo <code>reverse()</code> invierte los elementos de la lista, modificando directamente la lista sin crear una nueva. A diferencia de <code>sort(reverse=True)</code>, <code>reverse()</code> no ordena los elementos, solo cambia su orden.</p> </li> </ul> <pre><code>mi_lista = [1, 2, 3, 4]\nmi_lista.reverse()\nprint(mi_lista)  # Salida: [4, 3, 2, 1]\n</code></pre>"},{"location":"programacion_06.html#6-es-tu-turno","title":"6. Es tu turno","text":"<ul> <li> <ol> <li>Escribe un programa llamado loterias.py que pregunte al usuario los n\u00fameros ganadores de la loter\u00eda primitiva, los almacene en una lista y los muestre por pantalla ordenados de menor a mayor.</li> </ol> </li> <li> <ol> <li>Escribe un programa llamado sentido_inverso.py que almacene en una lista los n\u00fameros del 1 al 10 y los muestre por pantalla en orden inverso separados por comas.</li> </ol> </li> <li> <ol> <li>Escribe un programa llamado precios.py que almacene en una lista 10 precios diferentes y muestre por pantalla el menor y el mayor de los precios.</li> </ol> </li> <li> <ol> <li>Escribe un programa llamado abecedario.py que almacene el abecedario en una lista, elimine de la lista las letras que ocupen posiciones m\u00faltiplos de 3, y muestre por pantalla la lista resultante.</li> </ol> </li> <li> <ol> <li>Escribe un programa llamado vocales.py que pida al usuario una palabra y muestre por pantalla el n\u00famero de veces que contiene cada vocal.</li> </ol> </li> <li> <ol> <li>Escribe un programa llamado asignaturas.py que realice las siguientes acciones:</li> <li>Crea una lista que contenga las asignaturas de un curso (por ejemplo: F\u00edsica, Qu\u00edmica, Matem\u00e1ticas, Historia y Lengua). Puedes ordenarla de acuerdo a tu nivel de inter\u00e9s (de m\u00e1s a menos interesante para ti). A continuaci\u00f3n, muestra la lista por pantalla.</li> <li>A\u00f1adir una asignatura: el programa debe pedir al usuario que introduzca el nombre de una nueva asignatura y la posici\u00f3n en la que quiere insertarla dentro de la lista. Una vez insertada, el programa debe mostrar la lista actualizada con la nueva asignatura en la posici\u00f3n elegida.</li> <li>Eliminar una asignatura: El programa debe pedir al usuario que elimine una asignatura de la lista por su nombre. Despu\u00e9s de eliminarla, muestra la lista actualizada sin esa asignatura.</li> </ol> <p>Ejemplo de funcionamiento: </p> <pre><code>Asignaturas ordenadas de m\u00e1s a menos interesantes:\n['F\u00edsica', 'Qu\u00edmica', 'Matem\u00e1ticas', 'Historia', 'Lengua']\n\nIntroduce una nueva asignatura: Programaci\u00f3n\n\u00bfEn qu\u00e9 posici\u00f3n quieres a\u00f1adirla (1-5)? 1\nLista de asignaturas actualizada:\n['Programaci\u00f3n', 'F\u00edsica', 'Qu\u00edmica', 'Matem\u00e1ticas', 'Historia', 'Lengua']\n\n\u00bfQu\u00e9 asignatura deseas eliminar?: Historia\nLista de asignaturas tras la eliminaci\u00f3n:\n['Programaci\u00f3n', 'F\u00edsica', 'Qu\u00edmica', 'Matem\u00e1ticas', 'Lengua']\n</code></pre> </li> <li> <ol> <li>Escribe un programa llamado notas_asignaturas.py que realice las siguientes acciones:</li> <li>Crear una lista de asignaturas: crea una lista con varias asignaturas (como en el ejercicio anterior). Muestra esta lista de asignaturas por pantalla.</li> <li>Solicitar las notas: pide al usuario que introduzca una nota para cada asignatura en el mismo orden en el que aparecen en la lista de asignaturas. Las notas deben guardarse en una nueva lista de notas, asegurando que las posiciones de las notas coincidan con las asignaturas correspondientes.</li> <li>Calcular el promedio: calcula el promedio de todas las notas introducidas y mu\u00e9stralo con 2 cifras decimales por pantalla.</li> <li>Mostrar asignaturas y notas: finalmente, muestra la lista de asignaturas con sus respectivas notas, utilizando el siguiente formato: <code>Asignatura: Nota</code></li> </ol> <p>Ejemplo de funcionamiento:</p> <pre><code>Asignaturas: ['F\u00edsica', 'Qu\u00edmica', 'Matem\u00e1ticas', 'Historia', 'Lengua']\n\nIntroduce la nota para F\u00edsica: 8\nIntroduce la nota para Qu\u00edmica: 7.5\nIntroduce la nota para Matem\u00e1ticas: 9\nIntroduce la nota para Historia: 6\nIntroduce la nota para Lengua: 7\n\nAsignaturas y notas:\nF\u00edsica: 8.0\nQu\u00edmica: 7.5\nMatem\u00e1ticas: 9.0\nHistoria: 6.0\nLengua: 7.0\n\nEl promedio de las notas es: 7.50\n</code></pre> </li> </ul> <p>Si has terminado todos los ejercicios, puedes continuar con m\u00e1s retos en la web kattis</p>"},{"location":"programacion_07.html","title":"7. M\u00e1s sobre cadenas de texto","text":""},{"location":"programacion_07.html#1-operaciones-basicas","title":"1. Operaciones b\u00e1sicas","text":"<p>Ya hemos visto en apartados anteriores que Python permite manejar cadenas de texto utilizando indistintamente comillas simples o dobles. Podemos crearlas con un texto predefinido en el programa, o pedirlas al usuario a trav\u00e9s de la instrucci\u00f3n input:</p> <pre><code>texto = \"Hola\"\ntexto2 = 'Buenas' \ntexto3 = input(\"Dime tu nombre: \")\n</code></pre> <p>Adem\u00e1s, tambi\u00e9n hemos visto las siguientes operaciones b\u00e1sicas:</p> <ul> <li>Concatenaci\u00f3n: unimos cadenas con el operador <code>+</code></li> </ul> <pre><code>nombre = \"May\"\ntexto = \"Hola, \" + nombre  # Hola, May\n</code></pre> <ul> <li>Conversi\u00f3n a cadena: convertimos cualquier dato a cadena con <code>str()</code></li> </ul> <pre><code>edad = 17\ntexto = \"Tengo \" + str(edad) + \" a\u00f1os\"\n</code></pre> <ul> <li>Repetir cadenas: repetimos una cadena usando <code>*</code>:</li> </ul> <pre><code>texto = \"Hola\" * 3  # HolaHolaHola\n</code></pre> <p>A estas operaciones b\u00e1sicas ya conocidas, podemos a\u00f1adir la siguiente: </p> <ul> <li>\u00cdndices y longitud: podemos acceder a un car\u00e1cter concreto con corchetes <code>[]</code> y conocer la longitud de la cadena con <code>len()</code>:</li> </ul> <pre><code>texto = \"Hola\"\nprint(texto[0])  # H\nprint(len(texto))  # 4\n</code></pre>"},{"location":"programacion_07.html#2-operaciones-avanzadas","title":"2. Operaciones avanzadas","text":"<ul> <li>Dividir cadenas: usamos <code>split()</code> para separar una cadena en una lista de palabras, usando un delimitador:</li> </ul> <pre><code>texto = \"Uno,Dos,Tres\"\npartes = texto.split(\",\")  # [\"Uno\", \"Dos\", \"Tres\"]\n</code></pre> <ul> <li>Unir listas en cadenas: Con <code>join()</code>, podemos unir elementos de una lista en una cadena, separ\u00e1ndolos con un delimitador:</li> </ul> <pre><code>partes = [\"Uno\", \"Dos\", \"Tres\"]\ntexto = ','.join(partes)  # Uno,Dos,Tres\n</code></pre> <ul> <li>Reemplazar texto: replace() sustituye una parte de la cadena por otro texto:</li> </ul> <pre><code>texto = \"Java es el mejor lenguaje\"\ntexto2 = texto.replace(\"Java\", \"Python\")  # Python es el mejor lenguaje\n</code></pre> <ul> <li>Convertir may\u00fasculas/min\u00fasculas: Usamos <code>lower()</code> y <code>upper()</code> para convertir texto a min\u00fasculas o may\u00fasculas:</li> </ul> <pre><code>texto = \"Hola, buenas\"\ntexto_mayus = texto.upper()  # HOLA, BUENAS\n</code></pre> <ul> <li>Buscar en cadenas: Con <code>find()</code>, encontramos la posici\u00f3n de una subcadena, y con <code>in</code> verificamos si una palabra est\u00e1 presente:</li> </ul> <pre><code>texto = \"Hola, buenas\"\nposicion = texto.find(\"buenas\")  # 6\nif \"buenas\" in texto:\n    print(\"El texto contiene 'buenas'\")\n</code></pre> <ul> <li>Subcadenas: Para extraer una parte de la cadena, usamos el formato cadena[inicio:fin]:</li> </ul> <pre><code>texto = \"Hola, buenas tardes\"\nsubcadena = texto[6:12]  # buenas\nsubcadena2 = texto[6:]   # buenas tardes\n</code></pre> <ul> <li>Comparar cadenas: Usamos operadores de comparaci\u00f3n (&lt;, &gt;, ==) para comparar alfab\u00e9ticamente:</li> </ul> <pre><code>texto1 = \"Hola\"\ntexto2 = \"buenas\"\nif texto1 &lt; texto2:\n    print('\"Hola\" es menor que \"buenas\"')\n</code></pre> <ul> <li>Eliminar espacios: <code>strip()</code> elimina espacios al inicio y al final de una cadena. Tambi\u00e9n est\u00e1n <code>lstrip()</code> y <code>rstrip()</code> para limpiar solo a la izquierda o derecha:</li> </ul> <pre><code>texto = \"\\tHola   \"\ntexto_limpio = texto.strip()  # \"Hola\"\n</code></pre>"},{"location":"programacion_07.html#3-es-tu-turno","title":"3. Es tu turno","text":"<ul> <li> <ol> <li>Escribe un programa llamado caracteres.py que:</li> <li>Pida al usuario que introduzca una palabra.</li> <li>Muestre el primer y el \u00faltimo car\u00e1cter de la palabra.</li> <li>Muestre tambi\u00e9n la longitud de la palabra.</li> </ol> </li> <li> <ol> <li>Escribe un programa llamado dividir_cadena.py que:</li> <li>Pida al usuario que introduzca una frase con varias palabras separadas por comas.</li> <li>Divida la frase en una lista de palabras y muestre la lista por pantalla.</li> </ol> <pre><code>Introduce una frase separada por comas: manzana,pera,pl\u00e1tano\n['manzana', 'pera', 'pl\u00e1tano']\n</code></pre> </li> <li> <ol> <li>Escribe un programa llamado unir_palabras.py que:</li> <li>Tenga una lista predefinida con 5 palabras.</li> <li>Una las palabras de la lista en una cadena, separadas por guiones, y muestre la cadena resultante.</li> </ol> <p><pre><code>Lista de palabras: ['gato', 'perro', 'p\u00e1jaro', 'rat\u00f3n', 'pez']\nCadena resultante: gato-perro-p\u00e1jaro-rat\u00f3n-pez\n</code></pre> * 4. Escribe un programa llamado reemplazar.py que:  * Pida al usuario una frase con las palabras \"bueno\" y \"malo\"  * Reemplace todas las ocurrencias de la palabra \"malo\" por \"bueno\" y muestre el resultado.</p> </li> <li> <ol> <li>Escribe un programa llamado mayus_minus.py que:</li> <li>Pida al usuario una frase.</li> <li>Muestre la frase convertida completamente en may\u00fasculas y en min\u00fasculas.</li> </ol> </li> <li> <ol> <li>Escribe un programa llamado buscar_palabra.py que:</li> <li>Pida al usuario una frase.</li> <li>Pida al usuario una palabra para buscar en la frase.</li> <li>Muestra si la palabra est\u00e1 presente en la frase, y si es as\u00ed, la posici\u00f3n donde comienza.</li> </ol> <p><pre><code>Introduce una frase: Me gusta programar en Python\nIntroduce una palabra para buscar: Python\nLa palabra 'Python' est\u00e1 en la frase en la posici\u00f3n 23\n</code></pre> * 7. Escribe un programa llamado extraer_subcadena.py que:  * Pida al usuario que introduzca una frase.  * Pida dos posiciones (inicio y fin) para extraer una subcadena.  * Muestra la subcadena resultante.</p> <p><pre><code>Introduce una frase: Estoy aprendiendo Python\nIntroduce la posici\u00f3n inicial: 6\nIntroduce la posici\u00f3n final: 16\nLa subcadena es: aprendiendo\n</code></pre> * 8. Escribe un programa llamado comparar_cadenas.py que:  * Pida al usuario que introduzca dos palabras.  * Compare las palabras alfab\u00e9ticamente y diga cu\u00e1l es mayor, menor o si son iguales.</p> </li> <li> <ol> <li>Escribe un programa llamado palindromo.py que pida al usuario una palabra y muestre por pantalla si es un pal\u00edndromo. Un pal\u00edndromo es una palabra que se lee igual de izquierda a derecha que de derecha a izquierda. Es decir, si la palabra se invierte, sigue siendo la misma. Por ejemplo: radar, oso, etc</li> </ol> </li> </ul> <p>Si has terminado todos los ejercicios, puedes continuar con m\u00e1s retos en la web kattis</p>"},{"location":"programacion_08.html","title":"8. Funciones en Python","text":"<p>Las funciones son uno de los pilares de la programaci\u00f3n. Nos permiten escribir c\u00f3digo m\u00e1s eficiente y organizado, dividiendo grandes problemas en partes m\u00e1s peque\u00f1as y manejables. </p> <p>En este apartado aprenderemos c\u00f3mo definir funciones, pasarles par\u00e1metros y hacer que devuelvan valores que podemos usar m\u00e1s adelante.</p>"},{"location":"programacion_08.html#1-que-es-una-funcion","title":"1. \u00bfQu\u00e9 es una Funci\u00f3n?","text":"<p>Una funci\u00f3n es un bloque de c\u00f3digo reutilizable que realiza una tarea espec\u00edfica. Permite organizar el c\u00f3digo de manera m\u00e1s clara, evitando la repetici\u00f3n de instrucciones y facilitando su comprensi\u00f3n y mantenimiento.</p> <p>Ventajas de usar funciones</p> <ul> <li>Reutilizaci\u00f3n: permiten usar el mismo c\u00f3digo en varios lugares del programa.</li> <li>Organizaci\u00f3n: ayudan a dividir el c\u00f3digo en secciones m\u00e1s manejables.</li> <li>Mantenimiento: si hay errores, es m\u00e1s f\u00e1cil localizarlos y corregirlos.</li> </ul>"},{"location":"programacion_08.html#2-definicion-de-una-funcion","title":"2. Definici\u00f3n de una funci\u00f3n","text":"<p>En Python, se define una funci\u00f3n usando la palabra clave <code>def</code>. Su sintaxis es la siguiente:</p> <pre><code>def nombre_funcion(par\u00e1metros):\n    # Cuerpo de la funci\u00f3n\n    return valor_de_retorno\n</code></pre> <ul> <li>def: palabra clave para definir la funci\u00f3n.</li> <li>nombre_funcion: nombre que le damos a la funci\u00f3n.</li> <li>par\u00e1metros: variables que la funci\u00f3n puede recibir (opcional).</li> <li>return: devuelve un resultado (opcional, pero \u00fatil).</li> </ul>"},{"location":"programacion_08.html#21-ejemplo-basico","title":"2.1 Ejemplo b\u00e1sico","text":"<pre><code>def saludar():\n    print(\"\u00a1Hola, bienvenido!\")\n</code></pre> <p>Para llamar a la funci\u00f3n, simplemente escribimos su nombre:</p> <pre><code>saludar()  # Esto imprimir\u00e1 \"\u00a1Hola, bienvenido!\"\n</code></pre>"},{"location":"programacion_08.html#3-funciones-con-parametros","title":"3. Funciones con par\u00e1metros","text":"<p>Las funciones pueden recibir par\u00e1metros que les permiten realizar tareas m\u00e1s complejas con diferentes datos.</p> <pre><code>def sumar(a, b):\n    resultado = a + b\n    return resultado\n</code></pre> <p>Para llamar a esta funci\u00f3n, escribimos su nombre y entre par\u00e9ntesis indicamos el valor de dichos par\u00e1metros:</p> <pre><code>print(sumar(3, 5))  # Esto imprimir\u00e1 8\n</code></pre> <p>En este caso, a y b son los par\u00e1metros de la funci\u00f3n, y 3 y 5 son los argumentos que pasamos al llamarla.</p> <p>Nota: Es importante distinguir entre par\u00e1metros y argumentos. Los par\u00e1metros son las variables que se declaran en la definici\u00f3n de la funci\u00f3n, mientras que los argumentos son los valores que se pasan a la funci\u00f3n cuando es llamada.</p>"},{"location":"programacion_08.html#31-pasar-un-numero-indeterminado-de-argumentos","title":"3.1 Pasar un n\u00famero indeterminado de argumentos","text":"<p>Es posible pasar un n\u00famero variable de argumentos a una funci\u00f3n, lo que es \u00fatil cuando no se sabe cu\u00e1ntos argumentos se recibir\u00e1n.</p> <p>Para hacer esto, se antepone un asterisco (*) al nombre del par\u00e1metro. Los argumentos se almacenan en una tupla.</p> <pre><code>def menu(*platos):\n    print('Hoy tenemos: ', end='')\n    for plato in platos:\n        print(plato, end=', ')\n    return\n</code></pre> <p>Al llamar a la funci\u00f3n con varios argumentos: </p> <pre><code>menu('pasta', 'pizza', 'ensalada') \n# Se imprimir\u00e1: \"Hoy tenemos: pasta, pizza, ensalada\" \n</code></pre>"},{"location":"programacion_08.html#31-parametros-por-defecto","title":"3.1 Par\u00e1metros por defecto","text":"<p>Puedes asignar valores por defecto a los par\u00e1metros. Si no se pasa un valor al llamarla, tomar\u00e1 el valor por defecto.</p> <pre><code>def saludar(nombre=\"invitado\"):\n    print(f\"\u00a1Hola, {nombre}!\")\n</code></pre> <p>Al llamar a la funci\u00f3n:</p> <pre><code>saludar()           # Imprime: \u00a1Hola, invitado!\nsaludar(\"Luc\u00eda\")    # Imprime: \u00a1Hola, Luc\u00eda!\n</code></pre> <p>Reto: Define una funci\u00f3n que reciba un n\u00famero y lo multiplique por 5. Si no se pasa ning\u00fan argumento, que el n\u00famero sea 10 por defecto.</p>"},{"location":"programacion_08.html#4-funciones-que-devuelven-valores","title":"4. Funciones que devuelven valores","text":"<p>Las funciones pueden devolver valores usando la palabra clave <code>return</code>. Esto es \u00fatil cuando necesitamos procesar el valor devuelto en otro punto del programa. Sin <code>return</code>, la funci\u00f3n solo ejecuta su tarea y no podr\u00edas reutilizar el resultado que obtiene.</p> <p>Por ejemplo, la siguiente funci\u00f3n realiza la multiplicaci\u00f3n de dos n\u00fameros:</p> <pre><code>def multiplicar(a, b):\n    return a * b\n</code></pre> <p>Al llamar a la funci\u00f3n:</p> <pre><code>resultado = multiplicar(4, 6)\nprint(resultado)  # Esto imprimir\u00e1 24\n</code></pre> <p>Puedes guardar el resultado en una variable y usarlo en cualquier otra parte del programa. </p> <p>Contraejemplo: funci\u00f3n que no devuelve valor</p> <pre><code>def multiplicar(a, b):\n    print(a * b)  # Esto solo imprimir\u00e1 el valor pero no lo devolver\u00e1\n\nresultado = multiplicar(4, 6)  # El resultado no puede almacenarse ni usarse\nprint(resultado)  # Esto imprimir\u00e1 \"None\", porque no se ha usado `return`\n</code></pre>"},{"location":"programacion_08.html#5-ambito-de-las-variables","title":"5. \u00c1mbito de las variables","text":"<p>El \u00e1mbito (o \"scope\") se refiere a desde d\u00f3nde es accesible una variable. Hay dos tipos:</p> <ul> <li>Local: son las variables definidas dentro de una funci\u00f3n, y solo existen dentro de esa funci\u00f3n.</li> <li>Global: son las variables definidas fuera de las funciones, y son accesibles desde cualquier parte del c\u00f3digo.</li> </ul> <p>Ejemplo de \u00e1mbito local:</p> <pre><code>def prueba():\n    x = 10  # x es local\n    print(x)\n\nprueba()  # Imprime 10\n# print(x)  # Esto dar\u00eda un error, porque x no existe fuera de la funci\u00f3n\n</code></pre> <p>Ejemplo de \u00e1mbito global:</p> <pre><code>x = 10  # Variable global\n\ndef prueba():\n    print(x)  # Puede acceder a la variable global\n\nprueba()  # Imprime 10\n</code></pre>"},{"location":"programacion_08.html#6-es-tu-turno","title":"6. Es tu turno","text":"<ol> <li> <p>Escribir una funci\u00f3n a la que se le pase una cadena  y muestre por pantalla el saludo \u00a1hola ! <li> <p>Escribir una funci\u00f3n que reciba una muestra de n\u00fameros en una lista y devuelva su media.</p> <p><pre><code>media([4, 5, 6, 7, 8])  # Esto devolver\u00e1 6.0\n</code></pre> 3. Escribir una funci\u00f3n que reciba un n\u00famero entero positivo y devuelva su factorial.</p> <p>Pista: El factorial de un n\u00famero n se calcula multiplicando todos los n\u00fameros enteros desde 1 hasta n. Por ejemplo, el factorial de 5 es 5 * 4 * 3 * 2 * 1 = 120.</p> <pre><code>factorial(5)  # Esto devolver\u00e1 120\n</code></pre> </li> <li> <p>Crea una funci\u00f3n que tome un n\u00famero entero y retorne True si es par, y False si es impar.</p> <pre><code>es_par(4)  # Esto devolver\u00e1 True\nes_par(7)  # Esto devolver\u00e1 False\n</code></pre> </li> <li> <p>Conversi\u00f3n entre decimal y binario. * Escribe una funci\u00f3n que convierta un n\u00famero decimal en su equivalente binario. * Escribe otra funci\u00f3n que convierta un n\u00famero binario en su equivalente decimal.</p> <p>Pista: Para convertir un n\u00famero decimal a binario, puedes dividir el n\u00famero entre 2 repetidamente y registrar los restos. Para la conversi\u00f3n inversa (binario a decimal), cada d\u00edgito binario representa una potencia de 2 (de derecha a izquierda, el primer d\u00edgito es 2^0, el segundo es 2^1, y as\u00ed sucesivamente).</p> <pre><code>decimal_a_binario(10)  # Esto devolver\u00e1 '1010'\nbinario_a_decimal('1010')  # Esto devolver\u00e1 10\n</code></pre> </li>"},{"location":"pygame_01.html","title":"1. Primeros pasos con Pygame Zero","text":"<p>\u00a1Bienvenidos a Pygame Zero! Si te gusta la idea de crear videojuegos 2D y ya sabes un poquito de Python, est\u00e1s en el lugar correcto. Pygame Zero es una herramienta que te permitir\u00e1 dar vida a tus ideas de videojuegos de forma muy sencilla y divertida. </p>"},{"location":"pygame_01.html#11-que-es-pygame-zero","title":"1.1 \u00bfQu\u00e9 es Pygame Zero?","text":"<p>Pygame Zero es una versi\u00f3n simplificada de otra biblioteca m\u00e1s completa para crear juegos 2D, llamada Pygame. Est\u00e1 dise\u00f1ada para que puedas empezar a programar videojuegos f\u00e1cilmente y sin complicaciones. Al estar basada en Python, \u00a1te resultar\u00e1 muy familiar!</p> <p>Una de las ventajas de Pygame Zero es que se ocupa autom\u00e1ticamente de aspectos t\u00e9cnicos, como configurar la ventana del juego o crear un bucle principal (el \"motor\" que mantiene el juego en marcha). As\u00ed, puedes concentrarte en lo m\u00e1s divertido: dise\u00f1ar personajes, dibujar escenarios y a\u00f1adir interacci\u00f3n en pantalla.</p> <p>\u00bfQu\u00e9 tipo de juegos puedes crear?</p> <p>Con Pygame Zero, puedes hacer un mont\u00f3n de juegos diferentes. Aqu\u00ed tienes algunas ideas: * Juego de plataformas tipo Super Mario: un personaje que salta, recoge monedas y esquiva enemigos. * Juego de disparos: donde controlas una nave espacial que destruye enemigos mientras evita obst\u00e1culos. * Juego de carreras: con coches que se mueven en una pista, acelerando y esquivando otros veh\u00edculos. * Puzzles al estilo Tetris o juegos de combinar piezas. * Aventuras gr\u00e1ficas: juegos donde puedes interactuar con objetos y personajes usando el rat\u00f3n, como en cl\u00e1sicos de los 90.</p>"},{"location":"pygame_01.html#12-como-empezar","title":"1.2 \u00bfC\u00f3mo empezar?","text":"<p>Lo primero que necesitas es instalar Pygame Zero. Es muy f\u00e1cil: 1. Abre la consola  (haz clic en el men\u00fa de Inicio y escribe cmd) 2. Escribe este comando:</p> <pre><code>pip install pgzero\n</code></pre> <p>\u00a1Y listo! Ya tienes Pygame Zero instalado.</p> <p>NOTA: El comando PIP permite instalar herramientas adicionales en Python. En este caso, para obtener Pygame Zero, pero lo puedes usar para instalar otras muchas herramientas (es como una \"tienda de aplicaciones\" para Python).</p>"},{"location":"pygame_01.html#13-sistema-de-coordenadas-en-pygame-zero","title":"1.3 Sistema de coordenadas en PyGame Zero","text":"<p>Antes de empezar a ver la estructura b\u00e1sica de una aplicaci\u00f3n de Pygame Zero, conviene entender c\u00f3mo funciona su sistema de coordenadas, ya que es esencial para posicionar y mover elementos en la pantalla.</p> <ul> <li>Origen: el punto (0, 0) est\u00e1 en la esquina superior izquierda de la pantalla.</li> <li>Eje X (horizontal): aumenta de izquierda a derecha. Cuanto mayor sea el valor de x, m\u00e1s a la derecha estar\u00e1 el punto en la pantalla.</li> <li>Eje Y (vertical): aumenta de arriba hacia abajo, al contrario de los sistemas de coordenadas en matem\u00e1ticas. Cuanto mayor sea el valor de y, m\u00e1s abajo estar\u00e1 el punto en la pantalla.</li> <li>Tama\u00f1o de la ventana: se define con <code>WIDTH</code> y <code>HEIGHT</code>. Por ejemplo, en una ventana de 800x600, el punto (800, 600) estar\u00eda en la esquina inferior derecha.</li> <li>Centro de la pantalla: se puede calcular con (<code>WIDTH</code> // 2, <code>HEIGHT</code> // 2).</li> </ul> <p>Cualquier elemento en Pygame Zero (como texto, formas o im\u00e1genes) se posiciona seg\u00fan este sistema. Por ejemplo, (100, 50) colocar\u00eda un elemento a 100 p\u00edxeles de la izquierda y a 50 p\u00edxeles de la parte superior.</p>"},{"location":"pygame_01.html#14-estructura-basica-de-un-juego","title":"1.4 Estructura b\u00e1sica de un juego","text":""},{"location":"pygame_01.html#141-dibujar-un-circulo-la-pantalla","title":"1.4.1 Dibujar un c\u00edrculo la pantalla","text":"<p>Vamos a empezar con algo sencillo: dibujar un c\u00edrculo en la pantalla de nuestro juego. Para ello, necesitas familiarizarte con dos elementos clave: la funci\u00f3n <code>draw()</code> y el objeto <code>screen</code>.</p> <ul> <li> <p><code>draw()</code> es la funci\u00f3n que dibuja todo lo que aparece en la pantalla (personajes, fondos, objetos, etc). No tienes que llamarla, Pygame Zero lo hace autom\u00e1ticamente cada vez que necesita actualizar el dibujo. </p> </li> <li> <p><code>screen</code> es como un \"lienzo\" donde dibujas todo. Cada vez que quieras mostrar algo, lo har\u00e1s a trav\u00e9s de este objeto y sus funciones asociadas (\u00a1tiene muchas!). </p> </li> </ul> <p>Para dibujar un c\u00edrculo, usamos la funci\u00f3n <code>screen.draw.circle()</code>, que acepta las coordenadas (x, y), el tama\u00f1o (radio) y el color del c\u00edrculo. Aqu\u00ed tienes un ejemplo:      </p> <pre><code># Importa la librer\u00eda\nimport pgzrun\n\n# Define el tama\u00f1o de la ventana del juego\nWIDTH = 800\nHEIGHT = 600\n\ndef draw():\n    screen.clear()  # Limpia la pantalla\n    screen.draw.circle((400, 300), 30, 'white')  # Dibuja un c\u00edrculo blanco\n\npgzrun.go()  # Inicia el juego\n</code></pre> <p>Ejercicio 1. * Cambia el color del c\u00edrculo y observa el resultado. * Modifica las coordenadas (x, y) para mover el c\u00edrculo a otra posici\u00f3n en la pantalla. * Prueba con diferentes radios para ver c\u00f3mo afecta el tama\u00f1o.</p>"},{"location":"pygame_01.html#142-dibujar-otras-formas-y-texto","title":"1.4.2 Dibujar otras formas y texto","text":"<p>Una vez que domines los c\u00edrculos, puedes experimentar con otras formas y texto. Aqu\u00ed tienes algunos comandos adicionales que puedes probar:</p> <ul> <li><code>screen.fill(color)</code>: llena la pantalla con un color s\u00f3lido.</li> <li><code>screen.draw.filled_circle((x, y), radio, color)</code>: dibuja un c\u00edrculo relleno.</li> <li><code>screen.draw.line((x1, y1), (x2, y2), color)</code>: dibuja una l\u00ednea entre dos puntos.</li> <li><code>screen.draw.rect(Rect((x, y), (ancho, alto)), color)</code>: dibuja un rect\u00e1ngulo con las dimensiones especificadas por (ancho, alto) en la posici\u00f3n (x, y).</li> <li><code>screen.draw.text(\"Texto\", (x, y), color='white', fontsize=40)</code>: escribe texto en la pantalla con el formato que le indiques: fontsize (tama\u00f1o del texto), color (color del texto), shadow (coordenada de desplazamiento del sombreado) y scolor para especificar el color de la sombra.</li> </ul> <p>Prueba el siguiente ejemplo, observa el resultado y d\u00f3nde se colocan las formas: </p> <pre><code># Importa la librer\u00eda\nimport pgzrun\n\n# Define el tama\u00f1o de la ventana del juego\nWIDTH = 800\nHEIGHT = 600\n\ndef draw():\n    screen.clear()  # Limpia la pantalla\n    screen.fill('skyblue')  # Pinta el fondo de azul cielo\n\n    # Dibuja un rect\u00e1ngulo\n    screen.draw.filled_rect(Rect((150, 200), (500, 50)), 'green')\n\n    # Dibuja un c\u00edrculo\n    screen.draw.filled_circle((400, 300), 50, 'orange')\n\n    # Dibuja l\u00edneas de un extremo al otro\n    screen.draw.line((0, 0), (WIDTH, HEIGHT), 'red')\n    screen.draw.line((0, HEIGHT), (WIDTH, 0), 'purple')\n\n    # Dibuja texto en la pantalla\n    screen.draw.text('\u00a1Bienvenidos a Pygame Zero!', (150, 100), color='white', fontsize=50, shadow=(2,2), scolor=\"#202020\")\n    screen.draw.text('Experimenta dibujando formas', (200, 450), color='yellow', fontsize=30)\n\npgzrun.go() # Inicia el juego\n</code></pre> <p>Ejercicio 2. * Cambia los colores y posiciones de cada forma. * Dibuja dos rect\u00e1ngulos y cambia su tama\u00f1o. * Dibuja una l\u00ednea roja y un c\u00edrculo amarillo. * Dibuja un texto en la parte superior. * A\u00f1ade texto en diferentes ubicaciones de la pantalla. </p>"},{"location":"pygame_01.html#143-mostrar-una-imagen","title":"1.4.3 Mostrar una imagen","text":"<p>Para mostrar una imagen, gu\u00e1rdala primero en una carpeta especial llamada images, ubicada en el mismo directorio que tu archivo de c\u00f3digo.</p> <ul> <li> <p>El nombre del archivo debe estar en min\u00fasculas y sin espacios. Si tiene varias palabras, usa guiones bajos (por ejemplo, mi_imagen.png).</p> </li> <li> <p>Para mostrar la imagen en pantalla, usa: <code>screen.blit('nombre_imagen', (x, y))</code>.</p> </li> </ul> <p>Descarga esta imagen y prueba este ejemplo:</p> <pre><code>import pgzrun\n\n# Definir el tama\u00f1o de la ventana del juego\nWIDTH = 800\nHEIGHT = 600\n\ndef draw():\n    screen.clear()  # Limpiar la pantalla\n    screen.fill('lightblue')  # Fondo color azul claro\n\n    # Mostrar la imagen divertida\n    screen.blit('mapache_genial.png', (220, 200))\n\n    # Texto para acompa\u00f1ar la imagen\n    screen.draw.text(\"\u00a1Mira esta imagen divertida!\", (200, 100), color='black', fontsize=40)\n\npgzrun.go() # Inicia el juego\n</code></pre> <p>Ejercicio 3. * Limpia la pantalla. * Rellena la pantalla con un color de fondo. * Carga una imagen en una posici\u00f3n espec\u00edfica</p>"},{"location":"pygame_01.html#144-agregando-movimiento","title":"1.4.4 Agregando movimiento","text":"<p>Ahora que ya sabes dibujar y mostrar im\u00e1genes, vamos a incorporar el movimiento. Para ello, utilizaremos la funci\u00f3n <code>update()</code>, que se ejecuta constantemente. Aqu\u00ed colocaremos la l\u00f3gica que controla el comportamiento del juego, como mover personajes, detectar colisiones, o cambiar el estado del juego.</p> <p>Ejemplo: moviendo el c\u00edrculo</p> <p>Vamos a modificar el c\u00f3digo para que el c\u00edrculo se mueva hacia la derecha.</p> <pre><code># Importa la librer\u00eda\nimport pgzrun\n\n# Define el tama\u00f1o de la ventana del juego\nWIDTH = 800\nHEIGHT = 600\n\n# Define la posici\u00f3n inicial del c\u00edrculo\ncircle_x = 400\ncircle_y = 300\n\ndef draw():\n    screen.clear()  # Limpia la pantalla\n    screen.draw.circle((circle_x, circle_y), 30, 'white')  # Dibuja el c\u00edrculo \n\ndef update():\n    global circle_x\n    circle_x += 2  # Mueve el c\u00edrculo 2 p\u00edxeles hacia la derecha en cada actualizaci\u00f3n\n\npgzrun.go()  # Inicia el juego\n</code></pre> <p>\u00a1Nuestro c\u00edrculo ya se est\u00e1 moviendo por la pantalla! Te explico algunos detalles: </p> <ul> <li>Coordenadas iniciales: las variables <code>circle_x</code> y <code>circle_y</code> definen las coordenadas iniciales del c\u00edrculo, coloc\u00e1ndolo en el centro de la pantalla.</li> <li>Funci\u00f3n <code>draw()</code>: dibuja el c\u00edrculo en la posici\u00f3n definida en las coordenadas <code>circle_x</code> y <code>circle_y</code>. </li> <li>Funci\u00f3n <code>update()</code>: incrementa <code>circle_x</code> en 2 p\u00edxeles cada vez que se ejecuta, moviendo el c\u00edrculo hacia la derecha.</li> <li>Uso de global: utilizamos <code>global circle_x</code> en <code>update()</code> para modificar <code>circle_x</code> dentro de la funci\u00f3n.</li> </ul> <p>Pygame Zero llama autom\u00e1ticamente a <code>draw()</code> y <code>update()</code> muchas veces por segundo para mantener el c\u00edrculo actualizado en pantalla.</p> <p>Ejemplo: mapache en movimiento</p> <p>Ahora que tenemos un c\u00edrculo en movimiento, vamos a darle vida a una imagen de una mapache para que se desplace de lado a lado en la pantalla. En este ejemplo, la imagen se mover\u00e1 hacia la derecha, y cuando llegue al borde derecho, reaparecer\u00e1 por el borde izquierdo, creando un efecto de desplazamiento continuo.</p> <pre><code>import pgzrun\n\n# Define el tama\u00f1o de la ventana del juego\nWIDTH = 800\nHEIGHT = 600\n\n# Define la posici\u00f3n inicial de la imagen\nmapache_x = 100\nmapache_y = 300\n\ndef draw():\n    screen.clear()  # Limpia la pantalla\n    screen.blit('mapache_genial', (mapache_x, mapache_y))  # Dibuja la imagen \n\ndef update():\n    global mapache_x\n    mapache_x += 2  # Mueve la imagen 2 p\u00edxeles hacia la derecha en cada actualizaci\u00f3n\n\n    # Si el mapache sale de la pantalla, vuelve hacia a la izquierda\n    if mapache_x &gt; WIDTH:\n        mapache_x = -100  # Hace que reaparezca desde el lado izquierdo\n\npgzrun.go()  # Iniciar el juego\n</code></pre> <p>En este c\u00f3digo, hemos logrado que el mapache salga de la pantalla por la derecha y aparezca por la izquierda. Pero, \u00bfqu\u00e9 pasa si queremos que se mueva de arriba hacia abajo y cambie de direcci\u00f3n al alcanzar el borde creando un efecto de \"rebote\"?</p> <p>Ejemplo: movimiento vertical con control de bordes</p> <p>En este ejemplo, animaremos una imagen de un mapache para que suba y baje dentro de los l\u00edmites de la pantalla. Cuando alcance el borde superior o inferior, cambiar\u00e1 de direcci\u00f3n autom\u00e1ticamente.</p> <p>Agregaremos una variable <code>velocidad_y</code> para representar la direcci\u00f3n y velocidad vertical. Cuando el mapache llegue al borde superior o inferior, invertiremos el valor de <code>velocidad_y</code>, logrando que rebote.</p> <pre><code># Importa las librer\u00edas necesarias\nimport pgzrun\nimport os\n\n# Centra la ventana del juego en la pantalla\nos.environ['SDL_VIDEO_CENTERED'] = '1'\n\n# Define el tama\u00f1o de la ventana del juego\nWIDTH = 800\nHEIGHT = 600\n\n# Carga la imagen y calcula su tama\u00f1o\nmapache_image = images.load('mapache_genial.png')\nmapache_ancho = mapache_image.get_width()\nmapache_alto = mapache_image.get_height()\n\n# Define la posici\u00f3n inicial de la imagen\nmapache_x = 0\nmapache_y = 0\nmapache_velocidad_y = 2  # Velocidad de movimiento vertical\n\ndef draw():\n    screen.clear()  # Limpia la pantalla\n    screen.blit('mapache_genial.png', (mapache_x, mapache_y))  # Dibuja la imagen \n\ndef update():\n    global mapache_y, mapache_velocidad_y\n\n    # Mueve la imagen en el eje Y \n    mapache_y += mapache_velocidad_y\n\n    # Si el mapache alcanza los l\u00edmites superior o inferior, invierte su direcci\u00f3n\n    if mapache_y &lt;= 0 or mapache_y &gt;= HEIGHT - mapache_alto:  # Ajuste seg\u00fan el tama\u00f1o de la imagen\n        mapache_velocidad_y = -mapache_velocidad_y  # Cambia la direcci\u00f3n vertical\n\npgzrun.go()  # Iniciar el juego\n</code></pre> <ul> <li> <p>Cargar la imagen: la imagen del mapache se carga con <code>images.load('mapache_genial.png')</code>, y luego usamos <code>get_width()</code> y <code>get_height()</code> para obtener sus dimensiones (mapache_ancho y mapache_alto). Esto es fundamental para controlar los bordes: al restar el alto de la imagen del l\u00edmite inferior (HEIGHT - mapache_alto), evitamos que el mapache se salga de la pantalla.</p> </li> <li> <p>Posici\u00f3n inicial y velocidad: mapache_x y mapache_y representan la posici\u00f3n inicial de la imagen. mapache_velocidad_y controla la velocidad y direcci\u00f3n del movimiento vertical. Un valor positivo hace que el mapache se mueva hacia abajo, mientras que un valor negativo lo hace subir.</p> </li> <li> <p>Funci\u00f3n <code>update()</code>: Aqu\u00ed es donde ocurre el movimiento:</p> <ul> <li>Movimiento vertical: mapache_y se incrementa o decrementa seg\u00fan mapache_velocidad_y.</li> <li>Control de bordes: comprobamos si mapache_y ha alcanzado el l\u00edmite superior (mapache_y &lt;= 0) o el l\u00edmite inferior (mapache_y &gt;= HEIGHT - mapache_alto). Si ha alcanzado uno de estos l\u00edmites, invertimos mapache_velocidad_y, haciendo que el mapache rebote.</li> </ul> </li> </ul> <p>Ejercicio 4.  * Modifica el c\u00f3digo para que el mapache tambi\u00e9n se mueva hacia los lados, rebotando en los bordes izquierdo y derecho de la pantalla. * A\u00f1ade un texto en pantalla que se mueva de derecha a izquierda. Cuando el texto alcance el borde izquierdo, haz que reaparezca en el borde derecho para crear un efecto de desplazamiento continuo. * Ajusta la velocidad del texto cambiando su velocidad y observa c\u00f3mo afecta al movimiento. * A\u00f1ade otro texto que se mueva de izquierda a derecha, pero que cambie de direcci\u00f3n al llegar a los bordes en lugar de reaparecer.</p> <p>IMPORTANTE: Si quieres que la ventana de Pygame Zero se abra centrada en la pantalla y evitar as\u00ed problemas de visualizaci\u00f3n, puedes a\u00f1adir las siguientes l\u00edneas al inicio de tu c\u00f3digo, antes de importar la biblioteca <code>pgzrun</code>:</p> <pre><code>import os\nos.environ['SDL_VIDEO_CENTERED'] = '1'\n</code></pre> <p>Esta configuraci\u00f3n hace que la ventana del juego se coloque autom\u00e1ticamente en el centro de la pantalla cada vez que ejecutes tu programa, garantizando que todos los elementos dibujados sean visibles.</p>"},{"location":"pygame_02.html","title":"2. Eventos y controles","text":"<p>En esta unidad, aprender\u00e1s a dar control al jugador sobre lo que sucede en el juego. Esto es fundamental para que el jugador pueda interactuar con el juego, como mover un personaje o hacer que reaccione al pulsar teclas espec\u00edficas o al hacer clic con el rat\u00f3n. Los eventos de teclado y rat\u00f3n son esenciales en casi cualquier tipo de juego.</p>"},{"location":"pygame_02.html#21-introduccion-a-los-eventos","title":"2.1. Introducci\u00f3n a los eventos","text":"<p>En Pygame Zero, los eventos son acciones que realiza el jugador, como pulsar una tecla o hacer clic con el rat\u00f3n. Podemos detectar estos eventos y programar acciones que respondan a ellos, lo que hace que el juego sea interactivo.</p> <p>Existen principalmente dos tipos de eventos en Pygame Zero: * Eventos de teclado: permiten que el jugador controle el juego usando teclas espec\u00edficas. * Eventos de rat\u00f3n: permiten realizar acciones al hacer clic en ciertas partes de la pantalla.</p>"},{"location":"pygame_02.html#22-controlando-objetos-con-el-teclado","title":"2.2 Controlando objetos con el teclado","text":"<p>Para detectar eventos de teclado, usamos el m\u00f3dulo keyboard de Pygame Zero. Este m\u00f3dulo permite comprobar si el jugador ha presionado una tecla espec\u00edfica y programar respuestas a esas acciones. </p> <p>Ejemplo 1. Mover un objeto en pantalla usando las teclas de flecha</p> <pre><code># Importar librer\u00edas necesarias\nimport pgzrun\nimport os\n\n# Centrar la ventana en el monitor\nos.environ['SDL_VIDEO_CENTERED'] = '1'\n\n# Dimensiones de la pantalla\nANCHO = 800\nALTO = 600\n\n# Posici\u00f3n inicial del personaje\njugador_x = 400\njugador_y = 300\n\ndef draw():\n    screen.clear()\n    screen.fill('lightblue')  # Fondo color azul claro\n    screen.draw.circle((jugador_x, jugador_y), 30, 'blue')  # Dibuja un c\u00edrculo que representa al personaje\n\ndef update():\n    global jugador_x, jugador_y\n\n    # Controles de movimiento usando las teclas de flecha\n    if keyboard.left:\n        jugador_x -= 5\n    if keyboard.right:\n        jugador_x += 5\n    if keyboard.up:\n        jugador_y -= 5\n    if keyboard.down:\n        jugador_y += 5\n\npgzrun.go() # Inicia el juego\n</code></pre> <p>Ejercicio 1.  * Crea una figura o imagen y haz que se mueva por la pantalla usando las teclas de flecha.  * Modifica el valor de desplazamiento (+= 5 o -= 5) para que se mueva m\u00e1s r\u00e1pido o m\u00e1s lento. * Prueba a mover la figura usando otras teclas, como W, A, S, D.</p>"},{"location":"pygame_02.html#23-controlando-objetos-con-el-raton","title":"2.3 Controlando objetos con el rat\u00f3n","text":"<p>Los eventos de rat\u00f3n permiten al jugador interactuar con objetos haciendo clic en ellos o moviendo el rat\u00f3n en la pantalla. Esto es \u00fatil para juegos en los que el jugador necesita seleccionar objetos o moverlos de acuerdo con la posici\u00f3n del rat\u00f3n.</p> <p>Pygame Zero usa la funci\u00f3n especial <code>on_mouse_down(pos)</code> para detectar un clic. La variable <code>pos</code> nos da la posici\u00f3n exacta donde ocurri\u00f3 el clic.</p> <p>Ejemplo 2. Cambiar la posici\u00f3n del personaje a otra con el rat\u00f3n</p> <p>En el siguiente ejemplo se muestra c\u00f3mo hacer que el personaje se traslade a la posici\u00f3n donde el jugador hace clic.</p> <pre><code># Importar librer\u00edas necesarias\nimport pgzrun\nimport os\n\n# Centrar la ventana en el monitor\nos.environ['SDL_VIDEO_CENTERED'] = '1'\n\n# Dimensiones de la pantalla\nANCHO = 800\nALTO = 600\n\n# Posici\u00f3n inicial del personaje\njugador_x = 400\njugador_y = 300\n\ndef draw():\n    screen.clear()\n    screen.fill('lightblue')  # Fondo color azul claro\n    screen.draw.circle((jugador_x, jugador_y), 30, 'blue')\n\ndef on_mouse_down(pos):\n    global jugador_x, jugador_y\n    jugador_x, jugador_y = pos  # Mueve el personaje a la posici\u00f3n del clic\n\npgzrun.go() # Inicia el juego\n</code></pre> <p>Ejercicio 2. * Modifica el c\u00f3digo del ejemplo para que el personaje cambie entre dos colores cada vez que hagas clic en la pantalla. Puedes seguir los siguientes pasos:       * Define una variable <code>color</code> al inicio del c\u00f3digo (por ejemplo, color = 'green').       * En la funci\u00f3n <code>on_mouse_down(pos)</code>, cambia el valor de <code>color</code> (por ejemplo, de 'green' a 'red' y viceversa).       * Usa la variable <code>color</code> en <code>draw()</code> para que el c\u00edrculo se dibuje con el color actual.</p> <p>Ejercicio 3.  * Modifica el c\u00f3digo del ejemplo para que el tama\u00f1o del personaje aumente cada vez que el jugador hace clic en la pantalla. Puedes establecer un tama\u00f1o m\u00e1ximo para que no crezca indefinidamente (if tama\u00f1o &gt; 60: tama\u00f1o = 30)</p> <p>Ejemplo 3. Desplazarse hacia un punto con movimiento gradual</p> <p>Vamos a ver c\u00f3mo hacer que el personaje se desplace hacia el punto donde el jugador hace clic, pero de forma gradual, como si estuviera \"caminando\" o \"dirigi\u00e9ndose\" hacia all\u00ed. </p> <p>Para lograrlo: 1. Calcula la direcci\u00f3n hacia el punto objetivo, hallando la diferencia en x (dx) y en y (dy) entre el personaje y el punto de destino. 2. Usa el teorema de Pit\u00e1goras para calcular la distancia entre el personaje y el destino. Seg\u00fan el teorema de Pit\u00e1goras, la distancia (d) entre los puntos se calcula con la f\u00f3rmula:</p> <p>Esta distancia nos ayuda a ajustar el movimiento en cada eje (x e y) de forma proporcional, logrando que el personaje se desplace en l\u00ednea recta y a una velocidad constante.</p> <p>En Python, podemos calcular la ra\u00edz cuadrada utilizando la funci\u00f3n <code>sqrt()</code> de la librer\u00eda math. Para acceder a <code>math.sqrt()</code> y otros m\u00e9todos matem\u00e1ticos, debemos importar math al inicio del programa.</p> <ol> <li>Avanza en esa direcci\u00f3n en peque\u00f1os pasos, de forma que el personaje se desplace suavemente hacia el destino.</li> </ol> <p>En el ejemplo siguiente se muestra este efecto: </p> <pre><code># Importar librer\u00edas necesarias\nimport pgzrun\nimport os\nimport math\n\n# Centrar la ventana en el monitor\nos.environ['SDL_VIDEO_CENTERED'] = '1'\n\n# Dimensiones de la pantalla\nANCHO = 800\nALTO = 600\n\n# Posici\u00f3n inicial del personaje\njugador_x = 400\njugador_y = 300\n\n# Variables de destino\ndestino_x = jugador_x\ndestino_y = jugador_y\n\n# Velocidad de movimiento del personaje\nvelocidad = 3\n\ndef draw():\n    screen.clear()\n    screen.fill('lightblue')  # Fondo color azul claro\n    screen.draw.circle((jugador_x, jugador_y), 30, 'blue')  # Dibuja el personaje\n\ndef update():\n    global jugador_x, jugador_y\n\n    # Calcula la distancia hacia el punto objetivo\n    dx = destino_x - jugador_x\n    dy = destino_y - jugador_y\n    distancia = math.sqrt(dx**2 + dy**2)\n\n    # Si el personaje no est\u00e1 en el destino, se mueve en esa direcci\u00f3n\n    if distancia &gt; velocidad:  # Para que no se pase del destino\n        jugador_x += velocidad * (dx / distancia)\n        jugador_y += velocidad * (dy / distancia)\n\ndef on_mouse_down(pos):\n    global destino_x, destino_y\n    destino_x, destino_y = pos  # Actualiza el destino a la posici\u00f3n del clic\n\npgzrun.go() # Inicia el juego\n</code></pre> <p>\u00a1Nuestro objeto se dirige a su destino a paso firme y constante! Te explico algunos detalles: </p> <ul> <li>Variables de posici\u00f3n inicial y destino:<ul> <li><code>jugador_x</code> y <code>jugador_y</code> definen la posici\u00f3n inicial del personaje.</li> <li><code>destino_x</code> y <code>destino_y</code> son las coordenadas del destino al que el personaje se dirigir\u00e1 cuando el jugador haga clic.</li> </ul> </li> <li>Evento de rat\u00f3n:<ul> <li>Cada vez que el jugador hace clic, <code>on_mouse_down(pos)</code> actualiza <code>destino_x</code> y <code>destino_y</code> a la posici\u00f3n del clic. Esto establece el destino y activa el movimiento del personaje hacia ese punto.</li> </ul> </li> <li>C\u00e1lculo de la distancia y direcci\u00f3n usando el teorema de Pit\u00e1goras<ul> <li>Para que el personaje se desplace correctamente, necesitamos calcular la distancia y direcci\u00f3n hacia el destino aplicando el teorema de Pit\u00e1goras.</li> </ul> </li> <li>Desplazamiento gradual hacia el destino:<ul> <li>Si la distancia entre el personaje y el destino es mayor que su velocidad, significa que el personaje a\u00fan no ha llegado y debe seguir avanzando hacia ese punto.</li> <li>Para moverlo correctamente en cada eje (x e y):<ul> <li>Dividimos dx y dy (las diferencias en x e y) por la distancia total. Esto nos indica la direcci\u00f3n exacta en la que debe moverse el personaje.</li> <li>Multiplicamos esta direcci\u00f3n por la velocidad, lo que permite que el personaje avance en peque\u00f1os pasos hacia el destino.  </li> </ul> </li> </ul> </li> </ul> <p>Ejercicio 4.  * Cambia la velocidad del personaje para ver c\u00f3mo afecta al movimiento. Prueba diferentes valores de speed y observa los cambios. * Agrega un segundo personaje que tambi\u00e9n se mueva hacia donde el jugador hace clic, pero de manera m\u00e1s lenta. </p>"},{"location":"pygame_02.html#4-control-avanzado-combinando-teclado-y-raton","title":"4. Control avanzado: combinando teclado y rat\u00f3n","text":"<p>Podemos combinar los controles de teclado y rat\u00f3n para hacer el juego a\u00fan m\u00e1s din\u00e1mico. Por ejemplo, el jugador podr\u00eda moverse usando el teclado, pero disparar con el rat\u00f3n en un juego de disparos.</p> <p>Ejemplo 4. Mover personaje con las teclas y disparar en una \u00fanica direcci\u00f3n con el rat\u00f3n</p> <p>Para gestionar los disparos en el juego, utilizamos una lista llamada <code>disparos</code>. Cada vez que el jugador hace clic, se a\u00f1ade un nuevo disparo a esta lista. Cada disparo tiene sus propias coordenadas en x e y, lo que permite que se muevan independientemente unos de otros.</p> <ul> <li>A\u00f1adir disparos: cada vez que el jugador hace clic, se crea un nuevo disparo en la posici\u00f3n del personaje y se a\u00f1ade a la lista.</li> <li>Mover disparos: en cada actualizaci\u00f3n (update), todos los disparos se mueven hacia arriba en la pantalla, simulando un disparo.</li> <li>Eliminar disparos: si un disparo llega a la parte superior de la pantalla, se elimina de la lista para liberar memoria y mantener el juego ordenado.</li> </ul> <pre><code># Importar librer\u00edas necesarias\nimport pgzrun\nimport os\nimport math\n\n# Centrar la ventana en el monitor\nos.environ['SDL_VIDEO_CENTERED'] = '1'\n\n# Dimensiones de la pantalla\nANCHO = 800\nALTO = 600\n\n# Posici\u00f3n inicial del personaje\njugador_x = 400\njugador_y = 300\n\n# Lista para almacenar los disparos\ndisparos = []\n\ndef draw():\n    screen.clear()\n    screen.fill('lightblue')  # Fondo color azul claro\n    # Dibujar el personaje como un c\u00edrculo azul\n    screen.draw.circle((jugador_x, jugador_y), 30, 'blue')\n    # Dibujar cada disparo como un c\u00edrculo rojo peque\u00f1o\n    for disparo in disparos:\n        screen.draw.circle(disparo, 5, 'red')\n\ndef update():\n    global jugador_x, jugador_y\n    # Mover el personaje con las flechas del teclado\n    if keyboard.left:\n        jugador_x -= 5\n    if keyboard.right:\n        jugador_x += 5\n    if keyboard.up:\n        jugador_y -= 5\n    if keyboard.down:\n        jugador_y += 5\n\n    # Mover los disparos hacia arriba\n    for disparo in disparos:\n        disparo[1] -= 10\n\n    # Eliminar los disparos que salen de la pantalla\n    for disparo in disparos:\n        if disparo[1] &lt;= 0:\n            disparos.remove(disparo)\n\ndef on_mouse_down(pos):\n    # A\u00f1adir un nuevo disparo en la posici\u00f3n del personaje\n    disparos.append([jugador_x, jugador_y])\n\npgzrun.go() # Inicia el juego\n</code></pre> <p>Ejemplo 5. Mover personaje con las teclas y disparar en una varias direcciones con el rat\u00f3n</p> <p>En este ejemplo, el personaje se mueve con las teclas de flecha y dispara en la direcci\u00f3n del rat\u00f3n cuando el jugador hace clic. Este tipo de control es com\u00fan en juegos de disparos, donde el jugador puede moverse en una direcci\u00f3n y disparar en otra.</p> <p>Para gestionar los disparos, utilizamos listas para almacenar las propiedades de cada disparo, como su posici\u00f3n y direcci\u00f3n. Esto nos permite tener m\u00faltiples disparos en pantalla, cada uno avanzando en l\u00ednea recta hacia donde el jugador hizo clic.</p> <pre><code># Importar librer\u00edas necesarias\nimport pgzrun\nimport math\nimport os\n\n# Centrar la ventana en el monitor\nos.environ['SDL_VIDEO_CENTERED'] = '1'\n\n# Dimensiones de la pantalla\nANCHO = 800\nALTO = 600\n\n# Posici\u00f3n inicial del personaje\njugador_x = 400\njugador_y = 300\n\n# Listas para almacenar las propiedades de cada disparo\ndisparos_x = []  # Posiciones x de los disparos\ndisparos_y = []  # Posiciones y de los disparos\ndisparos_dx = []  # Direcci\u00f3n x de los disparos\ndisparos_dy = []  # Direcci\u00f3n y de los disparos\ndisparos_velocidad = 5  # Velocidad constante para todos los disparos\n\ndef draw():\n    screen.clear()\n    screen.fill('lightblue')  # Fondo color azul claro\n    # Dibujar el personaje como un c\u00edrculo azul\n    screen.draw.circle((jugador_x, jugador_y), 30, 'blue')\n    # Dibujar cada disparo como un c\u00edrculo rojo peque\u00f1o\n    for i in range(len(disparos_x)):\n        screen.draw.circle((disparos_x[i], disparos_y[i]), 5, 'red')\n\ndef update():\n    global jugador_x, jugador_y, disparos_x, disparos_y, disparos_dx, disparos_dy\n\n    # Mover el personaje con las flechas del teclado\n    if keyboard.left:\n        jugador_x -= 5\n    if keyboard.right:\n        jugador_x += 5\n    if keyboard.up:\n        jugador_y -= 5\n    if keyboard.down:\n        jugador_y += 5\n\n    # Mover cada disparo en su direcci\u00f3n\n    for i in range(len(disparos_x)):\n        disparos_x[i] += disparos_dx[i] * disparos_velocidad\n        disparos_y[i] += disparos_dy[i] * disparos_velocidad\n\n    # Crear listas temporales para almacenar solo los disparos dentro de la pantalla\n    nuevos_disparos_x = []\n    nuevos_disparos_y = []\n    nuevos_disparos_dx = []\n    nuevos_disparos_dy = []\n\n    for i in range(len(disparos_x)):\n        if 0 &lt;= disparos_x[i] &lt;= ANCHO and 0 &lt;= disparos_y[i] &lt;= ALTO:\n            # A\u00f1adir solo los disparos dentro de la pantalla a las listas temporales\n            nuevos_disparos_x.append(disparos_x[i])\n            nuevos_disparos_y.append(disparos_y[i])\n            nuevos_disparos_dx.append(disparos_dx[i])\n            nuevos_disparos_dy.append(disparos_dy[i])\n\n    # Actualizar las listas de disparos\n    disparos_x = nuevos_disparos_x\n    disparos_y = nuevos_disparos_y\n    disparos_dx = nuevos_disparos_dx\n    disparos_dy = nuevos_disparos_dy\n\ndef on_mouse_down(pos):\n    # Calcular la direcci\u00f3n del disparo hacia el punto donde se hizo clic\n    dx = pos[0] - jugador_x\n    dy = pos[1] - jugador_y\n    distancia = math.sqrt(dx**2 + dy**2)\n\n    # Ajustar la direcci\u00f3n para que el disparo siga una l\u00ednea recta hacia el clic\n    dx = dx / distancia\n    dy = dy / distancia\n\n    # A\u00f1adir el nuevo disparo a cada lista\n    disparos_x.append(jugador_x)\n    disparos_y.append(jugador_y)\n    disparos_dx.append(dx)\n    disparos_dy.append(dy)\n\npgzrun.go()  # Inicia el juego\n</code></pre> <p>Ejercicio 5. Modifica el c\u00f3digo para que el color de cada disparo cambie en funci\u00f3n de la direcci\u00f3n del clic.    * Si el clic est\u00e1 a la derecha del personaje, el disparo debe ser azul.   * Si el clic est\u00e1 a la izquierda del personaje, el disparo debe ser rojo.</p> <p>PISTAS:   * A\u00f1ade una lista <code>disparos_color</code> para almacenar el color de cada disparo.   * En la funci\u00f3n <code>on_mouse_down</code>, determina el color del disparo seg\u00fan la posici\u00f3n del clic en relaci\u00f3n con la posici\u00f3n del personaje.   * Usa <code>screen.draw.circle</code> en la funci\u00f3n draw para dibujar cada disparo con su color correspondiente.</p> <p>Ejercicio 6. Haz que solo pueda haber un m\u00e1ximo de 5 disparos en pantalla a la vez. Si ya hay 5 disparos, el personaje no podr\u00e1 disparar hasta que uno de ellos desaparezca de la pantalla.</p>"},{"location":"pygame_03.html","title":"3. Colisiones b\u00e1sicas","text":"<p>En los videojuegos, la detecci\u00f3n de colisiones es fundamental para la interacci\u00f3n entre los elementos del juego, como cuando un personaje recoge un objeto, choca con un obst\u00e1culo o dispara a un enemigo. En esta secci\u00f3n, aprenderemos los principios b\u00e1sicos para detectar colisiones entre objetos en pantalla.</p>"},{"location":"pygame_03.html#31-colisiones-circulares-usando-distancias","title":"3.1 Colisiones circulares usando distancias","text":"<p>Para detectar colisiones entre dos objetos de forma circular (como un personaje y una moneda), podemos calcular la distancia entre sus centros y compararla con el radio de los objetos. Si la distancia es menor o igual a la suma de los radios, decimos que los objetos est\u00e1n colisionando.</p> <p>Ejemplo 1: Colisi\u00f3n entre el jugador y un tesoro</p> <p>Veamos un ejemplo donde un dinosaurio recoge un brocoli al acercarse a \u00e9l e incrementa su puntuaci\u00f3n.</p> <pre><code># Importar librer\u00edas necesarias\nimport pgzrun\nimport math\nimport random\nimport pygame\n\n# Dimensiones de la pantalla\nANCHO = 800\nALTO = 600\n\n# Posiciones iniciales del jugador y el tesoro\njugador_x = 100\njugador_y = 100\ntesoro_x = 400\ntesoro_y = 300\n\n# Puntuaci\u00f3n del jugador\npuntuacion = 0\n\n# Cargar las im\u00e1genes y calcular sus radios una sola vez\nimagen_jugador = pygame.image.load(\"images/dinosaurio.png\")  # Ruta de la imagen del jugador\nancho_jugador = imagen_jugador.get_width()\nalto_jugador = imagen_jugador.get_height()\nradio_jugador = min(ancho_jugador, alto_jugador) // 2  # Calcular el radio del jugador\n\nimagen_tesoro = pygame.image.load(\"images/brocoli.png\")  # Ruta de la imagen del tesoro\nancho_tesoro = imagen_tesoro.get_width()\nalto_tesoro = imagen_tesoro.get_height()\nradio_tesoro = min(ancho_tesoro, alto_tesoro) // 2  # Calcular el radio del tesoro\n\ndef draw():\n    screen.clear()\n    screen.fill('lightblue')\n\n    # Dibujar el jugador\n    screen.blit(imagen_jugador, (jugador_x, jugador_y))\n\n    # Dibujar el tesoro\n    screen.blit(imagen_tesoro, (tesoro_x, tesoro_y))\n\n    # Mostrar la puntuaci\u00f3n\n    screen.draw.text(f'Puntuaci\u00f3n: {puntuacion}', (10, 10), color='black', fontsize=30)\n\ndef update():\n    global jugador_x, jugador_y, puntuacion, tesoro_x, tesoro_y\n\n    # Controles del jugador con las flechas\n    if keyboard.left:\n        jugador_x -= 5\n    if keyboard.right:\n        jugador_x += 5\n    if keyboard.up:\n        jugador_y -= 5\n    if keyboard.down:\n        jugador_y += 5\n\n    # Calcular la distancia entre el jugador y el tesoro\n    distancia = math.sqrt((jugador_x - tesoro_x) ** 2 + (jugador_y - tesoro_y) ** 2)\n\n    # Detectar colisi\u00f3n\n    if distancia &lt;= (radio_jugador + radio_tesoro):\n        puntuacion += 1  # Aumentar la puntuaci\u00f3n\n        # Mover el tesoro a una nueva posici\u00f3n al azar\n        tesoro_x = random.randint(0, ANCHO - ancho_tesoro)\n        tesoro_y = random.randint(0, ALTO - alto_tesoro)\n\npgzrun.go()\n</code></pre> <p>Cambiar el tama\u00f1o de una imagen en Pygame Zero</p> <p>En Pygame Zero, no hay una funci\u00f3n directa para cambiar el tama\u00f1o de una imagen, ya que est\u00e1 dise\u00f1ado para simplificar el proceso de desarrollo de juegos y no incluye toda la funcionalidad de Pygame completa. Sin embargo, puedes cambiar el tama\u00f1o de una imagen utilizando la biblioteca pygame junto con <code>pygame.transform.scale()</code> y luego usar Pygame Zero para mostrar la imagen escalada.</p> <pre><code># Importar librer\u00edas necesarias\nimport pygame\n\n# Carga la imagen y la escala\nimagen_original = pygame.image.load(\"images/dinosaurio.png\")  \n# Cambia el tama\u00f1o de la imagen a 100x100 p\u00edxeles\nimagen_escalada = pygame.transform.scale(imagen_original, (100, 100))  \n</code></pre> <p>Ejercicio 1. Haz que el br\u00f3coli caiga desde la parte superior de la pantalla. Puedes ajustar la posici\u00f3n <code>y</code> del br\u00f3coli en cada actualizaci\u00f3n. As\u00ed, cada vez que se llama a <code>update()</code>, el br\u00f3coli se desplazar\u00e1 hacia abajo. Cuando llegue al final de la pantalla, puedes hacer que reaparezca en la parte superior o en una posici\u00f3n aleatoria en el eje x.</p>"},{"location":"pygame_04.html","title":"4. Sonido, temporizaci\u00f3n y estados de juego","text":"<p>En esta unidad, aprender\u00e1s a incorporar elementos avanzados que har\u00e1n tu juego mucho m\u00e1s interesante. Estos elementos incluyen:</p> <ul> <li>Agregar un fondo visual para mejorar la ambientaci\u00f3n del juego.</li> <li>Incluir sonidos que den feedback al jugador.</li> <li>Programar eventos que ocurran autom\u00e1ticamente despu\u00e9s de un intervalo.</li> <li>Implementar diferentes estados del juego, como una pantalla de inicio, de juego y de fin, para mejorar la estructura general del juego.</li> </ul> <p>Construiremos estos elementos sobre el ejemplo del dinosaurio que recoge br\u00f3coli, paso a paso. \u00a1Comencemos!</p> <p>Puedes descargar aqu\u00ed las im\u00e1genes y sonidos utilizados en los ejemplos.</p>"},{"location":"pygame_04.html#41-dibujar-un-fondo-en-el-juego","title":"4.1 Dibujar un fondo en el juego","text":"<p>Lo primero que haremos es a\u00f1adir un fondo. Este elemento b\u00e1sico ayuda a crear un ambiente en el juego, haciendo que se vea m\u00e1s completo y atractivo.</p> <p>Para dibujar un fondo en Pygame Zero:</p> <ol> <li>Guarda la imagen del fondo en una carpeta llamada images, ubicada en el mismo directorio donde guardas el archivo de tu c\u00f3digo.</li> <li>Aseg\u00farate de que la imagen sea compatible con el tama\u00f1o de tu ventana de juego (800x600 en este ejemplo).</li> <li>Usa <code>screen.blit(\"nombre_de_imagen\", (0, 0))</code> en la funci\u00f3n <code>draw()</code> para colocar el fondo en la pantalla.</li> </ol> <p>Ejemplo: agregar el fondo al juego</p> <pre><code># Carga la imagen de fondo\nimagen_fondo = pygame.image.load(\"images/fondo_juego.png\")  \n\ndef draw():\n    screen.clear()    \n\n    # Dibujar el fondo        \n    screen.blit(imagen_fondo, (0, 0))\n\n    # Dibujar el jugador\n    screen.blit(imagen_jugador, (jugador_x, jugador_y))\n\n    ... \n</code></pre> <p>Ejercicio 1. Cambia la imagen de fondo para experimentar con diferentes temas visuales y observa c\u00f3mo afecta a la ambientaci\u00f3n del juego.</p>"},{"location":"pygame_04.html#42-agregar-sonido-al-juego","title":"4.2 Agregar sonido al juego","text":"<p>El sonido es fundamental en los videojuegos, ya que refuerza las interacciones y hace que el juego sea m\u00e1s din\u00e1mico. En este paso, a\u00f1adiremos un efecto de sonido para que se reproduzca cada vez que el dinosaurio recoja un br\u00f3coli.</p> <ol> <li>Guarda los archivos de sonido en formato .wav o .ogg en una carpeta sounds dentro del directorio de tu proyecto.</li> <li>Usa <code>sounds.nombre_del_sonido.play()</code> para reproducir el sonido en el momento deseado. Por ejemplo, si tienes un fichero de audio llamado comer.wav tendr\u00edas que poner <code>sounds.comer.play()</code> donde quieras que se reproduzca. En nuestro caso, nos interesa ponerlo dentro de la funci\u00f3n <code>update()</code> justo cuando se detecta la colisi\u00f3n con el brocoli.</li> </ol> <p>Ejemplo: agregar sonido al recoger el brocoli</p> <pre><code>def update():\n    ... \n    # Detectar colisi\u00f3n\n    if distancia &lt;= (radio_jugador + radio_tesoro):\n        puntuacion += 1  # Aumentar la puntuaci\u00f3n\n        sounds.comer.play()\n        # Mover el tesoro a una nueva posici\u00f3n al azar\n        tesoro_x = random.randint(0, WIDTH - ancho_tesoro)\n        tesoro_y = random.randint(0, HEIGHT - alto_tesoro)\n</code></pre> <p>Ejercicio 2. Cambia el sonido por uno diferente o a\u00f1ade otros para diferentes situaciones (por ejemplo, que alcanze el borde de la pantalla o cuando llegue a 10 puntos). Puedes visitar Pixabay Sounds para buscar m\u00e1s sonidos. Recuerda que el archivo de audio solo puede ser .wav o .ogg. Puedes utilizar Audacity para covertir .mp3 a .wav o buscar por Internet alg\u00fan conversor de audio online.</p>"},{"location":"pygame_04.html#43-programar-eventos-temporales-con-clockschedule_unique","title":"4.3 Programar eventos temporales con clock.schedule_unique()","text":"<p>A veces queremos que ciertos elementos se activen solo durante unos segundos o que se muevan de forma autom\u00e1tica despu\u00e9s de un intervalo de tiempo. En Pygame Zero, podemos programar estos eventos con <code>clock.schedule_unique()</code>.</p> <p>Ejemplo: mostrar un mensaje temporal al recoger el br\u00f3coli</p> <p>Queremos que aparezca un mensaje diciendo \"\u00a1Br\u00f3coli recogido!\" cada vez que el dinosaurio se coma un br\u00f3coli, y que este mensaje desaparezca despu\u00e9s de 2 segundos.</p> <pre><code># Variable para mensaje temporal\nmensaje = \"\"\n\ndef draw():\n    screen.clear()\n\n    # Dibujar el fondo\n    screen.blit(\"imagen_fondo.png\", (0, 0))\n\n    # Dibujar el dinosaurio y el br\u00f3coli\n    screen.blit(\"dino.png\", (jugador_x, jugador_y))\n    screen.blit(\"brocoli.png\", (tesoro_x, tesoro_y))\n\n    # Mostrar la puntuaci\u00f3n\n    screen.draw.text(f'Puntuaci\u00f3n: {puntuacion}', (10, 10), color='black', fontsize=30)\n\n    # Mostrar el mensaje temporal si existe\n    if mensaje:\n        screen.draw.text(mensaje, (WIDTH // 2 - 100, HEIGHT // 2), color=\"white\", fontsize=40)\n\ndef mostrar_mensaje(texto):\n    global mensaje\n    mensaje = texto\n    # Programar el borrado del mensaje despu\u00e9s de 2 segundos\n    clock.schedule_unique(borrar_mensaje, 2)\n\ndef borrar_mensaje():\n    global mensaje\n    mensaje = \"\"  # Limpia el mensaje despu\u00e9s de 2 segundos\n\n... \n</code></pre> <p>La funci\u00f3n <code>mostrar_mensaje()</code> debe ser llamada cada vez que el dinosaurio recoge un br\u00f3coli, para mostrar el mensaje temporal \"\u00a1Br\u00f3coli recogido!\" y luego hacer que desaparezca despu\u00e9s de unos segundos</p> <pre><code>def update():\n    global jugador_x, jugador_y, puntuacion, tesoro_x, tesoro_y, estado_juego\n\n    if estado_juego == \"jugando\":\n        # Movimiento del jugador\n        if keyboard.left:\n            jugador_x -= 5\n        if keyboard.right:\n            jugador_x += 5\n        if keyboard.up:\n            jugador_y -= 5\n        if keyboard.down:\n            jugador_y += 5\n\n        # Detectar colisi\u00f3n entre el dinosaurio y el br\u00f3coli\n        distancia = math.sqrt((jugador_x - tesoro_x) ** 2 + (jugador_y - tesoro_y) ** 2)\n        if distancia &lt; 50:\n            puntuacion += 1\n            sounds.recoger.play()  # Reproduce el sonido de recogida\n            mostrar_mensaje(\"\u00a1Br\u00f3coli recogido!\")  # Llama a la funci\u00f3n mostrar_mensaje() para mostrar el mensaje\n            # Mover el tesoro a una nueva posici\u00f3n al azar\n            brocoli_x = random.randint(0, WIDTH - ancho_brocoli)\n            brocoli_y = random.randint(0, HEIGHT - alto_brocoli)\n</code></pre> <p>Para hacerlo m\u00e1s interesante, podemos hacer que el brocoli cambie de sitio cada 10 segundos. Crea una funci\u00f3n llamada <code>mover_brocoli()</code> que calcule una nueva posici\u00f3n aleatoria transcurrido ese tiempo.</p> <pre><code>def mover_brocoli():\n    global brocoli_x, brocoli_y\n    brocoli_x = random.randint(0, WIDTH - 50)\n    brocoli_y = random.randint(0, HEIGHT - 50)\n    clock.schedule_unique(mover_brocoli, 10)\n</code></pre> <p>Ejercicio 3. Cambia los tiempos y observa la diferencia</p>"},{"location":"pygame_04.html#44-implementar-estados-de-juego","title":"4.4 Implementar estados de juego","text":"<p>Para mejorar la estructura del juego, implementaremos diferentes estados que controlan qu\u00e9 se muestra y c\u00f3mo responde el juego en cada momento. Los estados incluyen:</p> <ul> <li>Inicio: una pantalla de bienvenida con instrucciones.</li> <li>Juego: la pantalla principal donde el dinosaurio recoge br\u00f3colis.</li> <li>Fin: una pantalla final que muestra la puntuaci\u00f3n total y la opci\u00f3n de reiniciar.</li> </ul> <p>Ejemplo: agregar estados al juego</p> <p>Usaremos una variable <code>estado_juego</code> para almacenar el estado actual. Esto nos permitir\u00e1 cambiar entre los diferentes estados y controlar qu\u00e9 se muestra en cada pantalla.</p> <pre><code># Estado del juego: \"inicio\", \"jugando\", \"fin\"\nestado_juego = \"inicio\"\n\ndef draw():\n    screen.clear()\n\n    if estado_juego == \"inicio\":\n        # Pantalla de inicio\n        screen.blit(imagen_fondo, (0, 0))\n        screen.draw.text(\"\u00a1Bienvenido al Juego del Dinosaurio y el Br\u00f3coli!\", (100, 150), color=\"white\", fontsize=40)\n        screen.draw.text(\"Presiona Enter para comenzar\", (200, 300), color=\"yellow\", fontsize=30)\n    elif estado_juego == \"jugando\":\n        # Pantalla del juego en progreso\n        screen.blit(imagen_fondo, (0, 0))\n        screen.blit(imagen_dino, (jugador_x, jugador_y))\n        screen.blit(imagen_brocoli, (tesoro_x, tesoro_y))\n        screen.draw.text(f'Puntuaci\u00f3n: {puntuacion}', (10, 10), color='black', fontsize=30)\n        if mensaje:\n            screen.draw.text(mensaje, (WIDTH // 2 - 100, HEIGHT // 2), color=\"white\", fontsize=40)\n    elif estado_juego == \"fin\":\n        # Pantalla de fin del juego\n        screen.blit(imagen_fondo, (0, 0))\n        screen.draw.text(\"\u00a1Fin del Juego!\", (300, 150), color=\"red\", fontsize=50)\n        screen.draw.text(f\"Puntuaci\u00f3n final: {puntuacion}\", (300, 250), color=\"white\", fontsize=40)\n        screen.draw.text(\"Presiona R para reiniciar\", (250, 400), color=\"yellow\", fontsize=30)\n\ndef update():\n    global jugador_x, jugador_y, puntuacion, tesoro_x, tesoro_y, estado_juego\n\n    if estado_juego == \"jugando\":\n        # Condici\u00f3n de fin del juego\n        if puntuacion &gt;= 10:\n            estado_juego = \"fin\"\n\n        # Controles del jugador con las flechas\n        if keyboard.left:\n            jugador_x -= 5\n        if keyboard.right:\n            jugador_x += 5\n        if keyboard.up:\n            jugador_y -= 5\n        if keyboard.down:\n            jugador_y += 5\n\n        # Calcular la distancia entre el jugador y el tesoro\n        distancia = math.sqrt((jugador_x - tesoro_x) ** 2 + (jugador_y - tesoro_y) ** 2)\n\n        # Detectar colisi\u00f3n\n        if distancia &lt;= (radio_jugador + radio_tesoro):\n            puntuacion += 1  # Aumentar la puntuaci\u00f3n\n            sounds.comer.play()\n            # Mover el tesoro a una nueva posici\u00f3n al azar\n            tesoro_x = random.randint(0, WIDTH - ancho_tesoro)\n            tesoro_y = random.randint(0, HEIGHT - alto_tesoro)\n</code></pre> <p>Por \u00faltimo vamos a establecer una l\u00f3gica para navegar entre los diferentes estados del juego:</p> <ul> <li>Pulsar enter en la pantalla de inicio: inicia el juego y configura las variables principales (posici\u00f3n del dinosaurio y puntuaci\u00f3n) para un nuevo comienzo.</li> <li>Pulsar R en la pantalla de fin: lleva al jugador de vuelta a la pantalla de inicio, permiti\u00e9ndole reiniciar el juego.</li> </ul> <pre><code>def on_key_down(key):\n    global estado_juego, jugador_x, jugador_y, puntuacion\n    if estado_juego == \"inicio\" and key == keys.RETURN:\n        estado_juego = \"jugando\"\n        jugador_x, jugador_y = 100, 100\n        puntuacion = 0\n        mover_brocoli()\n    elif estado_juego == \"fin\" and key == keys.R:\n        estado_juego = \"inicio\"\n</code></pre> <p>Ejercicio 4. Aumenta la dificultad del juego  * Cada vez que el jugador recoge un br\u00f3coli, aumenta la velocidad de movimiento del dinosaurio en 1 punto.  * Define una variable <code>velocidad</code> para el movimiento del dinosaurio y aumenta su valor en <code>update()</code> cuando el jugador recoge un br\u00f3coli.</p> <p>Ejercicio 5. Haz que el brocoli caiga desde la parte superior de la pantalla. En lugar de que el br\u00f3coli aparezca en una posici\u00f3n aleatoria fija, vamos a hacer que caiga continuamente desde la parte superior de la pantalla. Cada vez que llegue al suelo (parte inferior de la pantalla) o que el dinosaurio lo recoja, el br\u00f3coli volver\u00e1 a caer desde una nueva posici\u00f3n aleatoria en la parte superior. * Define una velocidad vertical para el br\u00f3coli. * Haz que el br\u00f3coli se mueva hacia abajo en cada actualizaci\u00f3n de la funci\u00f3n update(). * Si el br\u00f3coli llega a la parte inferior de la pantalla sin ser recogido, vuelve a colocarlo en una posici\u00f3n aleatoria en la parte superior. * Si el dinosaurio recoge el br\u00f3coli, reposici\u00f3nalo en la parte superior tambi\u00e9n y aumenta la puntuaci\u00f3n.</p>"},{"location":"pygame_05.html","title":"5. Mecanicas de juego: saltos y enemigos","text":"<p>En esta unidad aprenderemos a implementar mec\u00e1nicas b\u00e1sicas de juego relacionadas con saltos, plataformas, y enemigos. </p>"},{"location":"pygame_05.html#51-mecanica-de-saltos","title":"5.1 Mec\u00e1nica de saltos","text":"<p>El salto es una de las mec\u00e1nicas m\u00e1s comunes en los videojuegos. Para implementarlo necesitamos considerar:</p> <ul> <li>Un sistema de gravedad que tire del personaje hacia abajo.</li> <li>Una fuerza inicial que impulse al personaje hacia arriba.</li> <li>Condiciones que determinen cu\u00e1ndo el personaje puede aterrizar.</li> </ul>"},{"location":"pygame_05.html#511-crear-un-personaje-que-pueda-saltar","title":"5.1.1 Crear un personaje que pueda saltar","text":"<p>En este apartado, haremos que un personaje salte y aterrice correctamente. El objetivo es que cuando el jugador presione la tecla de salto (la que queramos), una fuerza inicial lo impulse hacia arriba. A continuaci\u00f3n, la gravedad simular\u00e1 la fuerza que tira del personaje hacia abajo, haci\u00e9ndolo regresar al suelo y detenerse cuando aterrice.</p> <p>Para implementar esta mec\u00e1nica, definiremos las siguientes variables:</p> <ul> <li>GRAVEDAD:<ul> <li>Representa la fuerza que tira del personaje hacia abajo.</li> <li>Este valor se suma a la velocidad vertical (<code>velocidad_y</code>) del personaje en cada fotograma si est\u00e1 en el aire.</li> </ul> </li> <li>FUERZA_SALTO:<ul> <li>Define la intensidad con la que el personaje es impulsado hacia arriba al saltar.</li> </ul> </li> <li>en_el_suelo:<ul> <li>Variable booleana que indica si el personaje est\u00e1 en contacto con el suelo.</li> <li>Si es <code>True</code>, el personaje est\u00e1 listo para saltar.</li> </ul> </li> </ul> <p>Y realizaremos los siguientes cambios en la l\u00f3gica del juego en la <code>funci\u00f3n update()</code>: </p> <ul> <li>Gravedad:<ul> <li>Si el personaje no est\u00e1 en el suelo (<code>en_el_suelo == False</code>), se le aplica la gravedad aumentando su velocidad vertical (<code>velocidad_y</code>).</li> </ul> </li> <li>Movimiento vertical:<ul> <li>El valor de <code>velocidad_y</code> se suma a la posici\u00f3n vertical del personaje (<code>jugador_y</code>), haciendo que suba o baje seg\u00fan corresponda.</li> </ul> </li> <li>Colisi\u00f3n con el suelo:<ul> <li>Si <code>jugador_y</code> alcanza el nivel del suelo (<code>HEIGHT - 80</code>), el personaje se detiene y su posici\u00f3n se ajusta para alinearse con el suelo.</li> </ul> </li> <li>Reinicio de variables:<ul> <li>Al aterrizar, se establece <code>en_el_suelo = True</code> para indicar que el personaje puede volver a saltar.</li> <li>La velocidad vertical (<code>velocidad_y</code>) se reinicia a 0.</li> </ul> </li> </ul> <p>A continuaci\u00f3n, se indica el c\u00f3digo que implementa el salto:</p> <pre><code>import pgzrun\n\n# Configuraci\u00f3n inicial\nWIDTH = 800\nHEIGHT = 600\nGRAVEDAD = 1\nFUERZA_SALTO = 15\n\n# Posici\u00f3n y velocidad inicial del jugador\njugador_x = 400\njugador_y = 500\nvelocidad_y = 0\n\n# Estado del salto\nen_el_suelo = True\n\ndef draw():\n    screen.clear()\n    screen.fill('lightblue')\n    # El suelo es un rect\u00e1ngulo que ocupa todo el ancho de la pantalla y est\u00e1 ubicado 50 p\u00edxeles por encima del borde inferior.\n    screen.draw.filled_rect(Rect((0, HEIGHT - 50), (WIDTH, 50)), 'green')  # Suelo\n    screen.draw.circle((jugador_x, jugador_y), 30, 'blue')  # Personaje\n\ndef update():\n    global jugador_y, velocidad_y, en_el_suelo\n\n    # Aplicar gravedad si el personaje no est\u00e1 en el suelo\n    if not en_el_suelo:\n        velocidad_y += GRAVEDAD\n\n    # Actualizar la posici\u00f3n vertical del jugador\n    jugador_y += velocidad_y\n\n    # Verificar colisi\u00f3n con el suelo\n    if jugador_y &gt;= HEIGHT - 80:\n        jugador_y = HEIGHT - 80\n        en_el_suelo = True\n        velocidad_y = 0\n\ndef on_key_down(key):\n    global velocidad_y, en_el_suelo\n    if key == keys.SPACE and en_el_suelo:  # Salta con espacio\n        velocidad_y = -FUERZA_SALTO\n        en_el_suelo = False\n\npgzrun.go()\n</code></pre> <p>Ejercicio 1. Modifica el c\u00f3digo para que el personaje salte m\u00e1s alto al presionar la tecla Shift (<code>keys.LSHIFT</code>) en lugar de la barra espaciadora.</p>"},{"location":"pygame_05.html#512-controlar-la-altura-del-salto-con-la-duracion-del-boton-presionado","title":"5.1.2 Controlar la altura del salto con la duraci\u00f3n del bot\u00f3n presionado","text":"<p>\u00a1Vamos a mejorar la mec\u00e1nica del salto! A\u00f1adiremos una mec\u00e1nica que permita controlar la altura del salto seg\u00fan el tiempo que se mantenga presionada la tecla. Este ajuste har\u00e1 que el salto sea m\u00e1s din\u00e1mico y realista.</p> <ul> <li>Salto bajo: si el jugador presiona brevemente la tecla de salto.</li> <li>Salto alto: si el jugador la mantiene presionada m\u00e1s tiempo, hasta una altura m\u00e1xima.</li> </ul> <p>Para lograrlo, necesitamos introducir los siguientes cambios:</p> <ul> <li>Nueva variable <code>salto_duracion</code>:<ul> <li>Acumula el tiempo durante el cual el bot\u00f3n de salto est\u00e1 presionado.</li> <li>Se reinicia a 0 cuando el personaje aterriza.</li> </ul> </li> <li>Fuerza de salto variable:<ul> <li>Se modifica <code>FUERZA_SALTO</code> a <code>FUERZA_SALTO_MAX</code> para definir una fuerza m\u00e1xima.</li> <li>La fuerza inicial depende de la duraci\u00f3n del bot\u00f3n presionado.</li> </ul> </li> <li>Ajustes en on_key_down y on_key_up:<ul> <li>Cuando el jugador presiona la tecla de salto (on_key_down), el personaje inicia el salto con la fuerza m\u00e1xima.</li> <li>Cuando el jugador suelta la tecla (on_key_up), la velocidad hacia arriba se detiene, reduciendo la altura del salto.</li> </ul> </li> <li>L\u00f3gica de gravedad sin cambios:<ul> <li>La gravedad contin\u00faa actuando sobre el personaje si no est\u00e1 en el suelo, simulando una ca\u00edda natural.</li> </ul> </li> </ul> <p>A continuaci\u00f3n, se muestra el c\u00f3digo actualizado:</p> <pre><code>import pgzrun\n\n# Configuraci\u00f3n inicial\nWIDTH = 800\nHEIGHT = 600\nGRAVEDAD = 1\nFUERZA_SALTO_MAX = 15\n\n# Posici\u00f3n y velocidad inicial del jugador\njugador_x = 400\njugador_y = 500\nvelocidad_y = 0\n\n# Estado del salto\nen_el_suelo = True\nsalto_duracion = 0\n\ndef draw():\n    screen.clear()\n    screen.fill('lightblue')\n    screen.draw.filled_rect(Rect((0, HEIGHT - 50), (WIDTH, 50)), 'green')  # Suelo\n    screen.draw.circle((jugador_x, jugador_y), 30, 'blue')  # Personaje\n\ndef update():\n    global jugador_y, velocidad_y, en_el_suelo, salto_duracion\n\n    # Aplicar gravedad si el personaje no est\u00e1 en el suelo\n    if not en_el_suelo:\n        velocidad_y += GRAVEDAD\n\n    # Actualizar la posici\u00f3n vertical del jugador\n    jugador_y += velocidad_y\n\n    # Verificar colisi\u00f3n con el suelo\n    if jugador_y &gt;= HEIGHT - 80:\n        jugador_y = HEIGHT - 80\n        en_el_suelo = True\n        velocidad_y = 0\n        salto_duracion = 0  # Reiniciar duraci\u00f3n del salto al aterrizar\n\ndef on_key_down(key):\n    global velocidad_y, en_el_suelo, salto_duracion\n    if key == keys.SPACE and en_el_suelo:  # Comienza a saltar\n        velocidad_y = -FUERZA_SALTO_MAX\n        en_el_suelo = False\n\ndef on_key_up(key):\n    global velocidad_y\n    if key == keys.SPACE and velocidad_y &lt; 0:  # Reduce la altura si se suelta pronto\n        velocidad_y = 0\n\npgzrun.go()\n</code></pre> <p>Ejercicio 2. Modifica el c\u00f3digo en on_key_down para que el jugador pueda realizar diferentes tipos de salto dependiendo de la tecla que presione. Por ejemplo: * Salto bajo: Si presiona la tecla W. * Salto alto: Si presiona la tecla SPACE.</p> <p>Pista: puedes a\u00f1adir una nueva fuerza de salto, llamada FUERZA_SALTO_BAJO, con un valor m\u00e1s peque\u00f1o que FUERZA_SALTO_MAX, y usar una condici\u00f3n <code>if</code> en <code>on_key_down</code> para verificar qu\u00e9 tecla se presiona.</p>"},{"location":"pygame_05.html#513-implementar-un-limite-de-plataformas","title":"5.1.3 Implementar un l\u00edmite de plataformas","text":"<p>\u00a1Es hora de subir el nivel! Vamos a a\u00f1adir plataformas al juego y haremos que nuestro personaje pueda aterrizar en ellas. Esto significa que el personaje tendr\u00e1 que \"atinar\" bien sus saltos para caer sobre estas superficies, \u00a1como en los cl\u00e1sicos juegos de plataformas!</p> <p>Lo que haremos: * Crear plataformas que act\u00faen como puntos de apoyo. * Detectar colisiones entre el personaje y las plataformas. * Ajustar la posici\u00f3n del personaje para que pueda aterrizar de forma precisa sobre ellas.</p>"},{"location":"pygame_05.html#5131-crear-las-plataformas","title":"5.1.3.1 Crear las plataformas","text":"<p>Las plataformas son rect\u00e1ngulos (Rect) que definimos con una posici\u00f3n y un tama\u00f1o. Estas estructuras incluyen propiedades \u00fatiles, como <code>.top</code>, que nos ayudar\u00e1n acceder f\u00e1cilmente a distintas partes del rect\u00e1ngulo sin necesidad de c\u00e1lculos adicionales.</p> <p>En el c\u00f3digo, las plataformas est\u00e1n organizadas en una lista para trabajar con ellas de manera sencilla:</p> <pre><code>plataformas = [\n    Rect((200, 500), (200, 20)),  # Plataforma baja\n    Rect((400, 400), (150, 20)),  # Plataforma media\n    Rect((600, 300), (100, 20))   # Plataforma alta\n]\n</code></pre> <p>Para dibujarlas en la pantalla, usamos un bucle dentro de la funci\u00f3n draw():</p> <pre><code>for plataforma in plataformas:\n    screen.draw.filled_rect(plataforma, 'brown')  # Dibujar plataformas\n</code></pre> <p>Ahora que ya tenemos las plataformas listas, el siguiente paso es detectar si el personaje aterriza correctamente sobre ellas.</p>"},{"location":"pygame_05.html#5132-detectar-colisiones","title":"5.1.3.2 Detectar colisiones","text":"<p>Para que el personaje pueda aterrizar en una plataforma, necesitamos comprobar si su borde inferior (el c\u00edrculo azul) est\u00e1 tocando el borde superior de alguna de las plataformas. Esto lo logramos en la funci\u00f3n <code>update()</code> con este fragmento:</p> <pre><code>for plataforma in plataformas:\n    if plataforma.collidepoint(jugador_x, jugador_y + 30) and velocidad_y &gt; 0:\n        jugador_y = plataforma.top - 30  # Ajustar para que se apoye en la parte superior\n        en_el_suelo = True\n        velocidad_y = 0\n</code></pre> <p>\u00bfQu\u00e9 hace este c\u00f3digo?</p> <ul> <li>Recorre las plataformas: <ul> <li>El bucle permite analizar las colisiones con cada plataforma de forma independiente y comprobar si el jugador colisiona con alguna de ellas durante la ca\u00edda del salto. </li> </ul> </li> <li>Detecta las colisiones: <ul> <li>Se usa <code>collidepoint(jugador_x, jugador_y + 30)</code> para comprobar si el borde inferior del personaje <code>(jugador_x, jugador_y + 30)</code> est\u00e1 dentro del \u00e1rea de la plataforma actual. El c\u00e1lculo <code>jugador_y + 30</code> representa el borde inferior de nuestro personaje (recuerda que nuestro personaje es un c\u00edrculo de 30 pixeles de radio).</li> <li>La condici\u00f3n <code>velocidad_y &gt; 0</code> comprueba si el personaje est\u00e1 cayendo. Sin esta condici\u00f3n, el personaje podr\u00eda detectar una colisi\u00f3n cuando est\u00e1 saltando hacia arriba, lo cual no tendr\u00eda sentido.</li> </ul> </li> <li>Ajusta la posici\u00f3n:<ul> <li>Si hay una colisi\u00f3n, la posici\u00f3n vertical del personaje (<code>jugador_y</code>) se ajusta para que coincida con la parte superior de la plataforma (<code>plataforma.top</code>). La operaci\u00f3n <code>plataforma.top - 30</code> asegura que el borde inferior del c\u00edrculo del personaje quede justo en la parte superior de la plataforma.</li> </ul> </li> <li>Detiene la ca\u00edda:<ul> <li>Indicamos que el personaje est\u00e1 sobre una superficie (<code>en_el_suelo = True</code>), lo que le permitir\u00e1 saltar de nuevo, y cambiamos la velocidad vertical en 0 (<code>velocidad_y=0</code>), para detener el movimiento hacia abajo del personaje tras aterrizar.</li> </ul> </li> </ul>"},{"location":"pygame_05.html#5133-mantener-la-logica-del-salto","title":"5.1.3.3 Mantener la l\u00f3gica del salto","text":"<p>El salto sigue funcionando igual que antes, pero ahora incluye las plataformas como posibles puntos de apoyo. Si el personaje est\u00e1 \"en el suelo\" (ahora, incluyendo las plataformas), podr\u00e1 saltar al presionar la tecla ESPACIO.</p> <pre><code>if key == keys.SPACE and en_el_suelo:\n    velocidad_y = -FUERZA_SALTO\n    en_el_suelo = False\n</code></pre> <p>La gravedad contin\u00faa funcionando para simular una ca\u00edda natural cuando el personaje no est\u00e1 tocando ninguna superficie:</p> <pre><code>if not en_el_suelo:\n    velocidad_y += GRAVEDAD\n</code></pre>"},{"location":"pygame_05.html#5134-codigo-completo","title":"5.1.3.4 C\u00f3digo  completo","text":"<pre><code>import pgzrun\n\n# Configuraci\u00f3n inicial\nWIDTH = 800\nHEIGHT = 600\nGRAVEDAD = 1\nFUERZA_SALTO = 15\n\n# Posici\u00f3n y velocidad inicial del jugador\njugador_x = 400\njugador_y = 500\nvelocidad_y = 0\n\n# Estado del salto\nen_el_suelo = False\n\n# Plataformas\nplataformas = [\n    Rect((200, 500), (200, 20)),  # Plataforma baja\n    Rect((400, 400), (150, 20)),  # Plataforma media\n    Rect((600, 300), (100, 20))   # Plataforma alta\n]\n\ndef draw():\n    screen.clear()\n    screen.fill('lightblue')\n    screen.draw.filled_rect(Rect((0, HEIGHT - 50), (WIDTH, 50)), 'green')  # Suelo\n    screen.draw.circle((jugador_x, jugador_y), 30, 'blue')  # Personaje\n    for plataforma in plataformas:\n        screen.draw.filled_rect(plataforma, 'brown')  # Dibujar plataformas\n\ndef update():\n    global jugador_x, jugador_y, velocidad_y, en_el_suelo\n\n    # Movimiento horizontal\n    if keyboard.left:\n        jugador_x -= 5\n    if keyboard.right:\n        jugador_x += 5\n\n    # Aplicar gravedad si el personaje no est\u00e1 en el suelo\n    if not en_el_suelo:\n        velocidad_y += GRAVEDAD\n\n    # Actualizar la posici\u00f3n vertical del jugador\n    jugador_y += velocidad_y\n    en_el_suelo = False  # Asumir que el jugador est\u00e1 en el aire\n\n    # Verificar colisi\u00f3n con el suelo\n    if jugador_y &gt;= HEIGHT - 80:\n        jugador_y = HEIGHT - 80\n        en_el_suelo = True\n        velocidad_y = 0\n\n    # Verificar colisi\u00f3n con plataformas\n    for plataforma in plataformas:\n        if plataforma.collidepoint(jugador_x, jugador_y + 30) and velocidad_y &gt; 0:\n            jugador_y = plataforma.top - 30\n            en_el_suelo = True\n            velocidad_y = 0\n\ndef on_key_down(key):\n    global velocidad_y, en_el_suelo\n    if key == keys.SPACE and en_el_suelo:  # Salta con espacio\n        velocidad_y = -FUERZA_SALTO\n        en_el_suelo = False\n\npgzrun.go()\n</code></pre> <p>Ejercicio 3: Modifica el c\u00f3digo para a\u00f1adir al menos dos plataformas nuevas. Usa diferentes posiciones y tama\u00f1os. Prueba a crea alguna plataforma en una posici\u00f3n elevada (por ejemplo, y = 100), que sea dif\u00edcil de alcanzar en un salto normal, y ajusta la posici\u00f3n inicial del jugador (jugador_x, jugador_y) para que pueda intentar alcanzarla. </p> <p>Ejercicio 4 (opcional): Modifica el c\u00f3digo para que durante el salto, si el jugador presiona las flechas izquierda o derecha, el personaje tambi\u00e9n se mueva horizontalmente. Puedes hacerlo sumando o restando un valor fijo a jugador_x mientras el personaje est\u00e1 en el aire. </p>"},{"location":"pygame_05.html#52-introduccion-al-comportamiento-de-enemigos","title":"5.2 Introducci\u00f3n al comportamiento de enemigos","text":"<p>En esta secci\u00f3n, aprenderemos a a\u00f1adir enemigos al juego y a programar su movimiento. Los enemigos a\u00f1adir\u00e1n un elemento de desaf\u00edo, ya que el jugador tendr\u00e1 que evitarlos mientras avanza por el nivel. </p>"},{"location":"pygame_05.html#521-movimiento-basico-de-enemigos-en-linea-recta","title":"5.2.1 Movimiento b\u00e1sico de enemigos en l\u00ednea recta","text":"<p>El primer paso es programar un enemigo que se mueva horizontalmente en l\u00ednea recta, cambiando de direcci\u00f3n al llegar a los bordes de la pantalla.</p> <pre><code># Posici\u00f3n y velocidad del enemigo\nenemigo_x = 100\nenemigo_y = 500\nenemigo_velocidad = 3\n\ndef draw():\n    screen.clear()\n    screen.fill('lightblue')\n    # Dibujar el enemigo\n    screen.draw.filled_circle((enemigo_x, enemigo_y), 20, 'red')\n\ndef update():\n    global enemigo_x\n\n    # Movimiento horizontal\n    enemigo_x += enemigo_velocidad\n\n    # Cambiar direcci\u00f3n al llegar a los bordes\n    if enemigo_x &gt; WIDTH or enemigo_x &lt; 0:\n        enemigo_velocidad *= -1\n</code></pre> <p>Ejercicio 5: Modifica el c\u00f3digo para a\u00f1adir varios enemigos al juego. Personaliza la velocidad y direcci\u00f3n inicial de cada enemigo.</p> <p>Ejercicio 6 (opcional): Modifica el c\u00f3digo para detectar la colisi\u00f3n del personaje con el enemigo. Para hacerlo usa la f\u00f3rmula de ladistancia entre dos puntos para verificar si el c\u00edrculo del enemigo y el c\u00edrculo del personaje se tocan. Por \u00faltimo, a\u00f1ade una variable vidas, que vaya dosminuyendo su valor con cada colisi\u00f3n. Al perder todas las vidas, muestra un mensaje de \"Game Over\".</p>"},{"location":"redes_01.html","title":"1. Introducci\u00f3n a las redes informn\u00e1ticas","text":"<p>Las redes inform\u00e1ticas son parte fundamental de nuestra vida diaria. Gracias a ellas, podemos comunicarnos, trabajar, estudiar y entretenernos. En esta unidad aprender\u00e1s c\u00f3mo funcionan, c\u00f3mo se conectan los dispositivos y c\u00f3mo hacer que las redes sean seguras.</p>"},{"location":"redes_01.html#11-que-es-una-red-informatica","title":"1.1 \u00bfQu\u00e9 es una red inform\u00e1tica?","text":"<p>Una red inform\u00e1tica es un conjunto de dispositivos conectados entre s\u00ed que permiten enviar y recibir datos. Estos dispositivos pueden ser ordenadores, tel\u00e9fonos, impresoras, servidores o incluso tu smartwatch.</p> <p>Ejemplo de red inform\u00e1tica Si en tu casa tienes varios dispositivos conectados a la misma red WiFi, todos ellos pueden acceder a Internet y, en algunos casos, compartir archivos o impresoras. \u00a1Eso ya es una red inform\u00e1tica!</p> <p>Otro ejemplo es una oficina donde varios ordenadores est\u00e1n conectados mediante un router, permitiendo compartir impresoras, archivos y otros recursos. Imagina que en tu casa tienes varios dispositivos conectados al WiFi. Todos ellos pueden navegar por Internet y, en algunos casos, compartir archivos o impresoras. \u00a1Eso ya es una red! Una oficina con varios ordenadores conectados entre s\u00ed mediante un router y compartiendo impresoras y archivos, tambi\u00e9n es una red. </p> <p>\u00bfUn ordenador conectado a Internet es una red? No, un ordenador conectado a Internet no es una red inform\u00e1tica por s\u00ed solo. Es simplemente un dispositivo dentro de una red m\u00e1s grande, en este caso, Internet. Para que exista una red inform\u00e1tica, deben estar conectados varios dispositivos que se comuniquen entre s\u00ed.</p>"},{"location":"redes_01.html#111-para-que-sirven-las-redes","title":"1.1.1 \u00bfPara qu\u00e9 sirven las redes?","text":"<p>Las redes inform\u00e1ticas tienen much\u00edsimos usos, pero algunos de los m\u00e1s importantes son: - Compartir informaci\u00f3n (como documentos en la nube). - Comunicarnos (correo electr\u00f3nico, redes sociales, videollamadas). - Jugar en l\u00ednea (multijugador, descargas). - Usar servicios en Internet (banca online, tiendas digitales).</p>"},{"location":"redes_01.html#12-como-se-comunican-los-dispositivos-de-una-red","title":"1.2 \u00bfC\u00f3mo se comunican los dispositivos de una red?","text":"<p>Para que la informaci\u00f3n viaje correctamente en una red, hacen falta:</p> <ul> <li>Emisor (quien env\u00eda el mensaje).</li> <li>Mensaje (la informaci\u00f3n transmitida).</li> <li>Receptor (quien recibe el mensaje).</li> </ul> <p>El canal de comunicaci\u00f3n es el medio por donde circulan los datos:</p> <ul> <li>Cables (fibra \u00f3ptica, Ethernet).</li> <li>Inal\u00e1mbrico (WiFi, Bluetooth, 5G).</li> </ul> <p>Para que todo funcione, los dispositivos deben hablar el mismo \"idioma\", es decir, seguir un protocolo de comunicaci\u00f3n. El m\u00e1s usado en Internet es TCP/IP.</p>"},{"location":"redes_01.html#13-el-origen-de-las-redes-informaticas","title":"1.3 El origen de las redes inform\u00e1ticas","text":"<p>Las redes inform\u00e1ticas no surgieron de la nada, sino que fueron evolucionando a medida que la tecnolog\u00eda avanzaba y la necesidad de compartir informaci\u00f3n se hac\u00eda cada vez mayor.</p>"},{"location":"redes_01.html#131-los-primeros-pasos-la-prehistoria-de-las-redes","title":"1.3.1 Los primeros pasos: la prehistoria de las redes","text":"<p>Antes de que existieran las redes de ordenadores, los sistemas inform\u00e1ticos eran m\u00e1quinas gigantescas (mainframes) que solo pod\u00edan usarse de manera individual. Si alguien quer\u00eda compartir informaci\u00f3n, ten\u00eda que hacerlo f\u00edsicamente, llevando tarjetas perforadas, disquetes o impresiones en papel.</p> <p>Estos mainframes ocupaban salas enteras, generaban mucho calor y requer\u00edan personal especializado para operarlos. Debido a su elevado coste y mantenimiento, solo unas pocas universidades, empresas y gobiernos ten\u00edan acceso a ellos.</p>"},{"location":"redes_01.html#el-harvard-mark-i-el-inicio-de-la-computacion-automatizada","title":"El Harvard Mark I: el inicio de la computaci\u00f3n automatizada","text":"<p>Uno de los primeros mainframes de la historia fue el Harvard Mark I (1944), una enorme m\u00e1quina electromec\u00e1nica dise\u00f1ada para realizar c\u00e1lculos matem\u00e1ticos complejos de manera autom\u00e1tica. Sin embargo, su uso no era nada sencillo.</p> <p>Si quieres saber m\u00e1s sobre la Harvard Mark I, puedes consultar el siguiente v\u00eddeo</p> El Harvard Mark I (1944) fue un ordenador electromec\u00e1nico creado por IBM y la Universidad de Harvard. Ubicado Massachusetts, usaba tarjetas perforadas y rel\u00e9s para automatizar c\u00e1lculos matem\u00e1ticos complejos. <p>\u00bfC\u00f3mo trabajaba un programador en el Mark I?</p> <p>Imaginemos a un programador de los a\u00f1os 40 intentando ejecutar su programa en el Harvard Mark I:</p> <ul> <li> <p>Escribir el c\u00f3digo: no exist\u00eda un teclado ni pantalla como hoy en d\u00eda. En su lugar, el programador ten\u00eda que escribir las instrucciones a mano y convertirlas en una serie de comandos espec\u00edficos para la m\u00e1quina.</p> </li> <li> <p>Perforar tarjetas de papel: una vez listo el programa, era necesario perforar cada una de las instrucciones en tarjetas de papel. Cada perforaci\u00f3n representaba una instrucci\u00f3n o un dato. Si te equivocabas, hab\u00eda que repetir todo el proceso con una nueva tarjeta.</p> </li> <li> <p>Ir a la mesa de control: cualquiera no pod\u00eda usar el Mark I. Hab\u00eda que esperar el turno y entregar las tarjetas perforadas a un operador, que se encargaba de introducirlas en la m\u00e1quina.</p> </li> <li> <p>Ejecutar el programa: el operador colocaba las tarjetas en un lector especial y pon\u00eda en marcha el Mark I desde una mesa de control llena de interruptores, luces y diales. La m\u00e1quina empezaba a trabajar, moviendo engranajes y rel\u00e9s electromagn\u00e9ticos con un sonido r\u00edtmico caracter\u00edstico.</p> </li> <li> <p>Esperar el resultado: como no exist\u00edan pantallas, el Mark I imprim\u00eda los resultados en una m\u00e1quina de escribir el\u00e9ctrica o generaba nuevas tarjetas perforadas que luego deb\u00edan interpretarse manualmente.</p> </li> <li> <p>Corregir errores: si algo sal\u00eda mal, hab\u00eda que revisar todas las tarjetas perforadas y corregirlas una por una. No exist\u00eda un \"bot\u00f3n de borrar\", y el proceso pod\u00eda tardar horas o incluso d\u00edas en completarse.</p> </li> </ul> <p>\ud83d\udccc Dato curioso: El Mark I tardaba seis segundos en multiplicar dos n\u00fameros y su sistema de rel\u00e9s electromec\u00e1nicos lo hac\u00eda muy ruidoso. \u00a1Parec\u00eda una sala de m\u00e1quinas de un barco en plena marcha!</p> <p>Pronto, los cient\u00edficos se dieron cuenta de que conectar varios ordenadores permitir\u00eda compartir informaci\u00f3n de forma m\u00e1s r\u00e1pida y sin necesidad de transportar datos f\u00edsicamente. En la d\u00e9cada de 1950, algunas universidades comenzaron a experimentar con conexiones entre computadoras mediante cables, aunque eran muy lentas y limitadas.</p> <p>Los mainframes marcaron el inicio de la inform\u00e1tica moderna y sentaron las bases de lo que, a\u00f1os despu\u00e9s, dar\u00eda origen a las redes de ordenadores e Internet.</p>"},{"location":"redes_01.html#132-arpanet-la-red-que-cambio-todo","title":"1.3.2 ARPANET: la red que cambi\u00f3 todo","text":"<p>En los a\u00f1os 60, en plena Guerra Fr\u00eda, el Departamento de Defensa de EE.UU., a trav\u00e9s de ARPA (Advanced Research Projects Agency), impuls\u00f3 la creaci\u00f3n de una red inform\u00e1tica para mejorar la comunicaci\u00f3n entre instituciones de investigaci\u00f3n y permitir el uso compartido de computadoras. As\u00ed naci\u00f3 ARPANET, la primera red de computadoras, que sent\u00f3 las bases de Internet.</p> <p>En 1969, ARPANET comenz\u00f3 con solo cuatro nodos en EE.UU.: - UCLA (Universidad de California, Los \u00c1ngeles) - SRI (Stanford Research Institute) - UCSB (Universidad de California, Santa B\u00e1rbara) - Universidad de Utah. </p> <p>En la d\u00e9cada de los 70 y principios de los 80, la red creci\u00f3 exponencialmente, incorporando m\u00e1s universidades, instituciones militares y centros de investigaci\u00f3n. En 1973, ARPANET se convirti\u00f3 en una red internacional al conectar computadoras en Noruega y el Reino Unido. En 1983, adopt\u00f3 el protocolo TCP/IP, un cambio fundamental que permiti\u00f3 la interconexi\u00f3n de redes y la creaci\u00f3n de Internet. Finalmente, en 1990, ARPANET fue desactivada, dejando un legado tecnol\u00f3gico que transform\u00f3 el mundo.</p> Evoluci\u00f3n de ARPANET, la primera red de computadoras, desde su inicio en 1969 con solo cuatro nodos hasta su expansi\u00f3n en 1982, cuando ya era una red internacional que sent\u00f3 las bases para Internet. <p>Momentos clave de ARPANET: - 1969 \u2192 Se env\u00eda el primer mensaje entre dos computadoras conectadas a ARPANET. Quer\u00edan escribir \"LOGIN\", pero solo lleg\u00f3 \"LO\" antes de que el sistema colapsara. \ud83d\ude05 - 1971 \u2192 Se env\u00eda el primer correo electr\u00f3nico, creado por Ray Tomlinson, quien introdujo el uso de \"@\" en las direcciones de email. - 1973 \u2192 ARPANET se expande internacionalmente con conexiones a Noruega y el Reino Unido. - 1983 \u2192 Se implementa el protocolo TCP/IP, permitiendo la interconexi\u00f3n de redes, lo que dio origen a Internet. - 1990 \u2192 ARPANET se apaga oficialmente, dando paso a la Internet moderna.</p>"},{"location":"redes_01.html#133-la-explosion-de-las-redes-en-los-anos-80","title":"1.3.3 La explosi\u00f3n de las redes en los a\u00f1os 80","text":"<p>En los a\u00f1os 80, las empresas comenzaron a descubrir las ventajas de conectar sus computadoras para compartir informaci\u00f3n y mejorar la productividad. Esto provoc\u00f3 un enorme crecimiento en la cantidad y el tama\u00f1o de las redes.</p> <p>Sin embargo, hubo un problema: cada fabricante dise\u00f1aba su propia tecnolog\u00eda y no exist\u00eda un est\u00e1ndar com\u00fan. Esto significaba que, si una empresa ten\u00eda computadoras de diferentes marcas, muchas veces no pod\u00edan comunicarse entre s\u00ed.</p> <p>Para solucionar esto, en 1984, la Organizaci\u00f3n Internacional para la Estandarizaci\u00f3n (ISO, Internacional Organization for Standardization) desarroll\u00f3 el modelo OSI (Open Systems Interconnection), que establec\u00eda una estructura est\u00e1ndar para la comunicaci\u00f3n entre redes.</p>"},{"location":"redes_01.html#134-internet-la-red-de-redes","title":"1.3.4 Internet: la red de redes","text":"<p>Mientras OSI sentaba las bases te\u00f3ricas, el modelo TCP/IP se convirti\u00f3 en el est\u00e1ndar real y funcional en el que se basa Internet.</p> <ul> <li>A\u00f1os 90: la World Wide Web (WWW) hace que Internet sea accesible para todos, no solo para cient\u00edficos y militares.</li> <li>2000 en adelante: con la llegada de la banda ancha, el WiFi y los dispositivos m\u00f3viles, las redes evolucionaron a lo que conocemos hoy.</li> </ul> <p>\ud83d\udccc Dato curioso: El primer sitio web de la historia fue creado en 1991 por Tim Berners-Lee. \u00a1Y todav\u00eda est\u00e1 en l\u00ednea! Puedes verlo \ud83d\udc49 aqu\u00ed</p>"},{"location":"redes_01.html#135-modelos-de-referencia","title":"1.3.5 Modelos de referencia","text":"<p>Como hemos visto, cuando las redes comenzaron a expandirse en los a\u00f1os 80, surgi\u00f3 un problema: cada empresa creaba su propia tecnolog\u00eda, lo que hac\u00eda dif\u00edcil conectar sistemas diferentes. Para solucionar esta incompatibilidad, se desarrollaron modelos de referencia, que ayudan a organizar la comunicaci\u00f3n entre dispositivos sin importar qu\u00e9 tecnolog\u00eda utilicen.</p> <p>Los dos modelos m\u00e1s importantes son OSI y TCP/IP.</p>"},{"location":"redes_01.html#1351-el-modelo-osi-un-mapa-teorico-de-la-comunicacion-en-red","title":"1.3.5.1 El modelo OSI: un mapa te\u00f3rico de la comunicaci\u00f3n en red","text":"<p>En 1984, la Organizaci\u00f3n Internacional para la Estandarizaci\u00f3n (ISO) cre\u00f3 el modelo OSI (Open Systems Interconnection), con el objetivo de establecer un est\u00e1ndar universal para el dise\u00f1o de redes.</p>"},{"location":"redes_01.html#para-que-sirve","title":"\u00bfPara qu\u00e9 sirve?","text":"<p>El modelo OSI es una estructura te\u00f3rica que divide la comunicaci\u00f3n que se realiza entre dos equipos en 7 capas, cada una con una funci\u00f3n espec\u00edfica. No es un protocolo en s\u00ed, sino una referencia que ayuda a entender c\u00f3mo deben comunicarse las redes.</p>"},{"location":"redes_01.html#las-7-capas-del-modelo-osi","title":"Las 7 capas del modelo OSI","text":"<ul> <li>Capa f\u00edsica: es el medio por donde viaja la informaci\u00f3n. Los datos se transmiten como se\u00f1ales el\u00e9ctricas, \u00f3pticas o inal\u00e1mbricas (cables, Wi-Fi, radiofrecuencia).</li> <li>Capa de enlace de datos: divide la informaci\u00f3n en tramas y las gestiona dentro de una red local. Controla el acceso al medio y usa direcciones f\u00edsicas (MAC).</li> <li>Capa de red: determina la mejor ruta para el env\u00edo de datos entre redes. Utiliza direcciones l\u00f3gicas (IP) y agrega un encabezado de red a los paquetes.</li> <li>Capa de transporte: garantiza la entrega confiable de datos entre dispositivos finales, gestionando errores y control de flujo.</li> <li>Capa de sesi\u00f3n: establece, gestiona y finaliza sesiones de comunicaci\u00f3n entre aplicaciones.</li> <li>Capa de presentaci\u00f3n: traduce, encripta y comprime datos para asegurar su correcta interpretaci\u00f3n por el receptor.</li> <li>Capa de aplicaci\u00f3n: proporciona servicios de red a las aplicaciones del usuario, como navegaci\u00f3n web, correo electr\u00f3nico y transferencia de archivos.</li> </ul>"},{"location":"redes_01.html#1352-el-modelo-tcpip-la-base-de-internet","title":"1.3.5.2 El modelo TCP/IP: la base de Internet","text":"<p>Aunque OSI es un buen modelo te\u00f3rico, el modelo que realmente usamos es TCP/IP. Se desarroll\u00f3 en los a\u00f1os 70 y fue adoptado en 1983 como el est\u00e1ndar de Internet.</p>"},{"location":"redes_01.html#para-que-sirve_1","title":"\u00bfPara qu\u00e9 sirve?","text":"<p>TCP/IP es el conjunto de protocolos en el que se basa Internet y que permiten la transmisi\u00f3n de datos entre ordenadores. Recibe este nombre en referencia a los dos protocolos m\u00e1s importantes que lo componen: Protocolo de Control de Transmisi\u00f3n (TCP, Transmission Control Protocol) y Protocolo de Internet (IP, Internet Protocol)</p>"},{"location":"redes_01.html#las-4-capas-del-modelo-tcpip","title":"Las 4 capas del modelo TCP/IP","text":"<p>A diferencia de OSI, TCP/IP tiene solo 4 capas que agrupan varias funciones:</p> <ul> <li>Capa de acceso a la red: equivale a las capas f\u00edsica y de enlace de datos del modelo OSI. Se encarga del control del hardware y la transmisi\u00f3n de datos a trav\u00e9s de cables o redes inal\u00e1mbricas (Wi-Fi).</li> <li>Capa de Internet:: corresponde a la capa de red del modelo OSI. Su funci\u00f3n es encontrar la mejor ruta para enviar los datos mediante direcciones IP.</li> <li>Capa de transporte: similar a la capa de transporte en OSI. Se encarga de dividir los datos en paquetes y garantizar que lleguen correctamente al destino, con protocolos como TCP para asegurar la fiabilidad.</li> <li>Capa de aplicaci\u00f3n: integra las funciones de las capas de sesi\u00f3n, presentaci\u00f3n y aplicaci\u00f3n del modelo OSI. Es la interfaz entre los programas y la red, permitiendo la comunicaci\u00f3n a trav\u00e9s de navegadores, correos electr\u00f3nicos, WhatsApp y otras aplicaciones.</li> </ul> <p>Cada vez que env\u00edas algo a trav\u00e9s de Internet como un mensaje, una foto o un archivo, los datos pasan primero por cada una de estas capas en un orden espec\u00edfico durante el env\u00edo y luego recorren las mismas capas en orden inverso al llegar al destinatario, donde se reconstruyen para recuperar la informaci\u00f3n original. A medida que los datos pasan de una capa a otra inferior, se encapsulan y se les a\u00f1ade informaci\u00f3n adicional. </p> <p>Los modelos OSI y TCP/IP han permitido que diferentes dispositivos y tecnolog\u00edas se comuniquen sin problemas. Gracias a ellos, hoy podemos navegar por Internet, enviar correos, ver videos en streaming y chatear desde cualquier lugar del mundo. Sin una estandarizaci\u00f3n como esta, la comunicaci\u00f3n ser\u00eda ca\u00f3tica y mucho m\u00e1s lenta. La eficiencia de este proceso es clave para garantizar un Internet r\u00e1pido y confiable. </p>"},{"location":"redes_01.html#1353-diferencias-entre-el-modelo-osi-y-el-modelo-tcpip","title":"1.3.5.3 Diferencias entre el modelo OSI y el modelo TCP/IP","text":"<p>Hemos visto que ambos modelos ayudan a entender c\u00f3mo viajan los datos en una red, pero tienen diferencias importantes.</p> Caracter\u00edstica Modelo OSI Modelo TCP/IP ORIGEN Creado por la ISO en 1984 como un est\u00e1ndar te\u00f3rico para la comunicaci\u00f3n en redes Desarrollado en los a\u00f1os 70 por el Departamento de Defensa de EE.UU. para ARPANET e implementado en Internet en 1983. CAPAS 7 capas (F\u00edsica, Enlace de datos, Red, Transporte, Sesi\u00f3n, Presentaci\u00f3n, Aplicaci\u00f3n). 4 capas (Enlace, Internet, Transporte, Aplicaci\u00f3n). USO Modelo conceptual para entender la comunicaci\u00f3n en redes, pero no se usa directamente en Internet.   Modelo pr\u00e1ctico en el que se basa toda la comunicaci\u00f3n en Internet. PROTOCOLOS No define protocolos espec\u00edficos, solo describe funciones. Usa protocolos reales como TCP, IP, HTTP, FTP, UDP, etc. FLEXIBILIDAD M\u00e1s detallado y estructurado, pero menos flexible en la pr\u00e1ctica. M\u00e1s simple y flexible, adaptado a la realidad de las redes. COMPATIBILIDAD Dise\u00f1ado para cualquier tipo de red, pero no se adopt\u00f3 completamente. Es el est\u00e1ndar global y funciona en todas las redes modernas. <p>El modelo OSI es una referencia te\u00f3rica que organiza la comunicaci\u00f3n en 7 capas, mientras que el modelo TCP/IP es un modelo pr\u00e1ctico y simplificado que permite la comunicaci\u00f3n real en Internet. Aunque OSI ayuda a comprender mejor c\u00f3mo funcionan las redes, en la pr\u00e1ctica, Internet y la mayor\u00eda de las redes actuales se basan en TCP/IP.</p>"},{"location":"redes_01.html#14-el-futuro-de-las-redes-informaticas","title":"1.4 El futuro de las redes inform\u00e1ticas","text":"<p>Las redes inform\u00e1ticas siguen evolucionando a pasos agigantados. Cada d\u00eda surgen nuevas tecnolog\u00edas que hacen que la comunicaci\u00f3n sea m\u00e1s r\u00e1pida, segura y eficiente. Pero, \u00bfc\u00f3mo ser\u00e1n las redes del futuro?</p>"},{"location":"redes_01.html#141-redes-mas-rapidas-y-eficientes","title":"1.4.1 Redes m\u00e1s r\u00e1pidas y eficientes","text":"<p>El desarrollo de nuevas tecnolog\u00edas de comunicaci\u00f3n permitir\u00e1 redes m\u00e1s r\u00e1pidas y con menor latencia (tiempo de respuesta). Algunas tendencias clave son:</p> <ul> <li> <p>5G y 6G: la tecnolog\u00eda 5G ya est\u00e1 en uso, pero el 6G promete velocidades a\u00fan mayores y una conectividad casi instant\u00e1nea. Esto permitir\u00e1 descargar pel\u00edculas en segundos, mejorar la realidad virtual y facilitar la comunicaci\u00f3n entre dispositivos inteligentes.</p> </li> <li> <p>Fibra \u00f3ptica ultrarr\u00e1pida: aunque la fibra \u00f3ptica ya ofrece grandes velocidades, se est\u00e1n investigando nuevas t\u00e9cnicas que multiplicar\u00e1n su capacidad, como la fibra \u00f3ptica cu\u00e1ntica. Pa\u00edses como China y EE.UU. han desarrollado redes experimentales de fibra \u00f3ptica cu\u00e1ntica para pruebas de seguridad y comunicaciones de alto nivel.</p> </li> <li> <p>Redes de baja latencia: tecnolog\u00edas como el \"edge computing\" permiten procesar datos m\u00e1s cerca de donde se generan, reduciendo el tiempo de respuesta en aplicaciones cr\u00edticas como veh\u00edculos aut\u00f3nomos o cirug\u00edas remotas.</p> </li> </ul>"},{"location":"redes_01.html#142-redes-mas-seguras-y-privadas","title":"1.4.2 Redes m\u00e1s seguras y privadas","text":"<p>La ciberseguridad ser\u00e1 un aspecto fundamental en el futuro de las redes. Con cada vez m\u00e1s datos circulando por Internet, es esencial proteger la informaci\u00f3n de ataques y accesos no autorizados.</p> <ul> <li> <p>Cifrado cu\u00e1ntico: se est\u00e1n desarrollando m\u00e9todos de cifrado basados en la computaci\u00f3n cu\u00e1ntica, que har\u00edan pr\u00e1cticamente imposible descifrar la informaci\u00f3n sin la clave correcta.</p> </li> <li> <p>Blockchain en redes: la tecnolog\u00eda blockchain, famosa por las criptomonedas, tambi\u00e9n se usar\u00e1 para mejorar la seguridad en redes, evitando fraudes y ataques.</p> </li> <li> <p>IA contra ciberataques: la inteligencia artificial (IA) permitir\u00e1 detectar amenazas en tiempo real y bloquear posibles ataques antes de que causen da\u00f1o.</p> </li> </ul>"},{"location":"redes_01.html#143-redes-inteligentes-y-automatizadas","title":"1.4.3 Redes inteligentes y automatizadas","text":"<p>Las redes del futuro ser\u00e1n m\u00e1s aut\u00f3nomas y capaces de gestionarse solas, gracias a la inteligencia artificial y al \"machine learning\". Algunas aplicaciones incluyen:</p> <ul> <li> <p>Redes autoadaptables: sistemas que ajustan autom\u00e1ticamente el tr\u00e1fico de datos para evitar sobrecargas y mejorar la eficiencia.</p> </li> <li> <p>Automatizaci\u00f3n de infraestructuras: las empresas podr\u00e1n configurar y administrar redes con menos intervenci\u00f3n humana, reduciendo errores y mejorando la velocidad de respuesta.</p> </li> <li> <p>Internet de las Cosas (IoT): miles de dispositivos conectados (sensores, electrodom\u00e9sticos, veh\u00edculos, f\u00e1bricas) intercambiar\u00e1n informaci\u00f3n en tiempo real, facilitando la toma de decisiones automatizada.</p> </li> </ul>"},{"location":"redes_01.html#144-internet-en-todo-el-planeta","title":"1.4.4 Internet en todo el planeta","text":"<p>La conectividad global ser\u00e1 una realidad, eliminando las barreras geogr\u00e1ficas para acceder a Internet.</p> <ul> <li> <p>Sat\u00e9lites de Internet (Starlink y OneWeb): empresas como SpaceX est\u00e1n desplegando constelaciones de sat\u00e9lites para llevar Internet a zonas remotas.</p> </li> <li> <p>Redes en la estrat\u00f3sfera: proyectos como globos de alta altitud (Google Loon) o drones aut\u00f3nomos podr\u00edan proporcionar acceso a Internet en \u00e1reas sin infraestructura terrestre.</p> </li> <li> <p>Redes en otros planetas: a medida que avanzamos en la exploraci\u00f3n espacial, se est\u00e1n desarrollando redes de comunicaci\u00f3n para futuras colonias en la Luna o Marte.</p> </li> </ul>"},{"location":"redes_01.html#145-hacia-un-mundo-hiperconectado","title":"1.4.5 Hacia un mundo hiperconectado","text":"<p>El futuro de las redes inform\u00e1ticas se dirige a un mundo en el que todo estar\u00e1 interconectado. Desde hogares inteligentes hasta ciudades enteras, la conectividad ser\u00e1 un pilar fundamental para la sociedad.</p> <ul> <li> <p>Ciudades inteligentes: sem\u00e1foros conectados, transporte aut\u00f3nomo y edificios con sensores mejorar\u00e1n la eficiencia urbana.</p> </li> <li> <p>Veh\u00edculos aut\u00f3nomos: los coches conectados podr\u00e1n comunicarse entre s\u00ed y con la infraestructura vial para evitar accidentes y mejorar el tr\u00e1fico.</p> </li> <li> <p>Medicina a distancia: cirug\u00edas remotas, monitoreo de pacientes en tiempo real y hospitales inteligentes ser\u00e1n una realidad.</p> </li> </ul> <p>En el futuro, se espera que haya m\u00e1s de 100.000 millones de dispositivos conectados en el mundo. \u00a1Eso es m\u00e1s de 12 dispositivos por persona!</p>"},{"location":"redes_01.html#resumen-de-la-evolucion-de-las-redes","title":"Resumen de la evoluci\u00f3n de las redes","text":"<ul> <li>1950-1960: ordenadores aislados, sin conexi\u00f3n entre s\u00ed.</li> <li>1969: nace ARPANET, la primera red de ordenadores.</li> <li>A\u00f1os 70: aparece el correo electr\u00f3nico y las primeras conexiones remotas.</li> <li>A\u00f1os 80: crece el uso de redes en empresas, surge el modelo OSI y se adopta TCP/IP.</li> <li>A\u00f1os 90-2000: Internet se vuelve global con la World Wide Web.</li> <li>Hoy: conexiones inal\u00e1mbricas, redes inteligentes y tecnolog\u00eda en la nube.</li> <li>Futuro: redes m\u00e1s r\u00e1pidas, seguras y con inteligencia artificial.</li> </ul>"},{"location":"redes_01.html#enlaces-de-interes","title":"Enlaces de inter\u00e9s","text":"<ul> <li>V\u00eddeo sobre las capas del modelo OSI</li> </ul>"},{"location":"redes_02.html","title":"2. Tipos de redes","text":"<p>Vivimos en un mundo hiperconectado. M\u00f3viles, ordenadores, tablets, smartwatches\u2026 Todos estos dispositivos pueden comunicarse entre s\u00ed gracias a las redes inform\u00e1ticas. Pero no todas las redes son iguales: hay distintos tipos seg\u00fan el espacio que abarcan, c\u00f3mo est\u00e1n organizadas o qui\u00e9n puede acceder a ellas.</p>"},{"location":"redes_02.html#21-segun-su-area-de-cobertura","title":"2.1 Seg\u00fan su \u00e1rea de cobertura","text":"<p>Este criterio clasifica las redes seg\u00fan la distancia que abarcan y el tama\u00f1o del \u00e1rea en la que operan. No es lo mismo conectar dos dispositivos en una habitaci\u00f3n que unir miles en distintos pa\u00edses.</p>"},{"location":"redes_02.html#211-wan-wide-area-network-red-de-area-extensa","title":"2.1.1 WAN (Wide Area Network, Red de \u00c1rea Extensa)","text":"<ul> <li>Las redes WAN son las m\u00e1s grandes que existen. Sirven para conectar dispositivos que est\u00e1n muy alejados geogr\u00e1ficamente, incluso en pa\u00edses o continentes distintos. Su principal objetivo es permitir la comunicaci\u00f3n a gran escala.</li> <li>Para lograr estas conexiones enormes, se utilizan diferentes tecnolog\u00edas:<ul> <li>Cables submarinos de fibra \u00f3ptica, ruzan oc\u00e9anos y mares llevando datos de un continente a otro.     </li> <li>Redes m\u00f3viles 4G y 5G, muy comunes en ciudades y pueblos. Permiten velocidades de hasta 10 Gbps.</li> <li>Sat\u00e9lites de comunicaciones, para zonas remotas o de dif\u00edcil acceso donde el cableado no es viable.    </li> </ul> </li> <li>Internet es la red WAN m\u00e1s conocida y utilizada. Gracias a ella, millones de personas pueden navegar, enviar mensajes o hacer videollamadas desde cualquier rinc\u00f3n del mundo.</li> </ul> <p>Curiosidad tecnol\u00f3gica: Actualmente hay m\u00e1s de 500 cables que cruzan oc\u00e9anos y mares conectando pa\u00edses. Si quieres ver c\u00f3mo es esa red invisible que sostiene Internet, puedes visitar esta web interactiva: \ud83d\udc49 https://www.submarinecablemap.com/. Ah\u00ed puedes explorar un mapa en tiempo real de todos los cables submarinos activos, en construcci\u00f3n o planificados. Por ejemplo, el cable \u201cMarea\u201d, que conecta Espa\u00f1a (Bilbao) con Estados Unidos (Virginia), tiene una capacidad de 160 terabits por segundo. Fue financiado por empresas como Microsoft y Facebook y recorre m\u00e1s de 6.600 kil\u00f3metros por el fondo del oc\u00e9ano Atl\u00e1ntico.</p>"},{"location":"redes_02.html#212-man-metropolitan-area-network-red-de-area-metropolitana","title":"2.1.2 MAN (Metropolitan Area Network, Red de \u00c1rea Metropolitana)","text":"<ul> <li>Las redes MAN conectan varios edificios dentro de una misma ciudad. Son m\u00e1s grandes que una red LAN, pero m\u00e1s peque\u00f1a que una WAN.</li> <li>Las tecnolog\u00edas que usan son las siguientes: <ul> <li>Fibra \u00f3ptica, que permite enviar grandes cantidades de datos a alta velocidad.</li> <li>WiMAX, una tecnolog\u00eda inal\u00e1mbrica capaz de cubrir hasta 50 km sin necesidad de cables.     </li> </ul> </li> <li>Se utiliza, por ejemplo, para unir diferentes edificios de una empresa, hospitales, bibliotecas, ayuntamientos o facultades universitarias que est\u00e1n en distintas partes de una ciudad.</li> </ul> <p>Curiosidad tecnol\u00f3gica: Barcelona es una de las ciudades m\u00e1s avanzadas en el uso de tecnolog\u00edas para gestionar servicios urbanos de forma eficiente y sostenible. Entre sus iniciativas destacan: contenedores inteligentes (avisan cuando est\u00e1n llenos), farolas adaptativas (ajustan su luz seg\u00fan la presencia de personas), riego autom\u00e1tico (seg\u00fan la humedad del suelo), aparcamiento inteligente (con sensores que muestran plazas libres en una app). Todo esto funciona gracias a una infraestructura de red urbana que combina redes MAN con otras redes inal\u00e1mbricas para dispositivos IoT, como LoRa o NB-IoT.</p>"},{"location":"redes_02.html#213-lan-local-area-network-red-de-area-local","title":"2.1.3 LAN (Local Area Network, Red de \u00c1rea Local)","text":"<ul> <li>Las redes LAN se utilizan para conectar dispositivos dentro de un espacio peque\u00f1o, como una casa, un aula, una oficina o un laboratorio. Son las redes m\u00e1s comunes en el d\u00eda a d\u00eda. Permiten compartir archivos, impresoras, conexi\u00f3n a Internet o jugar en red local con gran velocidad y poco retraso.</li> <li>Las tecnolog\u00edas m\u00e1s habituales son:<ul> <li>Ethernet (cable), conexi\u00f3n por cable de par trenzado o fibra \u00f3ptica. Es estable y muy r\u00e1pida.</li> <li>Wi-Fi (inal\u00e1mbrica) permite conectar dispositivos sin cables. Hoy se usan est\u00e1ndares como Wi-Fi 6, y pronto llegar\u00e1 Wi-Fi 7, a\u00fan m\u00e1s r\u00e1pido y eficiente.</li> <li>PLC, tecnolog\u00eda que permite enviar datos a trav\u00e9s del cableado el\u00e9ctrico de casa o del edificio.</li> </ul> </li> <li>La red de un instituto donde los ordenadores de las aulas est\u00e1n conectados al mismo router por Ethernet o Wi-Fi es una LAN. Tambi\u00e9n lo es la red dom\u00e9stica de una casa con varios m\u00f3viles, ordenadores y una Smart TV conectados al mismo Wi-Fi.</li> </ul>"},{"location":"redes_02.html#214-pan-personal-area-network-red-de-area-personal","title":"2.1.4 PAN (Personal Area Network, Red de \u00c1rea Personal)","text":"<ul> <li>Una red PAN conecta dispositivos personales que est\u00e1n muy cerca unos de otros, normalmente a menos de 10 metros de distancia. Aunque pueden ser cableadas, lo habitual es que sean inal\u00e1mbricas. </li> <li>Se basan en tecnolog\u00edas inal\u00e1mbricas de corto alcance:<ul> <li>Bluetooth muy com\u00fan en m\u00f3viles, port\u00e1tiles, relojes inteligentes, altavoces, teclados, ratones, etc. Funciona sin cables y permite la transferencia de datos a corta distancia (hasta 10 metros, en condiciones normales).. </li> <li>NFC (Near Field Communication) funciona a una distancia a\u00fan m\u00e1s corta (menos de 4 cm), pero es extremadamente r\u00e1pida. Se usa para pagar con el m\u00f3vil, acceder a edificios con tarjetas sin contacto o compartir archivos entre tel\u00e9fonos con solo acercarlos.     </li> </ul> </li> <li>Tu smartphone conectado por Bluetooth a unos auriculares o a una pulsera de actividad es una red PAN. Tambi\u00e9n cuando usas el m\u00f3vil para pagar en una tienda mediante NFC est\u00e1s usando una red PAN.</li> </ul> <p>Curiosidad tecnol\u00f3gica: \u00bfSab\u00edas que el nombre \u201cBluetooth\u201d viene del rey Harald \"Bl\u00e5tand\" Gormsson de Dinamarca, que en el siglo X unific\u00f3 varias tribus escandinavas? Los creadores de la tecnolog\u00eda eligieron ese nombre porque Bluetooth une diferentes dispositivos, igual que aquel rey uni\u00f3 pueblos. De hecho, el logotipo de Bluetooth combina dos runas n\u00f3rdicas que representan sus iniciales: H y B. </p> <p>Cuando estas redes utilizan conexiones inal\u00e1mbricas, se antepone la letra W (Wireless) al nombre de la red. Por ejemplo: - WWAN ( Wireless WAN): es una red de \u00e1rea extensa sin cables. Usa tecnolog\u00edas m\u00f3viles como 4G o 5G para ofrecer conexi\u00f3n a Internet en grandes zonas, incluso en movimiento.Por ejemplo, cuando te conectas a Internet desde el m\u00f3vil usando datos, est\u00e1s usando una WWAN.  - WLAN (Wireless LAN): es una red de \u00e1rea local inal\u00e1mbrica. Lo que normalmente llamamos Wi-Fi en casa, en clase o en una cafeter\u00eda.</p> <p>Cada tipo de red se adapta a diferentes necesidades y escalas, utilizando tecnolog\u00edas espec\u00edficas para garantizar velocidad, estabilidad y conectividad.</p> Tipo de red Cobertura Tecnolog\u00edas clave Ejemplo WAN Global Fibra \u00f3ptica submarina, sat\u00e9lites, 4G/5G Internet MAN Ciudad o regi\u00f3n Fibra \u00f3ptica, WiMax, FDDI Red de una universidad LAN Edificio o campus Ethernet, WiFi, PLC WiFi en una oficina PAN Pocos metros Bluetooth, NFC, Zigbee Smartwatch conectado al m\u00f3vil"},{"location":"redes_02.html#22-segun-su-topologia","title":"2.2 Seg\u00fan su topolog\u00eda","text":"<p>La topolog\u00eda de red describe la forma f\u00edsica o l\u00f3gica en la que se conectan los dispositivos entre s\u00ed. Es como el plano o el esquema de la red.</p>"},{"location":"redes_02.html#221-topologia-en-bus","title":"2.2.1 Topologia en bus","text":"<ul> <li>Todos los dispositivos est\u00e1n conectados a un \u00fanico cable central (llamado \u201cbus\u201d o \u201ctroncal\u201d), por donde circulan todos los datos en ambas direcciones.</li> <li>Ventajas:<ul> <li>Es econ\u00f3mica y f\u00e1cil de instalar.</li> </ul> </li> <li>Inconvenientes: <ul> <li>Si el cable principal se rompe, toda la red deja de funcionar.</li> <li>Cuantos m\u00e1s dispositivos se conectan, m\u00e1s lenta se vuelve por la congesti\u00f3n.</li> </ul> </li> <li>Ejemplo: redes antiguas en escuelas u oficinas que usaban cable coaxial. Hoy casi no se utiliza.</li> </ul>"},{"location":"redes_02.html#222-topologia-en-estrella","title":"2.2.2 Topolog\u00eda en estrella","text":"<ul> <li>Todos los dispositivos est\u00e1n conectados a un nodo central (como un switch o un router). Ese nodo dirige todo el tr\u00e1fico de datos.</li> <li>Ventajas: <ul> <li>Si un dispositivo falla, la red sigue funcionando con normalidad.</li> <li>F\u00e1cil de gestionar.</li> </ul> </li> <li>Inconvenientes:<ul> <li>Si el nodo central falla, la red completa deja de operar.</li> </ul> </li> <li>Ejemplo: la mayor\u00eda de redes dom\u00e9sticas: todos los m\u00f3viles, port\u00e1tiles y consolas se conectan al router Wi-Fi.</li> </ul>"},{"location":"redes_02.html#223-topologia-en-anillo","title":"2.2.3 Topolog\u00eda en anillo","text":"<ul> <li>En esta topolog\u00eda, los dispositivos est\u00e1n conectados formando un c\u00edrculo cerrado. Cada uno se comunica con el siguiente, y los datos viajan de nodo en nodo hasta llegar a su destino. El env\u00edo puede ser en una sola direcci\u00f3n (anillo simple) o en ambas (anillo doble).</li> <li>Ventajas:<ul> <li>No necesita un nodo central, por lo que no depende de un \u00fanico punto de fallo, como en la topolog\u00eda en estrella.     </li> <li>El tr\u00e1fico de datos es ordenado y predecible, lo que puede mejorar la eficiencia en redes peque\u00f1as.</li> </ul> </li> <li>Inconvenientes:<ul> <li>Si un solo dispositivo o conexi\u00f3n falla, toda la red puede quedar inutilizada.</li> <li>En redes grandes, puede ser m\u00e1s lenta, ya que los datos deben pasar por muchos nodos hasta llegar al destino.</li> <li>La instalaci\u00f3n y el mantenimiento pueden ser m\u00e1s complejos que en otras topolog\u00edas.</li> </ul> </li> <li>Ejemplo: algunas antiguas redes de fibra \u00f3ptica o estaciones de trabajo especializadas. Hoy en d\u00eda est\u00e1n casi en desuso, pero se siguen estudiando por su valor hist\u00f3rico y conceptual.</li> </ul>"},{"location":"redes_02.html#224-topologia-en-malla","title":"2.2.4 Topolog\u00eda en malla","text":"<p>En una topolog\u00eda en malla, cada dispositivo est\u00e1 conectado a varios otros dispositivos dentro de la red. Esto crea m\u00faltiples caminos posibles para enviar los datos. No hay una \u00fanica ruta: los datos pueden circular por diferentes caminos, lo que hace que la red sea muy resistente y eficiente. - Ventajas:     - Es muy fiable porque si una conexi\u00f3n falla, los datos pueden tomar otra ruta.     - Ofrece alta velocidad y buen rendimiento, ya que el tr\u00e1fico se reparte por distintos caminos.     - Ideal para entornos donde la disponibilidad constante es fundamental. - Inconvenientes:     - Es costosa y compleja de implementar por la cantidad de cables y conexiones necesarias.     - Necesita una gesti\u00f3n m\u00e1s avanzada. - Ejemplo: la estructura de Internet se basa en una malla parcial, donde los servidores y routers de todo el mundo est\u00e1n interconectados por m\u00faltiples rutas. As\u00ed, si una parte de la red falla (por ejemplo, un cable submarino), los datos pueden redirigirse autom\u00e1ticamente por otro camino.</p>"},{"location":"redes_02.html#225-topologia-hibrida","title":"2.2.5 Topolog\u00eda h\u00edbrida","text":"<p>La topolog\u00eda h\u00edbrida combina dos o m\u00e1s topolog\u00edas diferentes (como estrella, bus, anillo o malla) dentro de una misma red. Se dise\u00f1a as\u00ed para adaptarse mejor a las necesidades reales de una organizaci\u00f3n o sistema.  - Ventajas:     - Es muy flexible y escalable: se adapta f\u00e1cilmente al crecimiento o a nuevas necesidades.     - Permite aprovechar lo mejor de cada topolog\u00eda seg\u00fan el caso.     - Ideal para redes grandes o complejas, como las de empresas, universidades o instituciones p\u00fablicas. - Inconvenientes:     - Puede ser m\u00e1s costosa y compleja de dise\u00f1ar, configurar y mantener.     - Requiere una planificaci\u00f3n cuidadosa para que todos los componentes se integren correctamente. - Ejemplo: en una empresa grande, cada departamento puede tener una red en estrella (con todos los dispositivos conectados a un switch), y luego todos los departamentos est\u00e1n conectados entre s\u00ed mediante una red en malla o en bus, formando una topolog\u00eda h\u00edbrida.</p> <p>Cada topolog\u00eda tiene sus ventajas y desventajas, y la elecci\u00f3n depende del costo, rendimiento y seguridad que se necesite. En la actualidad, las m\u00e1s utilizadas son estrella y malla, debido a su eficiencia y estabilidad.</p>"},{"location":"redes_02.html#23-segun-su-nivel-de-acceso-o-privacidad","title":"2.3 Seg\u00fan su nivel de acceso o privacidad","text":"<p>Las redes no solo se diferencian por su tama\u00f1o o forma, sino tambi\u00e9n por qui\u00e9n puede acceder a ellas. Algunas redes est\u00e1n cerradas y protegidas, mientras que otras son abiertas para cualquiera. Tambi\u00e9n existen redes mixtas, que combinan zonas p\u00fablicas y privadas. Y por \u00faltimo, tenemos las VPN, una herramienta que ayuda a conectarse a redes privadas de forma segura desde cualquier lugar.</p>"},{"location":"redes_02.html#231-redes-privadas","title":"2.3.1 Redes privadas","text":"<p>Son redes cerradas y seguras, donde solo los usuarios autorizados pueden acceder y utilizar sus servicios. Se usan en empresas, hospitales, instituciones y organizaciones para garantizar privacidad y control. Por ejemplo, la red interna de una empresa a la que solo pueden acceder empleados desde sus oficinas.</p> <p>Si esta red privada incluye servicios como correo, p\u00e1ginas web internas o almacenamiento solo accesible desde dentro, se llama Intranet.</p>"},{"location":"redes_02.html#232-redes-publicas","title":"2.3.2 Redes p\u00fablicas","text":"<p>Son abiertas a cualquier usuario, permitiendo la comunicaci\u00f3n y el intercambio de informaci\u00f3n sin restricciones de acceso. Son muy pr\u00e1cticas, pero hay que tener cuidado: como est\u00e1n abiertas a todos, tambi\u00e9n son m\u00e1s vulnerables a ataques, virus o robo de datos.</p> <p>Ejemplos:  - Internet, en general, es la mayor red p\u00fablica del mundo. - Wi-Fi gratuito en cafeter\u00edas, bibliotecas o aeropuertos. - Redes m\u00f3viles 4G/5G accesibles sin credenciales especiales.</p> <p>\ud83d\udccc Consejo: nunca env\u00edes informaci\u00f3n personal o sensible desde una red p\u00fablica sin protecci\u00f3n adicional.</p>"},{"location":"redes_02.html#233-redes-hibridas","title":"2.3.3 Redes h\u00edbridas","text":"<p>Son redes que combinan partes p\u00fablicas y privadas. Algunas zonas est\u00e1n abiertas a todos, y otras est\u00e1n protegidas y requieren usuario y contrase\u00f1a. Por ejemplo, una universidad que ofrece Wi-Fi p\u00fablico para estudiantes y visitantes, pero restringe el acceso a ciertos sistemas administrativos o bases de datos internas solo para empleados.</p>"},{"location":"redes_02.html#234-vpn-virtual-private-network","title":"2.3.4 VPN (Virtual Private Network)","text":"<p>Una VPN no es una red en s\u00ed misma, sino una tecnolog\u00eda que crea un canal seguro para acceder a una red privada a trav\u00e9s de Internet. Se usa para proteger datos y garantizar privacidad en conexiones remotas. La VPN crea un t\u00fanel seguro y cifrado entre el usuario y la red privada, evitando que terceros puedan interceptar la informaci\u00f3n.</p> <p>Por ejemplo, un empleado que trabaja desde casa usa una VPN corporativa para conectarse a la red privada de su empresa y acceder a documentos internos como si estuviera en la oficina. Tambi\u00e9n se usa para navegar con mayor privacidad, ya que impide que otros (como hackers o tu propio proveedor de Internet) rastreen lo que haces online.</p>"},{"location":"redes_02.html#24-ejercicios","title":"2.4 Ejercicios","text":"<p>1. Preguntas de comprensi\u00f3n (respuesta breve) - \u00bfQu\u00e9 diferencia principal hay entre una red LAN y una red WAN? - Pon un ejemplo real de una red MAN y explica por qu\u00e9 se clasifica como tal. - \u00bfCu\u00e1l es la diferencia entre Wi-Fi y Bluetooth? \u00bfEn qu\u00e9 tipo de red se usa cada uno? - \u00bfPor qu\u00e9 las redes p\u00fablicas pueden ser menos seguras que las privadas? - \u00bfQu\u00e9 ventaja tiene una topolog\u00eda en estrella frente a una topolog\u00eda en bus?</p> <p>2. Verdadero o falso (justifica si es falso) - Las redes WAN solo se usan dentro de edificios peque\u00f1os. - La red de una universidad que conecta varios campus es un ejemplo de red MAN. - Una red PAN utiliza tecnolog\u00edas de largo alcance como 4G o sat\u00e9lite. - En una topolog\u00eda en malla, los datos solo pueden ir por un \u00fanico camino. - Las redes h\u00edbridas combinan caracter\u00edsticas de redes p\u00fablicas y privadas.</p> <p>3. Relaciona columnas Relaciona correctamente cada concepto con su descripci\u00f3n o ejemplo.</p> Concepto Descripci\u00f3n o ejemplo WiMax A. Comunicaci\u00f3n inal\u00e1mbrica de muy corto alcance VPN B. Canal seguro para acceder a una red privada NFC c: Tecnolog\u00eda usada en redes MAN (hasta 50km) LAN D. Red dentro de un edificio como una oficina Topolog\u00eda en anillo E. Dispositivos conectados en c\u00edrculo"},{"location":"redes_03.html","title":"3. Elementos f\u00edsicos de una red","text":""},{"location":"redes_03.html#31-introduccion","title":"3.1 Introducci\u00f3n","text":"<p>Para que una red funcione correctamente, se necesita una serie de elementos que pueden clasificarse en tres grandes grupos: - Dispositivos finales (o nodos): los que usamos directamente, como ordenadores o m\u00f3viles. - Dispositivos de red: gestionan el tr\u00e1fico de datos entre los dispositivos. - Medios de transmisi\u00f3n: los canales por donde viaja la informaci\u00f3n, como cables o se\u00f1ales inal\u00e1mbricas.</p>"},{"location":"redes_03.html#32-dispositivos-de-una-red","title":"3.2 Dispositivos de una red","text":""},{"location":"redes_03.html#321-dispositivos-finales","title":"3.2.1 Dispositivos finales","text":"<p>Son los usuarios finales de la red, es decir, los equipos con los que interactuamos directamente. - Ordenadores (de sobremesa y port\u00e1tiles): permiten navegar por Internet, acceder a archivos en red o comunicarse con otros equipos.  - Tel\u00e9fonos inteligentes y tablets: acceden a la red mediante Wi-Fi o redes m\u00f3viles para chatear, ver v\u00eddeos o usar apps. - Servidores: almacenan informaci\u00f3n para que otros dispositivos la consulten. Por ejemplo, un servidor web almacena p\u00e1ginas web. - Impresoras y perif\u00e9ricos en red: pueden ser compartidos por varios usuarios sin conexi\u00f3n f\u00edsica directa.</p> <p>Estos dispositivos se llaman tambi\u00e9n hosts o nodos finales. Son los puntos donde nace o termina la informaci\u00f3n que circula por la red.</p>"},{"location":"redes_03.html#322-dispositivos-de-red","title":"3.2.2 Dispositivos de red","text":"<p>Son los intermediarios que hacen posible la conexi\u00f3n y la comunicaci\u00f3n entre dispositivos finales. Se encargan de dirigir y controlar el flujo de datos para que llegue al destino correcto.</p>"},{"location":"redes_03.html#basicos","title":"B\u00e1sicos","text":"<p>Son esenciales para la creaci\u00f3n y funcionamiento de una red inform\u00e1tica. - Hub: env\u00eda los datos a todos los dispositivos conectados. No es eficiente, por eso hoy casi no se usa. - Switch: mucho m\u00e1s inteligente que el hub. Env\u00eda los datos solo al destinatario correcto, mejorando el rendimiento de la red. existen distintos tipos de switches seg\u00fan sus caracter\u00edsticas y usos:     - Switch no gestionable: es el m\u00e1s sencillo y econ\u00f3mico, no requiere configuraci\u00f3n y funciona autom\u00e1ticamente, por lo que es ideal para redes dom\u00e9sticas o peque\u00f1as oficinas.      - Switch gestionable: permite configurar opciones avanzadas como VLANs y control de tr\u00e1fico, siendo apropiado para redes profesionales o educativas que necesitan mayor control y seguridad.     - Switch con PoE (Power over Ethernet): puede alimentar dispositivos como c\u00e1maras IP o puntos de acceso WiFi a trav\u00e9s del mismo cable de red que transmite los datos, lo que lo hace muy \u00fatil en instalaciones donde no se dispone de tomas de corriente cerca de los dispositivos. - Router: conecta distintas redes entre s\u00ed (por ejemplo, una red local con Internet). Tambi\u00e9n reparte direcciones IP dentro de la red. - M\u00f3dem: convierte la se\u00f1al de Internet del proveedor (fibra, ADSL, cable) en se\u00f1al digital para nuestros dispositivos. A menudo est\u00e1 integrado dentro del router.</p>"},{"location":"redes_03.html#complementarios","title":"Complementarios","text":"<p>Son dispositivos que mejoran la cobertura, estabilidad y alcance de la red. - Punto de acceso (Access Point, AP): dispositivo que permite conectar dispositivos inal\u00e1mbricos a una red cableada, ampliando la cobertura Wi-Fi y mejorando la conectividad en zonas con se\u00f1al d\u00e9bil o inexistente. Se usa en oficinas, empresas y grandes espacios donde la cobertura de un router no es suficiente. - Repetidor Wi-Fi: dispositivo que capta una se\u00f1al WiFi existente y la retransmite para ampliar su cobertura en zonas con baja conectividad. A diferencia del punto de acceso, no se conecta por cable, lo que puede reducir su velocidad en algunos casos. - Firewall (cortafuegos): dispositivo de seguridad que protege la red frente a accesos no autorizados y ciberataques, filtrando el tr\u00e1fico de datos. Puede estar integrado en el router o ser un equipo independiente, aunque tambi\u00e9n existen versiones en software.</p>"},{"location":"redes_03.html#33-medios-de-transmision","title":"3.3 Medios de transmisi\u00f3n","text":"<p>Son los canales a trav\u00e9s de los cuales viajan los datos en la red. Se dividen en medios cableados e inal\u00e1mbricos.</p>"},{"location":"redes_03.html#331-medios-cableados","title":"3.3.1 Medios cableados","text":"<p>Los datos se transmiten a trav\u00e9s de cables f\u00edsicos, como cables de cobre o fibra \u00f3ptica, ofreciendo una conexi\u00f3n m\u00e1s estable y segura.</p>"},{"location":"redes_03.html#cable-coaxial","title":"Cable coaxial","text":"<p>Antiguamente se usaba en redes locales, pero hoy en d\u00eda se emplea m\u00e1s en televisi\u00f3n por cable y sistemas de videovigilancia. Tiene una buena resistencia a interferencias, pero ha sido reemplazado en muchas redes por otros tipos de cable de mejor rendimiento y m\u00e1s f\u00e1ciles de instalar.</p>"},{"location":"redes_03.html#par-trenzado","title":"Par trenzado","text":"<p>Es el cable m\u00e1s utilizado en redes Ethernet (las que usan cable para conectarse a Internet). Est\u00e1 compuesto por pares de hilos de cobre trenzados, lo que ayuda a reducir interferencias. Se conecta a los dispositivos mediante conectores RJ-45 y se clasifica seg\u00fan su tipo de apantallamiento y categor\u00eda de rendimiento. Estos vienen impresos en la propia cubierta de pl\u00e1stico del cable, por lo que es posible identificarlos con solo echar un vistazo.</p> <p>Seg\u00fan su tipo de apantallamiento, los cables de par trenzado pueden ser: - UTP (Unshielded Twisted Pair): sin apantallamiento adicional, solo protege por el trenzado de los hilos. Es el m\u00e1s com\u00fan en redes dom\u00e9sticas y de oficina. - FTP (Foiled Twisted Pair): tiene una l\u00e1mina de aluminio que cubre todos los pares, ofreciendo mayor protecci\u00f3n sin perder flexibilidad. Se usa en lugares con cableado el\u00e9ctrico cercano. - STP (Shielded Twisted Pair): cada par de hilos tiene su propia malla met\u00e1lica, lo que brinda la mejor protecci\u00f3n contra interferencias. Se usa en entornos industriales o con muchos dispositivos electr\u00f3nicos. - SFTP (Shielded and Foiled Twisted Pair): combina una l\u00e1mina de aluminio general que recubre todos los pares (como el FTP) y una malla met\u00e1lica individual para cada par (como el STP). Ofrece una protecci\u00f3n superior frente a interferencias electromagn\u00e9ticas y de radiofrecuencia. Es ideal para entornos muy exigentes donde la integridad de la se\u00f1al es cr\u00edtica, como centros de datos o instalaciones con alta densidad de equipos electr\u00f3nicos.</p> <p>La categor\u00eda indica el nivel de velocidad y rendimiento del cable: - Cat 5e: hasta 1 Gbps en 100 metros. Mejor que el Cat 5 en reducci\u00f3n de interferencias. - Cat 6: hasta 10 Gbps en 55 metros. Mayor aislamiento frente a interferencias. - Cat 7 y superiores: mejor rendimiento, mayor velocidad y m\u00e1s blindaje. Usados en centros de datos y redes de alto rendimiento.</p> <p>\u26a0\ufe0f Dato importante: cuidado si contratas un servicio de Internet de, por ejemplo, 600 Mbps, pero utiliz\u00e1is un cable de categor\u00eda 5, ya que estar\u00e1s limitando la velocidad a la m\u00e1xima que permite el cable (en este caso, 100 Mbps).</p>"},{"location":"redes_03.html#fibra-optica","title":"Fibra \u00f3ptica","text":"<p>En lugar de cobre, usa hilos delgados de vidrio o pl\u00e1stico para transmitir datos mediante pulsos de luz, lo que permite mayores velocidades y distancias sin p\u00e9rdida de se\u00f1al. Es la tecnolog\u00eda m\u00e1s usada hoy en d\u00eda para conexiones de Internet r\u00e1pidas, como las que instalan los operadores en hogares y empresas.</p> <ul> <li>Fibra monomodo: transmite un \u00fanico haz de luz en l\u00ednea recta sin rebotes, lo que reduce la p\u00e9rdida de se\u00f1al y permite alcanzar distancias superiores a 100 km con alta velocidad. Se usa en conexiones de larga distancia, como la comunicaci\u00f3n entre distintas ciudades o pa\u00edses.</li> <li>Fibra multimodo: permite la transmisi\u00f3n de varios haces de luz simult\u00e1neamente, los cuales rebotan dentro del n\u00facleo de la fibra. Es m\u00e1s econ\u00f3mica y f\u00e1cil de instalar, aunque pierde calidad con la distancia. Se utiliza en redes dentro de edificios, universidades, centros de datos y oficinas, con un alcance de hasta 2 km.</li> </ul> <p>Para conectar la fibra \u00f3ptica a los dispositivos de red, se utilizan diferentes tipos de conectores, seg\u00fan el tipo de instalaci\u00f3n y equipo utilizado. Los m\u00e1s comunes son: SC, LC, ST, FC, entre otros.</p>"},{"location":"redes_03.html#332-medios-inalambricos","title":"3.3.2 Medios inal\u00e1mbricos","text":"<p>Transmiten informaci\u00f3n a trav\u00e9s de ondas electromagn\u00e9ticas, eliminando la necesidad de cables f\u00edsicos. Son m\u00e1s flexibles y permiten movilidad, aunque pueden ser m\u00e1s vulnerables a interferencias y variaciones en la se\u00f1al.</p>"},{"location":"redes_03.html#wifi-wireless-fidelity","title":"WiFi (Wireless Fidelity)","text":"<p>Tecnolog\u00eda que permite conectar dispositivos a Internet sin necesidad de cables. Se utiliza en hogares, oficinas y lugares p\u00fablicos. Su velocidad y alcance dependen de la versi\u00f3n: - Wi-Fi 4: Hasta 600 Mbps. - Wi-Fi 5: Hasta 1.3 Gbps, mayor estabilidad. - Wi-Fi 6: Hasta 9.6 Gbps, mejor cobertura y menor latencia. - Wi-Fi 7 (en desarrollo): Mejor rendimiento y capacidad para entornos con m\u00faltiples dispositivos conectados.</p> <p>Cuanto m\u00e1s reciente es la versi\u00f3n, mayor velocidad y mejor cobertura ofrece. No obstante, tambi\u00e9n depende del router y de si los dispositivos son compatibles con esa versi\u00f3n.</p>"},{"location":"redes_03.html#bluetooth","title":"Bluetooth","text":"<p>Tecnolog\u00eda dise\u00f1ada para la transmisi\u00f3n de datos a corta distancia, , donde no se necesita gran velocidad, pero s\u00ed comodidad y bajo consumo de energ\u00eda. Por ejemplo como en auriculares, ratones, teclados inal\u00e1mbricos y algunos dispositivos inteligentes. - Bluetooth 4.0 - 4.2: bajo consumo de energ\u00eda, ideal para wearables y accesorios inteligentes. - Bluetooth 5.0: mayor alcance (hasta 240 metros) y mejor rendimiento en la transmisi\u00f3n de datos.</p>"},{"location":"redes_03.html#redes-moviles-y-satelites","title":"Redes m\u00f3viles y sat\u00e9lites","text":"<p>Se utilizan en comunicaciones de larga distancia. Por ejemplo: - Redes m\u00f3viles 4G y 5G, que permiten la conexi\u00f3n a Internet desde tel\u00e9fonos y dispositivos m\u00f3viles. - Internet por sat\u00e9lite, \u00fatil en zonas donde no llega la fibra \u00f3ptica, como en \u00e1reas rurales o en barcos.</p>"},{"location":"redes_03.html#ejercicios","title":"Ejercicios","text":"<p>1. Comparativa de switches. Investiga al menos tres modelos de switches que se venden actualmente. Anota: - Marca y modelo - Foto y enlace a la web donde lo has encontrado  - N\u00famero de puertos - Velocidad (100 Mbps, 1 Gbps\u2026) - Si son gestionables o no - Precio aproximado - Ejemplo de b\u00fasqueda: \u201cswitch 8 puertos Gigabit Amazon\u201d o en la web de fabricantes como TP-Link, D-Link o Cisco.</p> <p>2. Busca un router dom\u00e9stico. Anota sus caracter\u00edsticas principales: - Marca y modelo - Foto y enlace a la web donde lo has encontrado - Version Wi-Fi que ofrece - N\u00famero de puertos LAN - Si integra m\u00f3dem o no</p> <p>3. Sobre cableado. Encuentra un cable Cat 6 y un Cat 5e en una tienda online. Compara: - Foto y enlace a la web donde lo has encontrado - Precio por metro - Diferencias visibles o especificaciones destacadas - \u00bfPor qu\u00e9 el Cat 6 es m\u00e1s caro?</p> <p>4. Sobre par trenzado. Lee cada una de las siguientes situaciones y elige el tipo de cable de par trenzado m\u00e1s adecuado (UTP, FTP, STP o SFTP). Justifica tu elecci\u00f3n brevemente con una frase. A. Una vivienda particular donde solo se va a conectar un router al ordenador mediante cable de red y no hay interferencias el\u00e9ctricas cerca. B. Una oficina con impresoras y ordenadores donde el cableado pasa muy cerca de tubos fluorescentes y enchufes m\u00faltiples. C. Una f\u00e1brica con maquinaria industrial y motores el\u00e9ctricos que generan muchas interferencias electromagn\u00e9ticas. D. Un centro de datos de alto rendimiento, donde hay cientos de servidores y switches en armarios de red muy pr\u00f3ximos entre s\u00ed.</p>"},{"location":"redes_04.html","title":"4. Fundamentos l\u00f3gicos de las redes","text":"<p>Para que una red funcione correctamente, no basta con conectar cables o activar el Wi-Fi. Detr\u00e1s hay una estructura l\u00f3gica que permite que cada dispositivo tenga una direcci\u00f3n \u00fanica, sepa a qui\u00e9n puede hablar directamente, y cu\u00e1ndo necesita ayuda para salir a Internet. Esa l\u00f3gica es la que vamos a descubrir en esta unidad.</p>"},{"location":"redes_04.html#41-como-se-identifican-los-dispositivos-en-una-red","title":"4.1 \u00bfC\u00f3mo se identifican los dispositivos en una red?","text":"<p>Cada dispositivo conectado a una red necesita una identificaci\u00f3n \u00fanica dentro de esa red. Esta identificaci\u00f3n se realiza mediante la direcci\u00f3n IP, junto con otros elementos como la m\u00e1scara de red y el gateway. Estos valores permiten que los dispositivos puedan comunicarse entre s\u00ed de forma eficiente y que sepan a qui\u00e9n deben enviar los datos.</p>"},{"location":"redes_04.html#411-direccion-ip-que-es-y-por-que-es-necesaria","title":"4.1.1 Direcci\u00f3n IP: qu\u00e9 es y por qu\u00e9 es necesaria","text":"<p>La direcci\u00f3n IP (Internet Protocol) es un n\u00famero que identifica de forma \u00fanica a cada dispositivo dentro de una red. Funciona como si fuera la direcci\u00f3n postal de una casa: si no tienes direcci\u00f3n, no puedes recibir cartas. Del mismo modo, si un dispositivo no tiene direcci\u00f3n IP, no puede enviar ni recibir datos en una red.</p> <p>Es importante asignar y gestionar bien las direcciones IP, ya que si dos dispositivos comparten la misma, se produce un conflicto de red que impide su correcto funcionamiento.</p> <p>Existen dos versiones principales de direcciones IP: IPv4 e IPv6.</p>"},{"location":"redes_04.html#ipv4","title":"IPv4","text":"<p>Una direcci\u00f3n IPv4 se representa as\u00ed: Ejemplo: 192.168.1.25</p> <p>Est\u00e1 compuesta por cuatro n\u00fameros separados por puntos, y cada n\u00famero puede ir de 0 a 255. Internamente, cada uno representa 8 bits, lo que da un total de 32 bits por direcci\u00f3n IP. </p> <p>Esto permite generar m\u00e1s de 4 mil millones de direcciones \u00fanicas. Parece mucho, pero con tantos dispositivos conectados en el mundo (m\u00f3viles, ordenadores, tablets, relojes, frigor\u00edficos...), \u00a1se nos han quedado cortas!</p>"},{"location":"redes_04.html#ipv6","title":"IPv6","text":"<p>Para solucionar el problema del agotamiento de direcciones IPv4, se cre\u00f3 IPv6, una versi\u00f3n mejorada que permite much\u00edsimas m\u00e1s direcciones.</p> <p>Una direcci\u00f3n IPv6 se ve muy diferente: Ejemplo: 2001:0db8:85a3:0000:0000:8a2e:0370:7334</p> <p>Tiene un formato hexadecimal (usa letras y n\u00fameros), separada por dos puntos (:). Internamente, usa 128 bits en lugar de 32. Esto permite un n\u00famero tan grande de direcciones, que pr\u00e1cticamente nunca se acabar\u00e1n. El n\u00famero total es de 2^128 direcciones: una cifra con 39 d\u00edgitos, \u00a1pr\u00e1cticamente inagotable!</p> <p>Algunas redes ya lo est\u00e1n utilizando, especialmente en grandes proveedores y servicios como Google o Facebook. Pero IPv4 a\u00fan se sigue usando much\u00edsimo, sobre todo en redes locales. Por eso es importante conocer ambas versiones.</p>"},{"location":"redes_04.html#412-mascara-de-red","title":"4.1.2 M\u00e1scara de red","text":"<p>La m\u00e1scara de red es un n\u00famero que se utiliza junto con la direcci\u00f3n IP para determinar qu\u00e9 parte de la IP identifica a la red y qu\u00e9 parte identifica al dispositivo (host) dentro de esa red.</p> <p>Es fundamental para que un equipo sepa si otro est\u00e1 en su misma red local (puede comunicarse directamente) o en otra red (necesita usar el gateway).</p> <p>Tiene el mismo formato que una direcci\u00f3n IP: Ejemplo: 255.255.255.0</p> <p>Esto significa que los tres primeros grupos de n\u00fameros (24 bits) identifican la red, y el \u00faltimo grupo (8 bits) se usa para numerar a los dispositivos dentro de esa red.</p> <p>Ejemplo pr\u00e1ctico: - Direcci\u00f3n IP: 192.168.1.25 - M\u00e1scara de red: 255.255.255.0</p> <p>Con esta m\u00e1scara, todos los dispositivos que comparten los tres primeros n\u00fameros (192.168.1) estar\u00e1n en la misma red local, y podr\u00e1n comunicarse directamente. Si, en cambio, un equipo tiene esta IP: 192.168.2.10, ya no estar\u00e1 en la misma red, porque cambia el tercer n\u00famero. En ese caso, se necesita usar un gateway para comunicar ambos dispositivos.</p> <p>Importante: - La m\u00e1scara no identifica a un dispositivo. - No se puede repetir en la misma red una m\u00e1scara incompatible. - Ayuda a dividir redes grandes en redes m\u00e1s peque\u00f1as, lo que mejora la organizaci\u00f3n y el rendimiento.</p>"},{"location":"redes_04.html#413-gateway","title":"4.1.3 Gateway","text":"<p>El gateway (tambi\u00e9n llamado puerta de enlace) es la direcci\u00f3n IP del dispositivo que act\u00faa como intermediario entre la red local y otras redes, como por ejemplo, Internet.</p> <p>Cuando un dispositivo necesita comunicarse con otro que no est\u00e1 en su misma red local, el mensaje debe salir de la red. Para eso, se env\u00eda al gateway, que se encarga de reenviarlo al destino correcto.</p> <p>El gateway suele ser el router de la red.</p> <p>Importante: - Todos los dispositivos de la red deben tener configurado el mismo gateway (normalmente el router). - Si no se configura el gateway, el dispositivo no podr\u00e1 comunicarse con el exterior (solo dentro de la red local).</p>"},{"location":"redes_04.html#414-direccion-de-red","title":"4.1.4 Direcci\u00f3n de red","text":"<p>La direcci\u00f3n de red es una direcci\u00f3n especial que representa a toda una red. No es de un equipo, sino que identifica al conjunto de dispositivos conectados a la misma red. Se calcula usando la direcci\u00f3n IP del dispositivo y la m\u00e1scara de red. La parte de red queda igual, y la parte de host se pone a ceros.</p> <p>Ejemplo: - IP del equipo: 192.168.1.25 - M\u00e1scara: 255.255.255.0 - Direcci\u00f3n de red: 192.168.1.0</p> <p>Todos los equipos con IP que empiece por 192.168.1. estar\u00e1n en la misma red.</p>"},{"location":"redes_04.html#415-direccion-de-broadcast","title":"4.1.5 Direcci\u00f3n de broadcast","text":"<p>La direcci\u00f3n de broadcast es una direcci\u00f3n IP especial que se utiliza para enviar un mensaje a todos los dispositivos de una red local al mismo tiempo.</p> <p>La direcci\u00f3n de broadcast se obtiene tomando: - La direcci\u00f3n de red (por ejemplo, 192.168.1.0) - La m\u00e1scara de red (por ejemplo, 255.255.255.0) - Y poniendo todos los bits de la parte de host en 1 (es decir, el n\u00famero m\u00e1s alto posible dentro de la red)</p> <p>Ejemplo: - Red: 192.168.1.0 - M\u00e1scara de red: 255.255.255.0 (/24). Esto significa que los \u00faltimos 8 bits son para los dispositivos (hosts). - La direcci\u00f3n de broadcast ser\u00e1 entonces: 192.168.1.255 </p> <p>Eso quiere decir que si enviamos un mensaje a 192.168.1.255, todos los dispositivos con IPs desde 192.168.1.1 hasta 192.168.1.254 lo recibir\u00e1n.</p> <p>\u00a1IMPORTANTE! No se debe asignar la direcci\u00f3n de broadcast a ning\u00fan dispositivo, porque no es un equipo, \u00a1es una direcci\u00f3n especial!</p>"},{"location":"redes_04.html#416-clases-de-direcciones-ip-y-notacion-cidr","title":"4.1.6 Clases de direcciones IP y notaci\u00f3n CIDR","text":"<p>Antes del sistema actual, las direcciones IP se organizaban en clases (A, B y C) seg\u00fan el tama\u00f1o de la red y la cantidad de dispositivos que pod\u00eda albergar. </p> <p>Este sistema fue \u00fatil inicialmente, pero ten\u00eda un problema importante: era muy poco flexible porque cada clase reservaba una cantidad fija de bits para la parte de red y otra para los dispositivos (hosts), y muchas veces se asignaban rangos enormes a redes que solo necesitaban unas pocas direcciones, lo que provocaba desperdicio de IPs. Por ejemplo, una empresa que necesitaba 200 direcciones ten\u00eda que usar una red de clase B con m\u00e1s de 65.000.</p> <p>Aun as\u00ed, conocer estas clases nos ayuda a entender c\u00f3mo se estructuran las direcciones IP y por qu\u00e9 existen ciertos rangos reservados.</p> Clase Rango de IPs N\u00ba de dispositivos disponibles Uso com\u00fan A 1.0.0.0 \u2013 126.255.255.255 M\u00e1s de 16 millones Grandes redes (ISPs) B 128.0.0.0 \u2013 191.255.255.255 Hasta 65.534 Universidades, empresas C 192.0.0.0 \u2013 223.255.255.25 Hasta 254 Redes dom\u00e9sticas o peque\u00f1as D 224.0.0.0 a 239.255.255.255 No se asigna a dispositivos individuales Usada para multicast (enviar informaci\u00f3n a varios dispositivos a la vez). E 240.0.0.0 a 255.255.255.255 No se asigna a dispositivos actualmente. Reservada para investigaci\u00f3n y uso futuro (no se usa com\u00fanmente). <p>La IP 127.0.0.1 no pertenece a ninguna clase. Es una direcci\u00f3n especial llamada localhost (la usamos para referirnos a nosotros mismos). </p> <p>Con el tiempo, el sistema por clases se qued\u00f3 corto. Por eso se cre\u00f3 una forma m\u00e1s flexible de gestionar direcciones IP: la notaci\u00f3n CIDR (Classless Inter-Domain Routing).</p> <p>CIDR permite especificar con precisi\u00f3n cu\u00e1ntos bits se usan para la red y cu\u00e1ntos para los dispositivos, sin necesidad de encajar en una clase fija. Se representa a\u00f1adiendo una barra y un n\u00famero al final de la direcci\u00f3n IP.</p> <p>Ejemplo: 192.168.1.0/24 - Ese /24 significa que los primeros 24 bits se usan para la parte de red, y los restantes (8 bits) para los hosts. Es decir, es equivalente a la m\u00e1scara 255.255.255.0.</p> Notaci\u00f3n CIDR M\u00e1scara equivalente N\u00ba de hosts disponibles /24 255.255.255.0 254 /25 255.255.255.128 126 /26 255.255.255.192 62 /30 255.255.255.252 2 <p>Cuanto mayor es el n\u00famero tras la barra, menos direcciones est\u00e1n disponibles para hosts (la red es m\u00e1s peque\u00f1a).</p> <p>Gracias a CIDR, es posible crear redes del tama\u00f1o exacto que se necesita, sin ajustarse a clases fijas.</p> <p>\ud83d\udccc En resumen: - Sistema por clases: fijo, limitado y con desperdicio de IPs. - CIDR: flexible, eficiente y el sistema m\u00e1s utilizado actualmente.</p>"},{"location":"redes_04.html#42-tipos-de-direcciones-ip","title":"4.2 Tipos de direcciones IP","text":"<p>Las direcciones IP se pueden clasificar de varias formas, seg\u00fan c\u00f3mo se usan y c\u00f3mo se asignan. Conocer estos tipos nos ayuda a entender mejor c\u00f3mo se organizan las redes y c\u00f3mo se conectan con el exterior, como por ejemplo, con Internet.</p>"},{"location":"redes_04.html#421-direcciones-publicas-y-privadas","title":"4.2.1 Direcciones p\u00fablicas y privadas","text":""},{"location":"redes_04.html#ip-privadas","title":"IP privadas","text":"<p>Las direcciones IP privadas son aquellas que solo se utilizan dentro de redes locales: en una casa, un centro educativo, una empresa, etc. No pueden usarse directamente en Internet.</p> <p>Por ejemplo, en tu casa, el m\u00f3vil, el port\u00e1til o la impresora usan IPs privadas como: 192.168.1.5 \u00f3 10.0.0.23</p> <p>Estas IPs las asigna el router y no son visibles desde fuera de la red.</p> Rangos reservados para IP privadas Clase Rango privado A 10.0.0.0 \u2013 10.255.255.255 B 172.16.0.0 \u2013 172.31.255.255 C 192.168.0.0 \u2013 192.168.255.255 <p>Cualquier direcci\u00f3n fuera de estos rangos no se considera privada.</p>"},{"location":"redes_04.html#ip-publicas","title":"IP p\u00fablicas","text":"<p>Las direcciones IP p\u00fablicas son las que se usan para comunicarse a trav\u00e9s de Internet. Son \u00fanicas a nivel mundial y permiten que los dispositivos sean accesibles desde fuera de la red local.</p> <p>Por ejemplo, el router de tu casa tiene una IP p\u00fablica asignada por tu proveedor de Internet (ISP). Desde fuera, se puede acceder a tu red a trav\u00e9s de esa direcci\u00f3n.</p> <p>Ejemplo de IP p\u00fablica: 85.120.45.33</p>"},{"location":"redes_04.html#422-direcciones-estaticas-vs-dinamicas","title":"4.2.2 Direcciones est\u00e1ticas vs din\u00e1micas","text":""},{"location":"redes_04.html#ip-estatica","title":"IP est\u00e1tica","text":"<p>Una IP est\u00e1tica es una direcci\u00f3n que se asigna manualmente a un dispositivo y permanece fija en el tiempo. Siempre ser\u00e1 la misma, aunque se reinicie el dispositivo o se desconecte de la red.</p> <p>Se usa en casos donde es importante que la IP no cambie, como: - Servidores - Impresoras en red - C\u00e1maras de seguridad</p>"},{"location":"redes_04.html#ip-dinamica","title":"IP din\u00e1mica","text":"<p>Una IP din\u00e1mica es una direcci\u00f3n que se asigna autom\u00e1ticamente a un dispositivo cada vez que se conecta a la red. Esta direcci\u00f3n puede cambiar con el tiempo.</p> <p>La asignaci\u00f3n la realiza un servidor DHCP, que normalmente es el propio router en redes dom\u00e9sticas.</p> <p>El DHCP (Dynamic Host Configuration Protocol) es un servicio que se encarga de dar una IP autom\u00e1ticamente a cada dispositivo que se conecta, sin necesidad de configurarla manualmente. Es como si el router fuera un \u201crepartidor de direcciones\u201d que entrega una IP libre a cada nuevo dispositivo que entra en la red.</p> <p>En casa, la mayor\u00eda de tus dispositivos (m\u00f3vil, port\u00e1til, tablet\u2026) usan IP din\u00e1mica gracias al DHCP.</p>"},{"location":"redes_04.html#423-rango-de-ips-disponibles-segun-la-mascara","title":"4.2.3 Rango de IPs disponibles seg\u00fan la m\u00e1scara","text":"<p>La m\u00e1scara de red define cu\u00e1ntas direcciones IP pueden usarse dentro de una red. Cuanto m\u00e1s grande es la red, m\u00e1s bits se reservan para los dispositivos (hosts).</p> <p>\u00bfC\u00f3mo se calcula? - Se parte de una direcci\u00f3n IP y una m\u00e1scara. - La m\u00e1scara indica cu\u00e1ntos bits est\u00e1n dedicados a la red (los primeros) y cu\u00e1ntos a los hosts (los \u00faltimos). - El n\u00famero de IPs disponibles para dispositivos es:   - 2^n - 2, donde n es el n\u00famero de bits para hosts.   - (Se restan 2: una para la direcci\u00f3n de red y otra para broadcast)</p> <p>Ejemplo pr\u00e1ctico - Direcci\u00f3n IP: 192.168.1.0 - M\u00e1scara: 255.255.255.0 \u2192 /24 - IP de red: 192.168.1.0 - Broadcast: 192.168.1.255</p> <p>IPs v\u00e1lidas: de 192.168.1.1 a 192.168.1.254 (254 direcciones disponibles)</p>"},{"location":"redes_04.html#ejercicios","title":"Ejercicios","text":"<p>1. Comprensi\u00f3n b\u00e1sica (tipo test o respuesta corta) - \u00bfQu\u00e9 funci\u00f3n cumple una direcci\u00f3n IP en una red? - \u00bfQu\u00e9 diferencia hay entre una direcci\u00f3n IP p\u00fablica y una privada? - Una direcci\u00f3n IPv4 est\u00e1 formada por:     - a) 16 bits     - b) 128 bits     - c) 32 bits     - d) 64 bits - Verdadero o falso (si es falso, justifica la respuesta)       - ___ La direcci\u00f3n de broadcast se puede asignar a un dispositivo.     - ___ El gateway solo se usa dentro de la red local.     - ___ El rango 10.0.0.0 \u2013 10.255.255.255 es un rango de IP privadas.     - ___ La m\u00e1scara de red define cu\u00e1ntos bits se usan para la direcci\u00f3n MAC.</p> <p>2. Ejercicios pr\u00e1cticos con IPs (c\u00e1lculo y an\u00e1lisis) - Dada la siguiente informaci\u00f3n de un dispositivo: direcci\u00f3n IP: 192.168.1.45 y m\u00e1scara de red: 255.255.255.0     - a) \u00bfCu\u00e1l es la direcci\u00f3n de red?     - b) \u00bfCu\u00e1l es la direcci\u00f3n de broadcast?     - c) \u00bfEste dispositivo puede comunicarse directamente con uno con IP 192.168.2.20?</p> <ul> <li> <p>\u00bfCu\u00e1ntos hosts (dispositivos) puedes tener en una red con m\u00e1scara /12? \u00bfY con /28?</p> </li> <li> <p>\u00bfQu\u00e9 direcci\u00f3n IP es v\u00e1lida dentro de esta red? Direcci\u00f3n de red: 172.16.0.0/16 (Justifica tu respuesta)</p> <ul> <li>a) 172.16.25.5</li> <li>b) 172.32.0.10</li> <li>c) 172.16.255.254</li> <li>d) 192.168.0.1</li> </ul> </li> </ul> <p>3. Identificaci\u00f3n y clasificaci\u00f3n - Clasifica las siguientes direcciones como privadas o p\u00fablicas:     - 10.0.0.5     - 172.20.15.33     - 85.23.90.1     - 192.168.100.100     - 200.45.0.1</p> <ul> <li>Clasifica las siguientes IPs seg\u00fan su clase (A, B o C) y especifica el n\u00famero m\u00e1ximo aproximado de hosts: <ul> <li>9.12.255.10</li> <li>150.25.34.7</li> <li>192.168.2.55</li> </ul> </li> </ul> <p>4. Aplicaci\u00f3n de CIDR - \u00bfCu\u00e1l es la m\u00e1scara equivalente a /25? \u00bfY cu\u00e1ntos dispositivos permite? - Escribe una red completa en notaci\u00f3n CIDR si sabes que:     - Direcci\u00f3n IP: 192.168.10.0     - M\u00e1scara: 255.255.255.192</p>"},{"location":"redes_05.html","title":"5. Dise\u00f1o l\u00f3gico y segmentaci\u00f3n de una red local","text":""},{"location":"redes_05.html#51-que-es-el-diseno-logico-de-una-red","title":"5.1 \u00bfQu\u00e9 es el dise\u00f1o l\u00f3gico de una red?","text":"<p>El dise\u00f1o l\u00f3gico de una red local (LAN) es la planificaci\u00f3n de c\u00f3mo se organizan los dispositivos y c\u00f3mo se comunican entre ellos, sin fijarnos en los cables o conexiones f\u00edsicas..</p> <p>En otras palabras, es decidir  qu\u00e9 direcciones IP usar\u00e1 cada equipo, c\u00f3mo saldr\u00e1n a Internet y si la red se dividir\u00e1 en grupos m\u00e1s peque\u00f1os (subredes).</p>"},{"location":"redes_05.html#511-que-decisiones-se-toman-en-el-diseno-logico","title":"5.1.1 \u00bfQu\u00e9 decisiones se toman en el dise\u00f1o l\u00f3gico?","text":"<p>Al dise\u00f1ar una red, se deben planificar cosas como: - Qu\u00e9 direcciones IP usar\u00e1n los dispositivos - Qu\u00e9 dispositivos habr\u00e1 (ordenadores, impresoras, routers, etc.) - Si todos estar\u00e1n en la misma red o en subredes separadas - C\u00f3mo saldr\u00e1n a Internet (por qu\u00e9 puerta de enlace o router) - Qu\u00e9 dispositivos deben comunicarse entre s\u00ed, y cu\u00e1les conviene mantener separados (por ejemplo: separar el tr\u00e1fico del personal del tr\u00e1fico del alumnado)</p> <p>En este curso aprenderemos a hacer esa organizaci\u00f3n mediante segmentaci\u00f3n, una forma sencilla y muy \u00fatil de dividir una red en partes m\u00e1s peque\u00f1as.</p>"},{"location":"redes_05.html#512-ejemplo-simple-de-diseno-logico","title":"5.1.2 Ejemplo simple de dise\u00f1o l\u00f3gico","text":"<p>Imagina que queremos conectar los dispositivos de una oficina: - Red IP elegida: 192.168.10.0/24 - Router (salida a Internet): 192.168.10.1 - Impresora con IP fija: 192.168.10.10 - Servidor de archivos con IP fija: 192.168.10.20 - Ordenadores de los empleados: reciben IP autom\u00e1ticamente entre 192.168.10.100 y 192.168.10.200 (por DHCP)</p> <p>Todos est\u00e1n en la misma red y pueden comunicarse entre s\u00ed.</p>"},{"location":"redes_05.html#513-parametros-basicos-que-necesita-cada-dispostivo","title":"5.1.3 Par\u00e1metros b\u00e1sicos que necesita cada dispostivo","text":"<p>Para que un dispositivo funcione bien en la red y tenga acceso a Internet, necesita: - Direcci\u00f3n IP: identifica de forma \u00fanica al dispositivo. Ej: 192.168.1.10 - M\u00e1scara de red: determina qu\u00e9 parte de la IP pertenece a la red y cu\u00e1l al host. Ej: 255.255.255.0 - Gateway: direcci\u00f3n del router que da acceso al exterior (Ej: 192.168.1.1)</p>"},{"location":"redes_05.html#514-errores-comunes-en-una-red-mal-disenada","title":"5.1.4 Errores comunes en una red mal dise\u00f1ada","text":"<ul> <li>IP duplicada: dos dispositivos con la misma IP entran en conflicto \u2192 ninguno se conecta bien.</li> <li>IP fuera del rango definido por la red y su m\u00e1scara.: el dispositivo no podr\u00e1 hablar con los dem\u00e1s ni con el router.</li> <li>M\u00e1scara incorrecta: el equipo no sabr\u00e1 qui\u00e9n est\u00e1 dentro de su red \u2192 no se comunica.</li> <li>Falta de gateway: el dispositivo no podr\u00e1 salir a Internet.</li> </ul>"},{"location":"redes_05.html#52-diseno-basico-de-una-red-sin-segmentacion","title":"5.2 Dise\u00f1o b\u00e1sico de una red sin segmentaci\u00f3n","text":"<p>Antes de aprender a dividir una red, es importante entender c\u00f3mo se dise\u00f1a una red sencilla, donde todos los dispositivos est\u00e1n conectados en el mismo grupo o segmento. Este tipo de red se utiliza habitualmente en hogares, aulas, peque\u00f1as oficinas o laboratorios.</p>"},{"location":"redes_05.html#521-elementos-comunes-en-una-red-local-simple","title":"5.2.1 Elementos comunes en una red local simple","text":"<ul> <li>Router: proporciona acceso a Internet y act\u00faa como puerta de enlace (gateway).</li> <li>Switch: conecta los dispositivos entre s\u00ed (si la red es cableada).</li> <li>Dispositivos finales: ordenadores, impresoras, c\u00e1maras, etc.</li> <li>Asignaci\u00f3n IP: puede hacerse manualmente o mediante DHCP.</li> </ul>"},{"location":"redes_05.html#522-ejemplo-red-de-una-biblioteca-escolar","title":"5.2.2 Ejemplo: red de una biblioteca escolar","text":"<p>Supongamos que se necesita conectar: - 1 router - 1 impresora de red - 6 ordenadores para usuarios - 2 ordenadores para el personal</p> <p>Se decide usar la red 192.168.10.0/24 (m\u00e1scara: 255.255.255.0), sin segmentaci\u00f3n, es decir, todos los dispositivos estar\u00e1n en la misma red local.</p> <p>Asignaci\u00f3n IP sugerida</p> Dispositivo Direcci\u00f3n IP Router 192.168.10.1 Impresora 192.168.10.10 PC1 (usuario) 192.168.10.20 PC2 (usuario) 192.168.10.21 PC3 (usuario) 192.168.10.22 PC4 (usuario) 192.168.10.23 PC5 (usuario) 192.168.10.24 PC6 (usuario) 192.168.10.25 PC1 (personal) 192.168.10.100 PC2 (personal) 192.168.10.101 <p>Todos los dispositivos usan: - M\u00e1scara: 255.255.255.0 - Gateway: 192.168.10.1</p>"},{"location":"redes_05.html#523-limitaciones-de-no-segmentar","title":"5.2.3 Limitaciones de no segmentar**","text":"<ul> <li>Todo el tr\u00e1fico circula por la misma red, lo que puede hacerla m\u00e1s lenta.</li> <li>No hay separaci\u00f3n entre usuarios y personal, lo que puede afectar la seguridad.</li> <li>Administrar muchos dispositivos se vuelve complicado.</li> </ul> <p>Por eso, en redes medianas o grandes, es recomendable dividir la red en subredes, usando subnetting. </p>"},{"location":"redes_05.html#53-diseno-de-redes-con-subredes-subnetting","title":"5.3 Dise\u00f1o de redes con subredes (subnetting)","text":""},{"location":"redes_05.html#531-que-es-el-subnetting","title":"5.3.1 \u00bfQu\u00e9 es el subnetting?","text":"<p>El subnetting es una t\u00e9cnica que permite dividir una red grande en varias redes m\u00e1s peque\u00f1as, llamadas subredes. Cada subred funciona de forma independiente dentro de la red general.</p>"},{"location":"redes_05.html#por-que-dividir-una-red","title":"\u00bfPor qu\u00e9 dividir una red?","text":"<ul> <li>Rendimiento: menos tr\u00e1fico por subred.</li> <li>Seguridad: se pueden aislar departamentos.</li> <li>Organizaci\u00f3n: se gestionan mejor las IPs.</li> <li>Eficiencia: se asignan solo las IPs necesarias a cada subred.</li> </ul>"},{"location":"redes_05.html#532-como-se-hace-el-subnetting","title":"5.3.2 \u00bfC\u00f3mo se hace el subnetting?","text":"<p>Partimos de una red inicial (por ejemplo, 192.168.1.0/24) y la queremos dividir en partes m\u00e1s peque\u00f1as.</p> <p>Antes de comenzar, es importante entender algunos conceptos clave: - Cuando dividimos una red, tomamos bits del campo de host para crear m\u00e1s subredes. A estos bits se les llama \"bits prestados\". Cuantos m\u00e1s bits prestemos, m\u00e1s subredes podemos crear, pero menos dispositivos podr\u00e1 tener cada subred. - La notaci\u00f3n CIDR (/n) indica cu\u00e1ntos bits est\u00e1n reservados para la parte de red. Por ejemplo, /24 significa que los primeros 24 bits de la IP pertenecen a la red, y el resto son para los hosts. - Para calcular subredes y hosts, usamos estas f\u00f3rmulas:   - N\u00ba de subredes = 2^n (donde n es el n\u00famero de bits prestados)   - N\u00ba de hosts por subred = 2^h - 2 (donde h es la cantidad de bits que quedan para los hosts)</p> <p>Una vez entendido esto, seguimos estos pasos:</p> <p>Paso 1: Determina cu\u00e1ntas subredes necesitas - Supongamos que queremos crear 4 subredes.  - Usa la f\u00f3rmula: N\u00ba de subredes = 2^n,  para calcular cu\u00e1ntos bits necesito prestar (busca el valor de n que te permita alcanzar o superar la cantidad de subredes requeridas) - 2\u00b2 = 4 \u2192 necesitas 2 bits prestados del campo de host.</p> <p>Paso 2: Calcula el nuevo prefijo CIDR - Tu red original era /24.  - Si prestas 2 bits: 24 + 2 = /26 - Esto significa que los primeros 26 bits ahora identifican la subred.</p> <p>Paso 3: Calcula cu\u00e1ntos hosts puedes tener por subred - Con /26, quedan 6 bits para hosts - N\u00ba de hosts = 2^6 - 2 = 62 hosts por subred (Se restan 2: una IP para red y otra para broadcast)</p> <p>Paso 4: Divide la red en subredes - En /26, el bloque de IPs se mueve de 64 en 64 (porque 2\u2076 = 64). </p> <p>Entonces las subredes ser\u00edan:</p> Subred Direcci\u00f3n de red Rango de IPs disponibles Broadcast 1 192.168.1.0 192.168.1.1 - 192.168.1.62 192.168.1.63 2 192.168.1.64 192.168.1.65 - 192.168.1.126 192.168.1.127 3 192.168.1.128 192.168.1.129 - 192.168.1.190 192.168.1.191 4 192.168.1.192 192.168.1.193 - 192.168.1.254 192.168.1.255 <p>Cada subred tiene 62 IPs \u00fatiles.</p> <p>Como ves, el proceso de subnetting sigue una l\u00f3gica clara: identificas cu\u00e1ntas subredes necesitas, prestas bits, y divides el espacio de direcciones de forma ordenada.</p> <p>Ejercicio 1. Tienes la red 192.168.10.0/24 y necesitas dividirla en 8 subredes iguales. - \u00bfCu\u00e1ntos bits debes tomar prestados del campo de host? - \u00bfCu\u00e1l ser\u00e1 el nuevo prefijo CIDR? - \u00bfCu\u00e1ntas direcciones IP podr\u00e1 tener cada subred? - Enumera las 8 subredes indicando:   - Direcci\u00f3n de red   - Rango de IPs disponibles para hosts   - Direcci\u00f3n de broadcast </p> <p>Ejercicio 2. La red base asignada a un campus educativo es 172.16.0.0/16. El campus tiene varios edificios y quiere crear 16 subredes iguales, una para cada \u00e1rea del centro. Divide la red usando subnetting cl\u00e1sico.</p>"},{"location":"redes_05.html#54-subnetting-con-vlsm-mascara-variable","title":"5.4 Subnetting con VLSM (m\u00e1scara variable)","text":"<p>Cuando usamos subnetting b\u00e1sico (como en el ejemplo anterior), dividimos la red en subredes del mismo tama\u00f1o. Esto a veces desperdicia direcciones IP, especialmente si algunos grupos necesitan pocas y otros muchas.</p> <p>VLSM (Variable Length Subnet Masking) permite usar subredes de distintos tama\u00f1os, adaptadas a lo que necesita cada grupo.</p> Subnetting cl\u00e1sico (fijo) VLSM (m\u00e1scara variable) Todas las subredes tienen el mismo tama\u00f1o Cada subred puede tener el tama\u00f1o que necesite F\u00e1cil de calcular Requiere m\u00e1s planificaci\u00f3n Puede desperdiciar IPs Ahorra espacio de direcciones Buena para redes simples Ideal para redes organizadas por grupos"},{"location":"redes_05.html#541-ejemplo-con-vlsm","title":"5.4.1 Ejemplo con VLSM","text":"<p>Queremos utilizar una direcci\u00f3n est\u00e1ndar de clase C, 192.168.5.0 /24, para crear cuatro subredes en una empresa, con 10, 25, 30 y 60 equipos respectivamente. Adem\u00e1s, necesitamos interconectar tres routers entre s\u00ed. El esquema b\u00e1sico de conexiones es \u00e9ste:</p> <p>Vemos en la imagen anterior que hay conexiones WAN. Una conexi\u00f3n WAN (Wide Area Network) se refiere a los enlaces punto a punto entre routers. Cada uno de estos enlaces necesita una subred propia, aunque solo va a conectar dos dispositivos (los routers en cada extremo).</p> <p>En este caso, la topolog\u00eda tiene 3 routers: R1, R2 y R3. Y est\u00e1n conectados de esta forma: - R1 se conecta a R3 (WAN1) - R2 se conecta a R3 (WAN2)</p> <p>Por tanto, necesitamos dos subredes WAN, una para cada conexi\u00f3n.</p> <p>Necesitaremos en total 6 subredes (cuatro para las cuatro LANs, y dos m\u00e1s para las dos conexiones entre routers). Lo que hacemos es ordenarlas de mayor a menor n\u00famero de direcciones necesarias:</p> <ul> <li> <p>La red de mayor tama\u00f1o ser\u00e1 la LAN1 (60 equipos). Necesitaremos 6 bits para asignarles direcciones a todos (2^6 = 64 direcciones, menos la de red y broadcast, quedan 62 disponibles). Por lo tanto, usaremos 32 \u2013 6 = 26 bits para la m\u00e1scara. Usando la direcci\u00f3n base 192.168.5.0 /24, esta red quedar\u00eda as\u00ed:         - Direcci\u00f3n de red: 192.168.5.0 /26         - Direcciones asignables: 192.168.5.1 hasta 192.168.5.62         - Direcci\u00f3n de broadcast: 192.168.5.63</p> </li> <li> <p>Pasamos a la siguiente red, que es la LAN2 (30 equipos). Necesitaremos 5 bits para direccionarlos (2^5 \u2013 2 = 30 direcciones justas), y por tanto usaremos 32 \u2013 5 = 27 bits para la m\u00e1scara, empezando por donde nos quedamos antes:         - Direcci\u00f3n de red: 192.168.5.64 /27         - Direcciones asignables: 192.168.5.65 hasta 192.168.5.94         - Direcci\u00f3n de broadcast: 192.168.5.95</p> </li> <li> <p>La siguiente es la LAN3 (25 equipos). Volveremos a necesitar 5 bits, y usaremos 27 para la m\u00e1scara. Continuamos asignando direcciones donde lo dejamos:         - Direcci\u00f3n de red: 192.168.5.96 /27         - Direcciones asignables: 192.168.5.97 hasta 192.168.5.126         - Direcci\u00f3n de broadcast: 192.168.5.127</p> </li> <li> <p>La siguiente es la LAN4 (10 equipos). Para ellos necesitaremos 4 bits (2^4 - 2 = 14 direcciones disponibles), y usaremos 32 \u2013 4 = 28 bits de m\u00e1scara.         - Direcci\u00f3n de red: 192.168.5.128 /28         - Direcciones asignables: 192.168.5.129 a 192.168.5.142         - Direcci\u00f3n de broadcast: 192.168.5.143</p> </li> <li> <p>Nos quedan las conexiones WAN. En ambas necesitaremos dos direcciones (una para cada router conectado a la WAN), y por tanto har\u00e1n falta 2 bits (2^2 - 2 = 2 direcciones justas). Usaremos 32 \u2013 2 = 30 bits de m\u00e1scara. As\u00ed, la primera WAN quedar\u00eda as\u00ed:         - Direcci\u00f3n de red: 192.168.5.144 /30         - Direcciones asignables: 192.168.5.145 y 192.168.5.146         - Direcci\u00f3n de broadcast: 192.168.5.147</p> </li> <li> <p>Y la segunda WAN as\u00ed:         - Direcci\u00f3n de red: 192.168.5.148 /30         - Direcciones asignables: 192.168.5.149 y 192.168.5.150         - Direcci\u00f3n de broadcast: 192.168.5.151</p> </li> </ul> <p>Direcciones usadas: - /26: 64 direcciones - /27: 32 + 32 = 64  - /28: 16 - /30: 4 + 4 = 8  Total utilizadas: 64 + 64 + 16 + 8 = 152 direcciones Disponibles en /24: 256 direcciones A\u00fan quedan 104 direcciones disponible para crecimiento o m\u00e1s subredes. Aunque VLSM usa diferentes m\u00e1scaras, todas las subredes creadas deben caber dentro del bloque principal (en este caso, un /24 = 256 direcciones).</p> <p>Ejercicio 3.  Repite los pasos vistos en la t\u00e9cnica de subredes con VLSM para una empresa que necesite crear 3 subredes de 15, 30 y 80 equipos, conectadas todas al mismo router</p> <p>Ejercicio 4. Repite los pasos para otra empresa con el siguiente dise\u00f1o de red:</p> <p>Ejercicio 5. Queremos utilizar una direcci\u00f3n IP de clase C, 192.168.5.0/24, para crear cuatro subredes dentro de una empresa, que albergar\u00e1n 10, 25, 55 y 70 equipos, respectivamente. Todas las subredes estar\u00e1n conectadas a un mismo router. Utiliza la t\u00e9cnica de subnetting con longitud de m\u00e1scara variable (VLSM) para dise\u00f1ar la configuraci\u00f3n de las subredes. Para cada subred, debes indicar: la direcci\u00f3n de red, la m\u00e1scara de subred, el rango de direcciones IP v\u00e1lidas para hosts y la direcci\u00f3n de broadcast.</p>"},{"location":"redes_06.html","title":"Redes 06","text":""},{"location":"redes_06.html#21-protocolos-de-comunicacion-el-lenguaje-de-las-redes","title":"2.1 Protocolos de comunicaci\u00f3n: el lenguaje de las redes","text":"<p>Los protocolos de comunicaci\u00f3n son conjuntos de reglas que permiten la transferencia de datos entre dispositivos en una red. Sin estos protocolos, la comunicaci\u00f3n en Internet y en las redes inform\u00e1ticas no ser\u00eda posible.</p>"},{"location":"redes_06.html#211-el-conjunto-de-protocolos-tcpip","title":"2.1.1 El conjunto de protocolos TCP/IP","text":"<p>TCP/IP es el est\u00e1ndar global en redes, y cada vez que usas Internet, est\u00e1s utilizando TCP/IP.</p> <ul> <li>TCP (Transmission Control Protocol): se encarga de dividir los datos en paquetes, asegurar de que lleguen sin errores y en el orden correcto.</li> <li>IP (Internet Protocol): se ocupa de enrutar esos paquetes para que lleguen a la direcci\u00f3n correcta.</li> </ul> <p>Cuando env\u00edas un mensaje en WhatsApp, TCP divide el mensaje en fragmentos (paquetes) y los env\u00eda con la direcci\u00f3n IP del destinatario. Al llegar, TCP los reconstruye en el mensaje original.</p>"},{"location":"redes_06.html#212-otros-protocolos-esenciales","title":"2.1.2 Otros protocolos esenciales","text":"<p>Adem\u00e1s de TCP/IP, existen otros protocolos fundamentales en el funcionamiento de Internet:</p>"},{"location":"redes_06.html#dns-domain-name-system","title":"DNS (Domain Name System)","text":"<p>El DNS es el protocolo que traduce nombres de dominio como www.google.com en direcciones IP num\u00e9ricas, permitiendo que los navegadores localicen los servidores donde est\u00e1n alojadas las p\u00e1ginas web. Realmente se trata de una base de datos distribuida. Por ejemplo, cuando escribes www.wikipedia.org en tu navegador, el DNS traduce este nombre en una direcci\u00f3n IP espec\u00edfica (por ejemplo, 198.35.26.96), permitiendo que accedas al sitio web.</p>"},{"location":"redes_06.html#http-hypertext-transfer-protocol-y-https-hypertext-transfer-protocol-secure","title":"HTTP  (HyperText Transfer Protocol) y HTTPS (HyperText Transfer Protocol Secure)","text":"<p>Ambos protocolos permiten la navegaci\u00f3n en la web, pero existen diferencias importantes en seguridad.</p> <ul> <li> <p>HTTP </p> <ul> <li>Es el protocolo est\u00e1ndar para la transferencia de informaci\u00f3n en la web. </li> <li>No cifra los datos, por lo que cualquier persona que intercepte la comunicaci\u00f3n puede ver la informaci\u00f3n transmitida. </li> <li>Si inicias sesi\u00f3n en una p\u00e1gina que usa HTTP, alguien en la misma red WiFi p\u00fablica podr\u00eda capturar tu contrase\u00f1a y leerla sin dificultad.</li> </ul> </li> <li> <p>HTTPS </p> <ul> <li>Versi\u00f3n m\u00e1s segura de HTTP, ya que usa cifrado SSL/TLS para proteger la informaci\u00f3n. </li> <li>Un sitio web usa HTTPS si en la barra de direcciones aparece un candado \ud83d\udd12.</li> </ul> </li> <li> <p>Cifrado SSL/TLS: \u00bfc\u00f3mo protege los datos?</p> <ul> <li>El cifrado SSL/TLS convierte los datos en un c\u00f3digo incomprensible para quien no tenga la clave adecuada. Su funcionamiento b\u00e1sico es el siguiente: <ul> <li>Tu navegador y el servidor acuerdan una clave secreta (handshake o apret\u00f3n de manos).</li> <li>A partir de ese momento, toda la informaci\u00f3n se cifra antes de enviarse.</li> <li>Si un atacante intercepta los datos, solo ver\u00e1 un conjunto de caracteres sin sentido.</li> </ul> </li> <li>Es como enviar una carta dentro de una caja con candado. Solo el destinatario tiene la llave para abrirla y leer el mensaje. </li> </ul> </li> </ul>"},{"location":"redes_06.html#ftp-file-transfer-protocol","title":"FTP (File Transfer Protocol)","text":"<p>FTP es un protocolo que permite la transferencia de archivos entre un cliente (ordenador) y un servidor a trav\u00e9s de una red, ya sea una red local o Internet. Imagina que est\u00e1s dise\u00f1ando una p\u00e1gina web. Una vez terminada en tu computadora, necesitas subir los archivos al servidor donde estar\u00e1 publicada. Para esto, usas un programa FTP como FileZilla y env\u00edas los archivos al servidor.</p>"},{"location":"redes_06.html#protocolos-de-correo-electronico-smtpimappop3","title":"Protocolos de correo electr\u00f3nico: SMTP/IMAP/POP3","text":"<p>Son protocolos utilizados en el env\u00edo y recepci\u00f3n de correos electr\u00f3nicos desde el remitente hasta el destinatario.  - SMTP (Simple Mail Transfer Protocol): para enviar correos. Por ejemplo, cuando env\u00edas un correo desde Gmail, tu mensaje viaja a trav\u00e9s del servidor SMTP de Google antes de llegar al destinatario. - IMAP (Internet Message Access Protocol): permite acceder al correo electr\u00f3nico directamente desde el servidor sin necesidad de descargar los mensajes. Si usas tu correo en el m\u00f3vil y la computadora, IMAP sincroniza los mensajes para que puedas acceder a ellos desde cualquier dispositivo. Su principal ventaja es que no ocupa espacio en el dispositivo, ya que los correos permanecen en el servidor. - POP3 (Post Office Protocol v3): descarga los correos en un dispositivo y, por defecto, los borra del servidor despu\u00e9s de descargarlos. Si configuras tu correo en Outlook con POP3, los mensajes se almacenan en tu computadora, pero si accedes desde otro dispositivo, no los ver\u00e1s. Su principal ventaja es que permite acceder a los correos sin necesidad de estar conectado a Internet.</p>"},{"location":"redes_06.html#22-direcciones-ip-y-mac-concepto-y-utilidad","title":"2.2 Direcciones IP y MAC: concepto y utilidad","text":"<p>Para que los dispositivos puedan comunicarse en una red, necesitan identificarse correctamente. Para ello, utilizan dos tipos de direcciones: - Direcci\u00f3n IP: identifica un dispositivo dentro de una red y le permite conectarse a Internet. - Direcci\u00f3n MAC: es un identificador \u00fanico que distingue f\u00edsicamente a cada dispositivo.</p> <p>Direcci\u00f3n IP: el domicilio de tu dispositivo La direcci\u00f3n IP (Internet Protocol) es el identificador l\u00f3gico que se asigna a cada dispositivo en una red. Funciona como la direcci\u00f3n de tu casa: si alguien quiere enviarte informaci\u00f3n en Internet, necesita saber d\u00f3nde encontrarte. </p> <ul> <li>IPv4 (32 bits): formato cl\u00e1sico con n\u00fameros como 192.168.1.1. Limitado a unos 4,3 mil millones de direcciones.</li> <li>IPv6 (128 bits): nuevo est\u00e1ndar con muchas m\u00e1s combinaciones (2001:db8::ff00:42:8329).</li> </ul> <p>\ud83d\udccc Ejemplo: Tu router tiene una direcci\u00f3n IP asignada por el proveedor de Internet, y dentro de tu casa, cada dispositivo (m\u00f3vil, laptop, consola) recibe una direcci\u00f3n IP interna.</p> <p>Direcci\u00f3n MAC: la huella digital de tu dispositivo - Cada tarjeta de red tiene una direcci\u00f3n MAC (Media Access Control) \u00fanica, establecida por el fabricante. - Est\u00e1 formada por 6 pares de caracteres hexadecimales (ejemplo: 00:1A:2B:3C:4D:5E). - No cambia, a diferencia de la IP, que puede ser din\u00e1mica.</p> <p>\ud83d\udccc Diferencia clave: - La direcci\u00f3n IP es como la direcci\u00f3n de tu casa (cambia si te mudas). - La direcci\u00f3n MAC es como tu huella dactilar (\u00fanica e inalterable).</p>"},{"location":"redes_06.html#213-parametros-de-calidad-en-redes-ancho-de-banda-latencia-y-otros-parametros-de-red","title":"2.1.3 Par\u00e1metros de calidad en redes: ancho de banda, latencia y otros par\u00e1metros de red.","text":"<p>Cuando usamos Internet, no solo importa que estemos conectados, sino c\u00f3mo de buena es esa conexi\u00f3n. Aqu\u00ed entran en juego varios factores clave:</p> <p>Ancho de Banda: la cantidad de datos que pueden viajar - Se mide en Mbps (megabits por segundo) o Gbps (gigabits por segundo). - Cuanto mayor sea, m\u00e1s r\u00e1pido podremos descargar y cargar informaci\u00f3n.</p> <p>\ud83d\udccc Ejemplo: - Una videollamada en HD necesita al menos 5 Mbps de ancho de banda. - Ver Netflix en 4K puede requerir 25 Mbps o m\u00e1s.</p> <p>Latencia: el tiempo de respuesta de la red - Se mide en milisegundos (ms) y representa el tiempo que tarda un paquete en viajar de origen a destino. - Cuanto menor sea la latencia, m\u00e1s r\u00e1pida ser\u00e1 la comunicaci\u00f3n.</p> <p>\ud83d\udccc Ejemplo: - Un videojuego en l\u00ednea necesita baja latencia (&lt;50 ms) para evitar retrasos. - En una videollamada, una alta latencia (&gt;200 ms) hace que haya desfase en el audio y el video.</p> <p>Jitter: la variaci\u00f3n en la llegada de paquetes - Si los paquetes de datos llegan con diferencias de tiempo irregulares, se produce jitter. - Afecta especialmente a transmisiones en vivo y llamadas por Internet.</p> <p>\ud83d\udccc Ejemplo: Si una videollamada va a saltos o con cortes, el jitter puede ser el problema.</p> <p>P\u00e9rdida de Paquetes: cuando la informaci\u00f3n no llega - Se expresa en porcentaje de paquetes perdidos. - Puede ser causada por congesti\u00f3n en la red, mala se\u00f1al WiFi o errores en la conexi\u00f3n.</p> <p>\ud83d\udccc Ejemplo: En una partida online, si hay un 3-5% de p\u00e9rdida de paquetes, el juego puede volverse injugable con personajes que \"se teletransportan\".</p>"},{"location":"redes_06.html#analisis-y-configuracion-de-redes","title":"An\u00e1lisis y configuraci\u00f3n de redes","text":""},{"location":"redes_06.html#41-herramientas-de-analisis-de-redes","title":"4.1 Herramientas de an\u00e1lisis de redes","text":""},{"location":"redes_06.html#42-introduccion-a-la-seguridad-en-las-redes","title":"4.2 Introducci\u00f3n a la seguridad en las redes","text":"<ul> <li>Amenazas b\u00e1sicas en redes (interceptaci\u00f3n, suplantaci\u00f3n, ataques de denegaci\u00f3n de servicio)</li> <li>Concepto de firewall y VPN</li> </ul>"},{"location":"redes_06.html#43-configuracion-basica-de-una-red-en-packet-tracer","title":"4.3 Configuraci\u00f3n b\u00e1sica de una red en Packet Tracer","text":""},{"location":"sistemas_01.html","title":"1. Introducci\u00f3n a los sistemas inform\u00e1ticos","text":""},{"location":"sistemas_01.html#11-que-es-un-sistema-informatico","title":"1.1 \u00bfQu\u00e9 es un sistema inform\u00e1tico?","text":"<p>Un sistema inform\u00e1tico es un conjunto de elementos interconectados que trabajan de forma coordinada para recibir, procesar, almacenar y transmitir informaci\u00f3n de forma autom\u00e1tica y eficiente. Su objetivo es realizar tareas que van desde operaciones b\u00e1sicas (como escribir un documento) hasta procesos complejos (como simular un clima o diagnosticar una enfermedad).</p> <p>Est\u00e1 compuesto por:</p> <ul> <li>Hardware: los componentes f\u00edsicos del sistema.</li> <li>Software: los programas que indican al hardware qu\u00e9 hacer.</li> <li>Datos: la informaci\u00f3n que se introduce, procesa y produce.</li> </ul> <p>Ejemplos de sistemas inform\u00e1ticos:</p> <ul> <li>Un ordenador personal con sus perif\u00e9ricos y sistema operativo.</li> <li>Un cajero autom\u00e1tico que procesa transacciones bancarias.</li> <li>Un smartphone que ejecuta apps, recibe datos y muestra resultados.</li> <li>Una impresora multifunci\u00f3n con Wi-Fi y pantalla t\u00e1ctil*, que guarda trabajos en cola y puede recibir archivos desde la nube.</li> </ul> <p>Ejemplos de sistemas que NO se consideran sistemas inform\u00e1ticos:</p> <ul> <li>Una calculadora b\u00e1sica: aunque tiene componentes electr\u00f3nicos, no ejecuta software programable ni guarda datos.</li> <li>Un reloj digital sencillo: solo muestra la hora mediante circuitos fijos, sin procesamiento programable.</li> <li>Una c\u00e1mara desechable con flash: usa componentes electr\u00f3nicos, pero no almacena ni procesa informaci\u00f3n digital.</li> </ul> <p>\ud83d\udc49 RECUERDA: Un sistema inform\u00e1tico es aquel que procesa informaci\u00f3n de forma automatizada mediante la integraci\u00f3n de hardware, software y datos. La ausencia de cualquiera de estos elementos impide su funcionamiento como tal.</p>"},{"location":"sistemas_01.html#12-componentes-de-un-si","title":"1.2 Componentes de un SI","text":""},{"location":"sistemas_01.html#121-hardware","title":"1.2.1 Hardware","text":"<p>El hardware es la parte f\u00edsica y tangible del sistema. Se divide en:</p> <ul> <li>Unidad central de procesamiento (CPU): ejecuta instrucciones.</li> <li>Memoria: almacena datos temporalmente (RAM, cach\u00e9).</li> <li>Almacenamiento secundario: guarda informaci\u00f3n de forma persistente (discos duros, SSD, unidades USB).</li> <li>Perif\u00e9ricos: son dispositivos que permiten la comunicaci\u00f3n con el usuario.     </li> </ul>"},{"location":"sistemas_01.html#122-software","title":"1.2.2 Software","text":"<p>El software es el conjunto de instrucciones y programas que controlan el hardware. Se clasifica en:</p> <ul> <li>Sistema operativo: gestiona los recursos del sistema (Windows, Linux, Android, macOS).</li> <li>Software de aplicaci\u00f3n: permite realizar tareas espec\u00edficas (navegadores, procesadores de texto, videojuegos).</li> <li>Software de desarrollo: herramientas para crear otros programas (editores de c\u00f3digo, compiladores, entornos IDE).</li> </ul> <p>Hoy en d\u00eda muchas apps funcionan directamente en la web, sin necesidad de instalar nada (como Google Docs o Canva), gracias al desarrollo del cloud computing.</p>"},{"location":"sistemas_01.html#13-relacion-entre-hardware-y-software","title":"1.3 Relaci\u00f3n entre hardware y software","text":"<ul> <li>El hardware sin software no tiene instrucciones que seguir; es como un cuerpo sin cerebro.</li> <li>El software sin hardware no puede ejecutarse; necesita un medio f\u00edsico para funcionar.</li> </ul> <p>Esta relaci\u00f3n simbi\u00f3tica hace que el desarrollo de uno influya directamente en el otro:</p> <ul> <li>Nuevos procesadores \u2192 programas m\u00e1s complejos y potentes.</li> <li>Nuevos programas \u2192 necesidad de mejorar el hardware para ejecutarlos correctamente.</li> </ul> <p>EJEMPLO</p> <p>Para jugar a un viodejuego moderno en resoluci\u00f3n 4K se requiere: una GPU avanzada (hardware) y un motor gr\u00e1fico optimizado (software), como Unreal Engine o Unity.</p> <p>\u00bfSabes qu\u00e9 es una GPU?</p> <p>Una GPU o Unidad de Procesamiento Gr\u00e1fico (por sus siglas en ingl\u00e9s: Graphics Processing Unit) es un procesador dise\u00f1ado para trabajar con gr\u00e1ficos e im\u00e1genes. Funciona como un especialista en gr\u00e1ficos o como un conjunto de mini-cerebros capaces de hacer muchas tareas peque\u00f1as al mismo tiempo, ideal para procesar im\u00e1genes y realizar c\u00e1lculos repetitivos.  </p> <p>A diferencia de la CPU, que se encarga de tareas generales y coordina todo el sistema, la GPU est\u00e1 optimizada para hacer muchos c\u00e1lculos en paralelo, lo que la hace muy eficiente en tareas visuales, cient\u00edficas e incluso en el entrenamiento de inteligencias artificiales.</p>"},{"location":"sistemas_01.html#14-arquitectura-de-von-neumann","title":"1.4 Arquitectura de Von Neumann","text":"<p>La arquitectura de Von Neumann es la base del funcionamiento de casi todos los ordenadores actuales. Fue propuesta en 1945 por el matem\u00e1tico John von Neumann, y su gran aportaci\u00f3n fue organizar los componentes del ordenador de forma l\u00f3gica, estructurada y flexible, permitiendo que una misma m\u00e1quina pudiera ejecutar distintos programas sin modificar el hardware.</p>"},{"location":"sistemas_01.html#141-quien-fue-john-von-neumann","title":"1.4.1 \u00bfQui\u00e9n fue John von Neumann?","text":"<p>John von Neumann (1903\u20131957) fue un brillante matem\u00e1tico y cient\u00edfico h\u00fangaro-estadounidense. Destac\u00f3 en m\u00faltiples campos: matem\u00e1ticas, f\u00edsica, computaci\u00f3n\u2026 \u00a1y hasta colabor\u00f3 en el desarrollo de la bomba at\u00f3mica!</p> <p>En 1945, redact\u00f3 el documento que sent\u00f3 las bases de la arquitectura que hoy lleva su nombre. Su idea de almacenar datos e instrucciones en la misma memoria revolucion\u00f3 la computaci\u00f3n y permiti\u00f3 el desarrollo de ordenadores programables y reutilizables. Por eso se le considera el padre de la inform\u00e1tica moderna.</p> <p>Adem\u00e1s de su enorme talento cient\u00edfico, von Neumann era conocido por su memoria prodigiosa. Se dec\u00eda que pod\u00eda memorizar libros enteros tras una sola lectura y resolver c\u00e1lculos mentales complej\u00edsimos desde ni\u00f1o. A los seis a\u00f1os ya divid\u00eda n\u00fameros de ocho cifras mentalmente, y en la universidad era capaz de recitar manuales t\u00e9cnicos palabra por palabra a\u00f1os despu\u00e9s de haberlos le\u00eddo.</p> John von Neumann De izquierda a derecha: Bigelow, Goldstine, Oppenheimer y von Neumann frente a la IAS Machine. <p>La IAS Machine fue uno de los primeros ordenadores con programa almacenado, dise\u00f1ada en el Instituto de Estudios Avanzados de Princeton bajo la direcci\u00f3n de John von Neumann.</p> <p>En sus \u00faltimos a\u00f1os, von Neumann padeci\u00f3 un c\u00e1ncer muy agresivo. Falleci\u00f3 en 1957 a los 53 a\u00f1os, pero hasta sus \u00faltimos d\u00edas sigui\u00f3 resolviendo problemas matem\u00e1ticos y compartiendo ideas.</p> <p>El f\u00edsico Edward Teller, creador de la bomba de hidr\u00f3geno, lleg\u00f3 a decir de \u00e9l: \u201cS\u00f3lo hay dos tipos de personas: John von Neumann y el resto de nosotros.\u201d</p>"},{"location":"sistemas_01.html#142-por-que-fue-una-revolucion","title":"1.4.2 \u00bfPor qu\u00e9 fue una revoluci\u00f3n?","text":"<p>Antes de la arquitectura de Von Neumann, los primeros ordenadores \u2014como el ENIAC (1945)\u2014 no ten\u00edan memoria para almacenar programas. Para que realizaran una nueva tarea, era necesario reconfigurar f\u00edsicamente el hardware, es decir, desconectar y volver a conectar cables, cambiar interruptores y reorganizar m\u00f3dulos. Esto pod\u00eda llevar horas o incluso d\u00edas. Era como tener que desmontar y reconstruir una m\u00e1quina entera cada vez que quer\u00edas hacer algo diferente.</p> <p>Con la propuesta de Von Neumann, esto cambi\u00f3 radicalmente. La idea de guardar tanto los datos como las instrucciones en la misma memoria permiti\u00f3 que el ordenador pudiera cambiar de tarea simplemente cargando otro programa, sin modificar el hardware. Por primera vez, el software se convirti\u00f3 en el elemento flexible que determinaba qu\u00e9 hac\u00eda el ordenador.</p> <p>Hoy en d\u00eda, esta idea es tan normal que parece obvia. Podemos abrir una app, cerrar otra, actualizar un juego o instalar un sistema operativo nuevo con unos pocos clics. Pero en su momento, supuso una revoluci\u00f3n t\u00e9cnica, conceptual y operativa. Fue el paso clave para que los ordenadores dejaran de ser herramientas especializadas y se convirtieran en m\u00e1quinas universales capaces de adaptarse a m\u00faltiples usos.</p> <p>Imagina que cada vez que quisieras cambiar de app en tu m\u00f3vil tuvieras que abrirlo, soldar cables y volver a ensamblarlo. Esa era, en esencia, la inform\u00e1tica antes de Von Neumann.</p>"},{"location":"sistemas_01.html#143-componentes-principales","title":"1.4.3 Componentes principales","text":"<p>Seg\u00fan esta arquitectura, todos los ordenadores modernos comparten una estructura b\u00e1sica que incluye 4 componentes principales.</p> <p>Arquitectura Von Neumann</p> <p>1. Unidad Central de Procesamiento (CPU)</p> <p>Es el cerebro del ordenador. Ejecuta las instrucciones paso a paso y controla el funcionamiento general. Est\u00e1 formada por:</p> <ul> <li>Unidad de Control (CU, Control Unity): dirige y coordina el funcionamiento del sistema. Indica qu\u00e9 se debe hacer y cu\u00e1ndo.</li> <li>Unidad Aritm\u00e9tico-L\u00f3gica (ALU, Arithmetic Logic Unit)*: realiza c\u00e1lculos y comparaciones.</li> <li>Registros: peque\u00f1as memorias ultrarr\u00e1pidas dentro de la CPU que almacenan datos temporales.</li> </ul> <p>2. Memoria principal (RAM)</p> <p>Es la zona de trabajo del ordenador. Aqu\u00ed se cargan tanto los programas que se est\u00e1n ejecutando como los datos que utilizan.</p> <p>Y atenci\u00f3n, porque aqu\u00ed est\u00e1 la clave del \u00e9xito de esta arquitectura revolucionaria: los datos y las instrucciones se almacenan juntos en la misma memoria. Antes de esta idea, se usaban memorias separadas para datos e instrucciones, lo que limitaba mucho su funcionamiento.</p> <p>EJEMPLO</p> <p>Cuando abres un videojuego, su c\u00f3digo y los datos de la partida (nivel, puntuaci\u00f3n...) se cargan en la RAM.</p> <p>3. Buses</p> <p>Son las v\u00edas internas por donde viaja la informaci\u00f3n dentro del ordenador. Como si fueran autopistas que conectan todas las partes del sistema.</p> <ul> <li>Bus de datos: lleva los datos.</li> <li>Bus de direcciones: indica de d\u00f3nde se leen o d\u00f3nde se escriben los datos.</li> <li>Bus de control: env\u00eda las \u00f3rdenes para coordinar los componentes.</li> </ul> <p>4. Dispositivos de Entrada/Salida (E/S)</p> <p>Son los componentes que permiten que el sistema se comunique con el exterior: recibir informaci\u00f3n, mostrar resultados o interactuar con el entorno.</p> <ul> <li>Entrada: permiten introducir datos al sistema. Ejemplos: teclado, rat\u00f3n, micr\u00f3fono, c\u00e1mara...</li> <li>Salida: muestran o transmiten los resultados del procesamiento. Ejemplos: pantalla, impresora, altavoces...</li> <li>Mixtos o bidireccionales: permiten entrada y salida de informaci\u00f3n. Ejemplos: pantalla t\u00e1ctil, m\u00f3dem, pantalla interactiva, dispositivos de red, memorias USB.</li> </ul> <p>Aunque no forman parte de la arquitectura como tal, son esenciales para que el sistema sea \u00fatil y funcional.</p>"},{"location":"sistemas_01.html#144-caracteristicas-clave-del-modelo-von-neumann","title":"1.4.4 Caracter\u00edsticas clave del modelo Von Neumann","text":"Caracter\u00edstica Explicaci\u00f3n Memoria unificada Datos e instrucciones se almacenan en el mismo espacio de memoria. Ejecuci\u00f3n secuencial Las instrucciones se ejecutan una tras otra, en orden. Flexibilidad Se puede cambiar el programa sin modificar el hardware. Reutilizaci\u00f3n del hardware El mismo hardware sirve para ejecutar diferentes programas."},{"location":"sistemas_01.html#15-resumen","title":"1.5 Resumen","text":"<p>En esta unidad hemos aprendido:</p> <ul> <li>Qu\u00e9 es un sistema inform\u00e1tico y cu\u00e1les son sus componentes: hardware, software y datos.</li> <li>La relaci\u00f3n entre hardware y software, y su interdependencia.</li> <li>La importancia de la arquitectura de Von Neumann como base de los ordenadores modernos. Este modelo permiti\u00f3 transformar los ordenadores en m\u00e1quinas universales: con solo cambiar el software, pod\u00edan realizar cualquier tarea, sin modificar el hardware.</li> </ul>"},{"location":"sistemas_02.html","title":"2. Representaci\u00f3n de la informaci\u00f3n y sistemas de numeraci\u00f3n","text":""},{"location":"sistemas_02.html#21-como-entienden-los-ordenadores-la-informacion","title":"2.1 \u00bfC\u00f3mo entienden los ordenadores la informaci\u00f3n?","text":""},{"location":"sistemas_02.html#22-el-sistema-binario","title":"2.2 El sistema binario","text":""},{"location":"sistemas_02.html#23-conversion-entre-sistemas","title":"2.3 Conversi\u00f3n entre sistemas","text":""},{"location":"sistemas_02.html#24-otros-sistemas-octal-y-hexadecimal","title":"2.4 Otros sistemas: octal y hexadecimal","text":""},{"location":"sistemas_02.html#25-representacion-de-los-caracteres-ascii-y-unicode","title":"2.5 Representaci\u00f3n de los caracteres: ASCII y Unicode","text":""},{"location":"sistemas_02.html#26-representacion-digital-de-imagenes-sonido-y-video","title":"2.6 Representaci\u00f3n digital de im\u00e1genes, sonido y v\u00eddeo","text":""}]}